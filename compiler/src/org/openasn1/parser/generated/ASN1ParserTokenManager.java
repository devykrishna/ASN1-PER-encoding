/* Generated By:JavaCC: Do not edit this line. ASN1ParserTokenManager.java */
package org.openasn1.parser.generated;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.InputStream;
import java.util.Vector;

import org.openasn1.parser.generated.syntaxtree.*;
import org.openasn1.parser.generated.visitor.*;

public class ASN1ParserTokenManager implements ASN1ParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000000L) != 0L)
            return 0;
         if ((active0 & 0xfffffff000000000L) != 0L || (active1 & 0xfffffffffffffL) != 0L)
         {
            jjmatchedKind = 116;
            return 42;
         }
         if ((active0 & 0x40000000L) != 0L)
            return 43;
         if ((active0 & 0x8000L) != 0L)
            return 11;
         if ((active0 & 0x20000000L) != 0L)
            return 44;
         return -1;
      case 1:
         if ((active0 & 0x200000000000L) != 0L || (active1 & 0x800000L) != 0L)
            return 42;
         if ((active0 & 0xffffdff000000000L) != 0L || (active1 & 0xfffffff7fffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 1;
            }
            return 42;
         }
         return -1;
      case 2:
         if ((active0 & 0x200044000000000L) != 0L || (active1 & 0x404038000L) != 0L)
            return 42;
         if ((active0 & 0xfdffdbb000000000L) != 0L || (active1 & 0xffffbfb7c7fffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 2;
            }
            return 42;
         }
         return -1;
      case 3:
         if ((active1 & 0x8028880040002L) != 0L)
            return 42;
         if ((active0 & 0xfdffdbb000000000L) != 0L || (active1 & 0x7fd737b7a7ffdL) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 3;
            return 42;
         }
         return -1;
      case 4:
         if ((active1 & 0x40008000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 3;
            }
            return 20;
         }
         if ((active0 & 0x1020000000000L) != 0L || (active1 & 0x80000400001L) != 0L)
            return 42;
         if ((active0 & 0xfdfed9b000000000L) != 0L || (active1 & 0x7f173733a7ffcL) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 4;
            return 42;
         }
         return -1;
      case 5:
         if ((active0 & 0x800801000000000L) != 0L || (active1 & 0x103000100000L) != 0L)
            return 42;
         if ((active1 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 4;
            }
            return 20;
         }
         if ((active0 & 0xf5fe59a000000000L) != 0L || (active1 & 0x7e5437b287ffcL) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 5;
            return 42;
         }
         return -1;
      case 6:
         if ((active0 & 0x2120100000000000L) != 0L || (active1 & 0x800052001300L) != 0L)
            return 42;
         if ((active0 & 0xd4de49a000000000L) != 0L || (active1 & 0x76543292a6cfcL) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 6;
            return 42;
         }
         return -1;
      case 7:
         if ((active0 & 0x9080000000000000L) != 0L || (active1 & 0x201000c80L) != 0L)
            return 42;
         if ((active0 & 0x445e49a000000000L) != 0L || (active1 & 0x76541282a607cL) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 7;
            return 42;
         }
         return -1;
      case 8:
         if ((active0 & 0x6490000000000L) != 0L || (active1 & 0x204000000020L) != 0L)
            return 42;
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x100000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 7;
            }
            return 20;
         }
         if ((active0 & 0x4458008000000000L) != 0L || (active1 & 0x74500282a605cL) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 8;
            }
            return 42;
         }
         return -1;
      case 9:
         if ((active0 & 0x414000000000000L) != 0L || (active1 & 0x1000000000040L) != 0L)
            return 42;
         if ((active0 & 0x404800a000000000L) != 0L || (active1 & 0x64501282a601cL) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 9;
            return 42;
         }
         return -1;
      case 10:
         if ((active0 & 0x48008000000000L) != 0L)
            return 42;
         if ((active0 & 0x4000002000000000L) != 0L || (active1 & 0x64501282a601cL) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 10;
            return 42;
         }
         return -1;
      case 11:
         if ((active1 & 0x100006000L) != 0L)
            return 42;
         if ((active0 & 0x4000002000000000L) != 0L || (active1 & 0x64500282a001cL) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 11;
            return 42;
         }
         return -1;
      case 12:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x4010008080018L) != 0L)
            return 42;
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x2440020220004L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 12;
            return 42;
         }
         return -1;
      case 13:
         if ((active1 & 0x2000000020000L) != 0L)
            return 42;
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x440020200004L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 13;
            return 42;
         }
         return -1;
      case 14:
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x440020000004L) != 0L)
            return 42;
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 14;
            return 42;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 34);
      case 34:
         return jjStartNfaWithStates_0(0, 29, 44);
      case 38:
         return jjStopAtPos(0, 10);
      case 39:
         return jjStartNfaWithStates_0(0, 30, 43);
      case 40:
         return jjStopAtPos(0, 22);
      case 41:
         return jjStopAtPos(0, 23);
      case 42:
         return jjStopAtPos(0, 9);
      case 44:
         return jjStopAtPos(0, 20);
      case 45:
         return jjStartNfaWithStates_0(0, 26, 0);
      case 46:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x180L, 0x0L);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 58:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 59:
         return jjStopAtPos(0, 31);
      case 60:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 28);
      case 62:
         return jjStopAtPos(0, 19);
      case 64:
         return jjStopAtPos(0, 32);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x1f000000000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x3e0000000000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x1fc00000000000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x60000000000000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0xff80000000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1cL);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7fe0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x38000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc0000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f00000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7e000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3e00000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7c000000000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f80000000000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000000000000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000L);
      case 91:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 93:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 94:
         return jjStopAtPos(0, 35);
      case 123:
         return jjStopAtPos(0, 16);
      case 124:
         return jjStopAtPos(0, 33);
      case 125:
         return jjStopAtPos(0, 17);
      default :
         return jjMoveNfa_0(10, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0L);
      case 47:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      case 54:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000L);
      case 58:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L);
      case 62:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8002008021L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000L, active1, 0x100000L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000040L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x60020000000000L, active1, 0x780000000L);
      case 70:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 87, 42);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0x8000800030000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004000000000L, active1, 0x8000000L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x80080000000000L, active1, 0x380L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x700000000000000L, active1, 0x380000003c00L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e100000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0x1000000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20050000002L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1801000000000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0x40000L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0xf800000000000000L, active1, 0L);
      case 89:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 45, 42);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x42000000000L);
      case 91:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      case 93:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000cL);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x6000000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000010L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(2, 7);
         break;
      case 49:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000L);
      case 53:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      case 61:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(2, 11);
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x1400000000000L, active1, 0x80000000L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x900000000000000L, active1, 0x800000000400L);
      case 68:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 42);
         break;
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000040L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000000L, active1, 0x1000000000000L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0x8000000000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x380040000000L);
      case 74:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000L);
      case 76:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100040001L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000000L, active1, 0L);
      case 78:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x18000000000000L, active1, 0x2000020000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x900000000000L, active1, 0x4002L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000088000000000L, active1, 0x40000000380L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000L, active1, 0x800L);
      case 84:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 42);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 98, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0xc000010000000000L, active1, 0x8000003403000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x20008000000L);
      case 86:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 90, 42);
         break;
      case 88:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 79, 42);
         break;
      case 90:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400020000000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xcL);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 54:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000L);
      case 56:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x100000000L);
      case 69:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 42);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 105, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0xc880001000000000L, active1, 0x40000503000L);
      case 72:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 42);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x40820000000000L, active1, 0x1001000000L);
      case 76:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 42);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 95, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000108000000000L, active1, 0x580L);
      case 77:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x2100010000000000L, active1, 0x80000000200L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000000000L, active1, 0L);
      case 81:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L);
      case 83:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 103, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x9080000000000L, active1, 0x4018000021L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x10002000000000L, active1, 0x802002000800L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200020000L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200040000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x201000028000cL);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40008000000L);
      case 52:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x10400000000000L, active1, 0x2040000800L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0x100000L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000000000L, active1, 0L);
      case 69:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x400100000000000L, active1, 0x200212000000L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000008000000000L, active1, 0x180L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 42);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 107, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x4040001000000000L, active1, 0x1000000000L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000000000L, active1, 0x1000000L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0xa000002000000000L, active1, 0x2200L);
      case 83:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000020000L);
      case 84:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 86, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0x100000040L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0x100000000400L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000cL);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0x14020000020L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L);
      case 54:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000L);
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x112000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000408000000000L, active1, 0x80L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0x400L);
      case 69:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 42);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 108, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0x1100L);
      case 71:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 100, 42);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x50000000000000L, active1, 0x40108000040L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x8006000000000000L, active1, 0x211000800L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x408000000000000L, active1, 0x200002000000L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x2000L);
      case 84:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 42);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 42);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0x40000200L);
      case 88:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 42);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000cL);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80010L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0x404000000020L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x3000000200000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x8408008000000000L, active1, 0x1000000L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0x200000800L);
      case 68:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 42);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000200000L);
      case 69:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 94, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x86000000000000L, active1, 0x2400L);
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x5000000000000000L, active1, 0x20080L);
      case 78:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 42);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0x8000000L);
      case 82:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 76, 42);
         break;
      case 83:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 61, 42);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000004000L);
      case 84:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 42);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 92, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x40410000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80010L);
      case 101:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 111, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x6000000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0x4000000020L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xcL);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000000L);
      case 66:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000L);
      case 68:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 42);
         break;
      case 69:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 75, 42);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 97, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0x40100000000L);
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x58010000000000L, active1, 0x40L);
      case 76:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 63, 42);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 88, 42);
         break;
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x6000000000000L, active1, 0x20000L);
      case 83:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4010000080018L);
      case 84:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 42);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 71, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000a000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000004L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L, active1, 0x4000000020L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000L);
      case 120:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L, active1, 0x100000000L);
      case 67:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 42);
         break;
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0x40L);
      case 70:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000008000000000L, active1, 0x8000000L);
      case 76:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 109, 42);
         break;
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x18000000000000L, active1, 0x40000000000L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L, active1, 0L);
      case 82:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 46, 42);
         break;
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000000L);
      case 84:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L, active1, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000L);
      case 103:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 43, 42);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 69, 42);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 102, 42);
         break;
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4010000080018L);
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 58, 42);
         break;
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0L);
      case 71:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 52, 42);
         break;
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x22000L);
      case 76:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L, active1, 0x8000000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L, active1, 0x100000000L);
      case 82:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 70, 42);
         break;
      case 83:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 50, 42);
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000L, active1, 0x400020000000L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4L);
      case 103:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 112, 42);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4010000080018L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 51, 42);
         break;
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L, active1, 0x40108000000L);
      case 78:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 39, 42);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000L);
      case 83:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 54, 42);
         break;
      case 89:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4010000080018L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000200000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400020000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 68:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(11, 96, 42);
         break;
      case 70:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000000000L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000L);
      case 78:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(11, 77, 42);
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000000L, active1, 0x8000004L);
      case 103:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(11, 78, 42);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2000000200000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4010000080018L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400020000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x40000000000L);
      case 84:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000L, active1, 0x20000L);
      case 89:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 62, 42);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(12, 91, 42);
         break;
      case 103:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(12, 67, 42);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(12, 68, 42);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(12, 83, 42);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 104, 42);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 114, 42);
         break;
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400020000004L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000000000000L);
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x40000000000L);
      case 89:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(13, 81, 42);
         break;
      case 103:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 113, 42);
         break;
      case 109:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x400020000000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 82:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 106, 42);
         break;
      case 88:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 37, 42);
         break;
      case 101:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(14, 66, 42);
         break;
      case 103:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(14, 93, 42);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 110, 42);
         break;
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1);
      return 15;
   }
   switch(curChar)
   {
      case 114:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(15, 85, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 42;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 43:
                  if ((0x3ff000100000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 41;
                  if ((0x3000100000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 44:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  else if (curChar == 34)
                  {
                     if (kind > 121)
                        kind = 121;
                  }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(4, 7);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(25, 26);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(20);
                  break;
               case 0:
                  if (curChar == 45)
                     jjCheckNAddStates(8, 12);
                  break;
               case 1:
                  if ((0xffffdfffffffdbffL & l) != 0L)
                     jjCheckNAddStates(8, 12);
                  break;
               case 2:
                  if (curChar == 45)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 5:
               case 9:
                  if (curChar == 13)
                     jjCheckNAdd(4);
                  break;
               case 6:
                  if (curChar == 45)
                     jjCheckNAddStates(13, 16);
                  break;
               case 7:
                  if (curChar == 45 && kind > 5)
                     kind = 5;
                  break;
               case 8:
                  if (curChar == 13 && kind > 5)
                     kind = 5;
                  break;
               case 11:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 12:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if (curChar == 42)
                     jjAddStates(17, 18);
                  break;
               case 14:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(15, 13);
                  break;
               case 15:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(15, 13);
                  break;
               case 16:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 17:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if (curChar == 45)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 22:
                  if (curChar == 45)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 25:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 26:
                  if (curChar == 34 && kind > 121)
                     kind = 121;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAddStates(0, 3);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAddStates(19, 21);
                  break;
               case 30:
                  if (curChar == 46)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 33:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if (curChar == 39)
                     jjCheckNAddStates(4, 7);
                  break;
               case 36:
                  if ((0x3ff000100000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 39:
                  if ((0x3000100000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 40:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 43:
               case 36:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 44:
               case 25:
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 10:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(22, 23);
                  }
                  else if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  break;
               case 42:
               case 20:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 1:
                  jjAddStates(8, 12);
                  break;
               case 12:
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
               case 15:
                  jjCheckNAddTwoStates(15, 13);
                  break;
               case 18:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 32:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(22, 23);
                  break;
               case 38:
                  if (curChar == 72 && kind > 119)
                     kind = 119;
                  break;
               case 41:
                  if (curChar == 66 && kind > 120)
                     kind = 120;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 44:
               case 25:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(8, 12);
                  break;
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
               case 15:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(15, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 42 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   28, 29, 30, 32, 36, 37, 39, 40, 1, 2, 3, 5, 6, 7, 4, 8, 
   9, 14, 16, 29, 30, 32, 33, 34, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\56\56\56", "\56\56", "\52", "\46", 
"\72\72\75", "\133\133", "\135\135", "\74\57", "\57\76", "\173", "\175", "\74", "\76", 
"\54", "\56", "\50", "\51", "\133", "\135", "\55", "\72", "\75", "\42", "\47", "\73", 
"\100", "\174", "\41", "\136", "\101\102\123\105\116\124", 
"\101\102\123\124\122\101\103\124\55\123\131\116\124\101\130", "\101\114\114", "\101\120\120\114\111\103\101\124\111\117\116", 
"\101\125\124\117\115\101\124\111\103", "\102\105\107\111\116", "\102\111\124", 
"\102\115\120\123\164\162\151\156\147", "\102\117\117\114\105\101\116", "\102\131", 
"\103\110\101\122\101\103\124\105\122", "\103\110\117\111\103\105", "\103\114\101\123\123", 
"\103\117\115\120\117\116\105\116\124", "\103\117\115\120\117\116\105\116\124\123", 
"\103\117\116\123\124\122\101\111\116\105\104", "\103\117\116\124\101\111\116\111\116\107", "\104\105\106\101\125\114\124", 
"\104\105\106\111\116\111\124\111\117\116\123", "\105\115\102\105\104\104\105\104", "\105\116\103\117\104\105\104", 
"\105\116\104", "\105\116\125\115\105\122\101\124\105\104", "\105\130\103\105\120\124", 
"\105\130\120\114\111\103\111\124", "\105\130\120\117\122\124\123", 
"\105\130\124\105\116\123\111\102\111\114\111\124\131", "\105\130\124\105\122\116\101\114", "\106\101\114\123\105", 
"\106\122\117\115", "\107\145\156\145\162\141\154\151\172\145\144\124\151\155\145", 
"\107\145\156\145\162\141\154\123\164\162\151\156\147", "\107\162\141\160\150\151\143\123\164\162\151\156\147", 
"\111\101\65\123\164\162\151\156\147", "\111\104\105\116\124\111\106\111\105\122", 
"\111\115\120\114\111\103\111\124", "\111\115\120\114\111\105\104", "\111\115\120\117\122\124\123", 
"\111\116\103\114\125\104\105\123", "\111\116\123\124\101\116\103\105", "\111\116\124\105\107\105\122", 
"\111\116\124\105\122\123\105\103\124\111\117\116", "\111\123\117\66\64\66\123\164\162\151\156\147", "\115\101\130", 
"\115\111\116", "\115\111\116\125\123\55\111\116\106\111\116\111\124\131", "\116\125\114\114", 
"\116\165\155\145\162\151\143\123\164\162\151\156\147", "\117\102\112\105\103\124", 
"\117\142\152\145\143\164\104\145\163\143\162\151\160\164\157\162", "\117\103\124\105\124", "\117\106", "\117\120\124\111\117\116\101\114", 
"\120\101\124\124\105\122\116", "\120\104\126", "\120\114\125\123\55\111\116\106\111\116\111\124\131", 
"\120\122\105\123\105\116\124", "\120\162\151\156\164\141\142\154\145\123\164\162\151\156\147", 
"\120\122\111\126\101\124\105", "\122\105\101\114", "\122\105\114\101\124\111\126\105\55\117\111\104", 
"\123\105\121\125\105\116\103\105", "\123\105\124", "\123\111\132\105", "\123\124\122\111\116\107", 
"\123\131\116\124\101\130", "\124\66\61\123\164\162\151\156\147", "\124\101\107\123", 
"\124\145\154\145\164\145\170\123\164\162\151\156\147", "\124\122\125\105", 
"\124\131\120\105\55\111\104\105\116\124\111\106\111\105\122", "\125\116\111\117\116", "\125\116\111\121\125\105", 
"\125\116\111\126\105\122\123\101\114", "\125\156\151\166\145\162\163\141\154\123\164\162\151\156\147", 
"\125\124\103\124\151\155\145", "\125\124\106\70\123\164\162\151\156\147", 
"\126\151\144\145\157\164\145\170\123\164\162\151\156\147", "\126\151\163\151\142\154\145\123\164\162\151\156\147", "\127\111\124\110", 
null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0x7ffffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[42];
private final int[] jjstateSet = new int[84];
protected char curChar;
public ASN1ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ASN1ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 42; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
