//
// Generated by JTB 1.3.2
//

package org.openasn1.parser.generated.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * nodeToken -> &lt;BIT_TKN&gt;
 * nodeToken1 -> &lt;STRING_TKN&gt;
 * nodeOptional -> [ &lt;LEFT_BRACE_TKN&gt; NamedBitList() &lt;RIGHT_BRACE_TKN&gt; ]
 * </PRE>
 */
public class BitStringType implements Node {
   private Node parent;
   public NodeToken nodeToken;
   public NodeToken nodeToken1;
   public NodeOptional nodeOptional;

   public BitStringType(NodeToken n0, NodeToken n1, NodeOptional n2) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      nodeToken1 = n1;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      nodeOptional = n2;
      if ( nodeOptional != null ) nodeOptional.setParent(this);
   }

   public BitStringType(NodeOptional n0) {
      nodeToken = new NodeToken("BIT");
      if ( nodeToken != null ) nodeToken.setParent(this);
      nodeToken1 = new NodeToken("STRING");
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      nodeOptional = n0;
      if ( nodeOptional != null ) nodeOptional.setParent(this);
   }

   public void accept(org.openasn1.parser.generated.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(org.openasn1.parser.generated.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(org.openasn1.parser.generated.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(org.openasn1.parser.generated.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

