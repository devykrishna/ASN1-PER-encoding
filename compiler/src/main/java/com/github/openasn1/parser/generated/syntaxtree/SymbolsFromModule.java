//
// Generated by JTB 1.3.2
//

package com.github.openasn1.parser.generated.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * symbolList -> SymbolList()
 * nodeToken -> &lt;FROM_TKN&gt;
 * globalModuleReference -> GlobalModuleReference()
 * </PRE>
 */
public class SymbolsFromModule implements Node {
   private Node parent;
   public SymbolList symbolList;
   public NodeToken nodeToken;
   public GlobalModuleReference globalModuleReference;

   public SymbolsFromModule(SymbolList n0, NodeToken n1, GlobalModuleReference n2) {
      symbolList = n0;
      if ( symbolList != null ) symbolList.setParent(this);
      nodeToken = n1;
      if ( nodeToken != null ) nodeToken.setParent(this);
      globalModuleReference = n2;
      if ( globalModuleReference != null ) globalModuleReference.setParent(this);
   }

   public SymbolsFromModule(SymbolList n0, GlobalModuleReference n1) {
      symbolList = n0;
      if ( symbolList != null ) symbolList.setParent(this);
      nodeToken = new NodeToken("FROM");
      if ( nodeToken != null ) nodeToken.setParent(this);
      globalModuleReference = n1;
      if ( globalModuleReference != null ) globalModuleReference.setParent(this);
   }

   public void accept(com.github.openasn1.parser.generated.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(com.github.openasn1.parser.generated.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(com.github.openasn1.parser.generated.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(com.github.openasn1.parser.generated.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

