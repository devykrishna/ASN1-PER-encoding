//
// Generated by JTB 1.3.2
//

package com.github.openasn1.parser.generated.visitor;
import java.util.*;

import com.github.openasn1.parser.generated.syntaxtree.*;


 
 
 
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   
    
    
    
    
   public R visit(modulereference n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(valuereference n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(xmlasn1typename n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(NamedValueList n, A argu) {
      R _ret=null;
      n.namedValue.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
    
    
    
    
   public R visit(ModuleDefinition n, A argu) {
      R _ret=null;
      n.moduleIdentifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeOptional1.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.moduleBody.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ModuleIdentifier n, A argu) {
      R _ret=null;
      n.modulereference.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(DefinitiveIdentifier n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.definitiveObjIdComponentList.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(DefinitiveObjIdComponentList n, A argu) {
      R _ret=null;
      n.nodeList.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(DefinitiveObjIdComponent n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(DefinitiveNumberForm n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
   public R visit(DefinitiveNameAndNumberForm n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.definitiveNumberForm.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(TagDefault n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ExtensionDefault n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(ModuleBody n, A argu) {
      R _ret=null;
      n.nodeOptional.accept(this, argu);
      n.nodeOptional1.accept(this, argu);
      n.assignmentList.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(Exports n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(SymbolsExported n, A argu) {
      R _ret=null;
      n.symbolList.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(Imports n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(SymbolsImported n, A argu) {
      R _ret=null;
      n.symbolsFromModuleList.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(SymbolsFromModuleList n, A argu) {
      R _ret=null;
      n.nodeList.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(SymbolsFromModule n, A argu) {
      R _ret=null;
      n.symbolList.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.globalModuleReference.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(GlobalModuleReference n, A argu) {
      R _ret=null;
      n.modulereference.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(AssignedIdentifier n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(SymbolList n, A argu) {
      R _ret=null;
      n.symbol.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(Symbol n, A argu) {
      R _ret=null;
      n.reference.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(Reference n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(AssignmentList n, A argu) {
      R _ret=null;
      n.nodeList.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
   public R visit(Assignment n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(DefinedType n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(ExternalTypeReference n, A argu) {
      R _ret=null;
      n.modulereference.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(NonParameterizedTypeName n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(DefinedValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(ExternalValueReference n, A argu) {
      R _ret=null;
      n.modulereference.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.valuereference.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
   public R visit(AbsoluteReference n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.moduleIdentifier.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.itemSpec.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ItemSpec n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(ComponentId n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(TypeAssignment n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.type.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
   public R visit(ValueAssignment n, A argu) {
      R _ret=null;
      n.valuereference.accept(this, argu);
      n.type.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.value.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(XMLValueAssignment n, A argu) {
      R _ret=null;
      n.valuereference.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.xMLTypedValue.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(XMLTypedValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
   public R visit(ValueSetTypeAssignment n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.type.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.valueSet.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(ValueSet n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.elementSetSpecs.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(Type n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(NormalConstrainedType n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   public R visit(BuiltinType n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(NamedType n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.type.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(ReferencedType n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(Value n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(XMLValue n, A argu) {
      R _ret=null;
      n.xMLBuiltinValue.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   public R visit(BuiltinValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   public R visit(XMLBuiltinValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(ReferencedValue n, A argu) {
      R _ret=null;
      n.definedValue.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(NamedValue n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.value.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
   public R visit(XMLNamedValue n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.xMLValue.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.nodeToken5.accept(this, argu);
      n.nodeToken6.accept(this, argu);
      n.nodeToken7.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(BooleanValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(XMLBooleanValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(NamedNumberList n, A argu) {
      R _ret=null;
      n.namedNumber.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(NamedNumber n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(SignedNumber n, A argu) {
      R _ret=null;
      n.nodeOptional.accept(this, argu);
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(IntegerValue n, A argu) {
      R _ret=null;
      n.signedNumber.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(XMLIntegerValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
   public R visit(EnumeratedType n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.enumerations.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
   public R visit(Enumerations n, A argu) {
      R _ret=null;
      n.rootEnumeration.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeOptional1.accept(this, argu);
      n.nodeOptional2.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(RootEnumeration n, A argu) {
      R _ret=null;
      n.aSNEnumeration.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(AdditionalEnumeration n, A argu) {
      R _ret=null;
      n.aSNEnumeration.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ASNEnumeration n, A argu) {
      R _ret=null;
      n.enumerationItem.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(EnumerationItem n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(EnumeratedValue n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
   public R visit(XMLEnumeratedValue n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(RealType n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(RealValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(NumericRealValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(SpecialRealValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(XMLRealValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(XMLNumericRealValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(XMLSpecialRealValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(BitStringType n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(NamedBitList n, A argu) {
      R _ret=null;
      n.namedBit.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(NamedBit n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
    
   public R visit(BitStringValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(XMLBitStringValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(XMLIdentifierList n, A argu) {
      R _ret=null;
      n.nodeList.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(OctetStringType n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(OctetStringValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(XMLOctetStringValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(NullType n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(NullValue n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(XMLNullValue n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(SequenceType n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ExtensionAndException n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(OptionalExtensionMarker n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ComponentTypeLists n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(RootComponentTypeList n, A argu) {
      R _ret=null;
      n.componentTypeList.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ExtensionEndMarker n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ExtensionAdditions n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.extensionAdditionList.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ExtensionAdditionList n, A argu) {
      R _ret=null;
      n.extensionAddition.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ExtensionAddition n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
   public R visit(ExtensionAdditionGroup n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.componentTypeList.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(VersionNumber n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ComponentTypeList n, A argu) {
      R _ret=null;
      n.componentType.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ComponentType n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(SequenceValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ComponentValueList n, A argu) {
      R _ret=null;
      n.namedValue.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(XMLSequenceValue n, A argu) {
      R _ret=null;
      n.xMLComponentValueList.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(XMLComponentValueList n, A argu) {
      R _ret=null;
      n.nodeList.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(SequenceOfType n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.typeOrNamedType.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(SequenceOfValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ValueList n, A argu) {
      R _ret=null;
      n.value.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(XMLSequenceOfValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(XMLValueList n, A argu) {
      R _ret=null;
      n.nodeList.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
   public R visit(XMLValueOrEmpty n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nonParameterizedTypeName.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(XMLSpaceSeparatedList n, A argu) {
      R _ret=null;
      n.nodeList.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(XMLDelimitedItemList n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(XMLDelimitedItem n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(SetType n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(SetValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(XMLSetValue n, A argu) {
      R _ret=null;
      n.xMLComponentValueList.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(SetOfType n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.typeOrNamedType.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(SetOfValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(XMLSetOfValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
   public R visit(ChoiceType n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.alternativeTypeLists.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(AlternativeTypeLists n, A argu) {
      R _ret=null;
      n.rootAlternativeTypeList.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(RootAlternativeTypeList n, A argu) {
      R _ret=null;
      n.alternativeTypeList.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ExtensionAdditionAlternatives n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.extensionAdditionAlternativesList.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ExtensionAdditionAlternativesList n, A argu) {
      R _ret=null;
      n.extensionAdditionAlternative.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ExtensionAdditionAlternative n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
   public R visit(ExtensionAdditionAlternativesGroup n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.alternativeTypeList.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(AlternativeTypeList n, A argu) {
      R _ret=null;
      n.namedType.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(ChoiceValue n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.value.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
   public R visit(XMLChoiceValue n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.xMLValue.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.nodeToken5.accept(this, argu);
      n.nodeToken6.accept(this, argu);
      n.nodeToken7.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(SelectionType n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.type.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(TaggedType n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
   public R visit(Tag n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.classNumber.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ClassNumber n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(TagClass n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(EmbeddedPDVType n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(EmbeddedPDVValue n, A argu) {
      R _ret=null;
      n.sequenceValue.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(XMLEmbeddedPDVValue n, A argu) {
      R _ret=null;
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(ExternalType n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(ExternalValue n, A argu) {
      R _ret=null;
      n.sequenceValue.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(XMLExternalValue n, A argu) {
      R _ret=null;
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ObjectIdentifierType n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(ObjectIdentifierValue n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.objIdComponentsList.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(ObjIdComponentsList n, A argu) {
      R _ret=null;
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(ObjIdComponents n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(NameForm n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(NumberForm n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
   public R visit(NameAndNumberForm n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.numberForm.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(XMLObjectIdentifierValue n, A argu) {
      R _ret=null;
      n.xMLObjIdComponentList.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(XMLObjIdComponentList n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(XMLObjIdComponent n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(XMLNumberForm n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
    
    
    
   public R visit(XMLNameAndNumberForm n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.xMLNumberForm.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.nodeToken5.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(RelativeOIDType n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(RelativeOIDValue n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.relativeOIDComponentsList.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(RelativeOIDComponentsList n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(RelativeOIDComponents n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(XMLRelativeOIDValue n, A argu) {
      R _ret=null;
      n.xMLRelativeOIDComponentList.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(XMLRelativeOIDComponentList n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(XMLRelativeOIDComponent n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(CharacterStringType n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   public R visit(RestrictedCharacterStringType n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
   public R visit(RestrictedCharacterStringValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(CharacterStringList n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.charSyms.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(CharSyms n, A argu) {
      R _ret=null;
      n.charsDefn.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
   public R visit(CharsDefn n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
   public R visit(Quadruple n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.group.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.plane.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.row.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.cell.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(Group n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(Plane n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(Row n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(Cell n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
    
   public R visit(Tuple n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.tableColumn.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.tableRow.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(TableColumn n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(TableRow n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(XMLRestrictedCharacterStringValue n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(UnrestrictedCharacterStringType n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(CharacterStringValue n, A argu) {
      R _ret=null;
      n.restrictedCharacterStringValue.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(XMLCharacterStringValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(UnrestrictedCharacterStringValue n, A argu) {
      R _ret=null;
      n.sequenceValue.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(XMLUnrestrictedCharacterStringValue n, A argu) {
      R _ret=null;
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(UsefulType n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
   public R visit(TypeWithConstraint n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(TypeOrNamedType n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
   public R visit(Constraint n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.constraintSpec.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(ConstraintSpec n, A argu) {
      R _ret=null;
      n.subtypeConstraint.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ExceptionSpec n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.exceptionIdentification.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(ExceptionIdentification n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(SubtypeConstraint n, A argu) {
      R _ret=null;
      n.elementSetSpecs.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ElementSetSpecs n, A argu) {
      R _ret=null;
      n.rootElementSetSpec.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(RootElementSetSpec n, A argu) {
      R _ret=null;
      n.elementSetSpec.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(AdditionalElementSetSpec n, A argu) {
      R _ret=null;
      n.elementSetSpec.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ElementSetSpec n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(Unions n, A argu) {
      R _ret=null;
      n.intersections.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(Intersections n, A argu) {
      R _ret=null;
      n.intersectionElements.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(IntersectionElements n, A argu) {
      R _ret=null;
      n.elements.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(Elems n, A argu) {
      R _ret=null;
      n.elements.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(Exclusions n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.elements.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(UnionMark n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(IntersectionMark n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(Elements n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
    
    
    
    
   public R visit(SubtypeElements n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(PatternConstraint n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.value.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(SingleValue n, A argu) {
      R _ret=null;
      n.value.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ContainedSubtype n, A argu) {
      R _ret=null;
      n.nodeOptional.accept(this, argu);
      n.type.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(Includes n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(ValueRange n, A argu) {
      R _ret=null;
      n.lowerEndpoint.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.upperEndpoint.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(LowerEndpoint n, A argu) {
      R _ret=null;
      n.lowerEndValue.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(UpperEndpoint n, A argu) {
      R _ret=null;
      n.nodeOptional.accept(this, argu);
      n.upperEndValue.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(LowerEndValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(UpperEndValue n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(SizeConstraint n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.constraint.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(PermittedAlphabet n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.constraint.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(TypeConstraint n, A argu) {
      R _ret=null;
      n.type.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(InnerTypeConstraints n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(SingleTypeConstraint n, A argu) {
      R _ret=null;
      n.constraint.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(MultipleTypeConstraints n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(FullSpecification n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.typeConstraints.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
    
    
   public R visit(PartialSpecification n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.typeConstraints.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(TypeConstraints n, A argu) {
      R _ret=null;
      n.namedConstraint.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(NamedConstraint n, A argu) {
      R _ret=null;
      n.nodeToken.accept(this, argu);
      n.componentConstraint.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
   public R visit(ComponentConstraint n, A argu) {
      R _ret=null;
      n.nodeOptional.accept(this, argu);
      n.nodeOptional1.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
   public R visit(ValueConstraint n, A argu) {
      R _ret=null;
      n.constraint.accept(this, argu);
      return _ret;
   }

   
    
    
    
    
    
    
   public R visit(PresenceConstraint n, A argu) {
      R _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

}
