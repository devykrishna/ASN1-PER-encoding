//
// Generated by JTB 1.3.2
//

package com.github.openasn1.parser.generated.syntaxtree;


 
 
 
 
 
 
 
 
 
public class Tuple implements Node {
   private Node parent;
   public NodeToken nodeToken;
   public TableColumn tableColumn;
   public NodeToken nodeToken1;
   public TableRow tableRow;
   public NodeToken nodeToken2;

   public Tuple(NodeToken n0, TableColumn n1, NodeToken n2, TableRow n3, NodeToken n4) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      tableColumn = n1;
      if ( tableColumn != null ) tableColumn.setParent(this);
      nodeToken1 = n2;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      tableRow = n3;
      if ( tableRow != null ) tableRow.setParent(this);
      nodeToken2 = n4;
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
   }

   public Tuple(TableColumn n0, TableRow n1) {
      nodeToken = new NodeToken("{");
      if ( nodeToken != null ) nodeToken.setParent(this);
      tableColumn = n0;
      if ( tableColumn != null ) tableColumn.setParent(this);
      nodeToken1 = new NodeToken(",");
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      tableRow = n1;
      if ( tableRow != null ) tableRow.setParent(this);
      nodeToken2 = new NodeToken("}");
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
   }

   public void accept(com.github.openasn1.parser.generated.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(com.github.openasn1.parser.generated.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(com.github.openasn1.parser.generated.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(com.github.openasn1.parser.generated.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

