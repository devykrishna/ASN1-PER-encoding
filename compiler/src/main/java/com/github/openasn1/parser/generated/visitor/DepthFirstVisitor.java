//
// Generated by JTB 1.3.2
//

package com.github.openasn1.parser.generated.visitor;
import java.util.*;

import com.github.openasn1.parser.generated.syntaxtree.*;


 
 
 
public class DepthFirstVisitor implements Visitor {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeListOptional n) {
      if ( n.present() )
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
   }

   public void visit(NodeOptional n) {
      if ( n.present() )
         n.node.accept(this);
   }

   public void visit(NodeSequence n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeToken n) { }

   //
   // User-generated visitor methods below
   //

   
    
    
    
    
   public void visit(modulereference n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
   public void visit(valuereference n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
   public void visit(xmlasn1typename n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
    
   public void visit(NamedValueList n) {
      n.namedValue.accept(this);
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
    
    
    
    
    
    
    
   public void visit(ModuleDefinition n) {
      n.moduleIdentifier.accept(this);
      n.nodeToken.accept(this);
      n.nodeOptional.accept(this);
      n.nodeOptional1.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.moduleBody.accept(this);
      n.nodeToken3.accept(this);
   }

   
    
    
    
    
    
   public void visit(ModuleIdentifier n) {
      n.modulereference.accept(this);
      n.nodeOptional.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(DefinitiveIdentifier n) {
      n.nodeToken.accept(this);
      n.definitiveObjIdComponentList.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
   public void visit(DefinitiveObjIdComponentList n) {
      n.nodeList.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(DefinitiveObjIdComponent n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
   public void visit(DefinitiveNumberForm n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
    
    
    
   public void visit(DefinitiveNameAndNumberForm n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.definitiveNumberForm.accept(this);
      n.nodeToken2.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(TagDefault n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(ExtensionDefault n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(ModuleBody n) {
      n.nodeOptional.accept(this);
      n.nodeOptional1.accept(this);
      n.assignmentList.accept(this);
   }

   
    
    
    
    
    
   public void visit(Exports n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
   public void visit(SymbolsExported n) {
      n.symbolList.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(Imports n) {
      n.nodeToken.accept(this);
      n.nodeOptional.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
   public void visit(SymbolsImported n) {
      n.symbolsFromModuleList.accept(this);
   }

   
    
    
    
    
   public void visit(SymbolsFromModuleList n) {
      n.nodeList.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(SymbolsFromModule n) {
      n.symbolList.accept(this);
      n.nodeToken.accept(this);
      n.globalModuleReference.accept(this);
   }

   
    
    
    
    
    
   public void visit(GlobalModuleReference n) {
      n.modulereference.accept(this);
      n.nodeOptional.accept(this);
   }

   
    
    
    
    
    
   public void visit(AssignedIdentifier n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(SymbolList n) {
      n.symbol.accept(this);
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
   public void visit(Symbol n) {
      n.reference.accept(this);
   }

   
    
    
    
    
    
   public void visit(Reference n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
   public void visit(AssignmentList n) {
      n.nodeList.accept(this);
   }

   
    
    
    
    
    
    
    
   public void visit(Assignment n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(DefinedType n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(ExternalTypeReference n) {
      n.modulereference.accept(this);
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(NonParameterizedTypeName n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(DefinedValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(ExternalValueReference n) {
      n.modulereference.accept(this);
      n.nodeToken.accept(this);
      n.valuereference.accept(this);
   }

   
    
    
    
    
    
    
    
   public void visit(AbsoluteReference n) {
      n.nodeToken.accept(this);
      n.moduleIdentifier.accept(this);
      n.nodeToken1.accept(this);
      n.itemSpec.accept(this);
   }

   
    
    
    
    
    
   public void visit(ItemSpec n) {
      n.nodeToken.accept(this);
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(ComponentId n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(TypeAssignment n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.type.accept(this);
   }

   
    
    
    
    
    
    
    
   public void visit(ValueAssignment n) {
      n.valuereference.accept(this);
      n.type.accept(this);
      n.nodeToken.accept(this);
      n.value.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(XMLValueAssignment n) {
      n.valuereference.accept(this);
      n.nodeToken.accept(this);
      n.xMLTypedValue.accept(this);
   }

   
    
    
    
    
    
   public void visit(XMLTypedValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
    
   public void visit(ValueSetTypeAssignment n) {
      n.nodeToken.accept(this);
      n.type.accept(this);
      n.nodeToken1.accept(this);
      n.valueSet.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(ValueSet n) {
      n.nodeToken.accept(this);
      n.elementSetSpecs.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
    
   public void visit(Type n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(NormalConstrainedType n) {
      n.nodeChoice.accept(this);
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   public void visit(BuiltinType n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(NamedType n) {
      n.nodeToken.accept(this);
      n.type.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(ReferencedType n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(Value n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
   public void visit(XMLValue n) {
      n.xMLBuiltinValue.accept(this);
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   public void visit(BuiltinValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   public void visit(XMLBuiltinValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
   public void visit(ReferencedValue n) {
      n.definedValue.accept(this);
   }

   
    
    
    
    
    
   public void visit(NamedValue n) {
      n.nodeToken.accept(this);
      n.value.accept(this);
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
   public void visit(XMLNamedValue n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.nodeToken3.accept(this);
      n.xMLValue.accept(this);
      n.nodeToken4.accept(this);
      n.nodeToken5.accept(this);
      n.nodeToken6.accept(this);
      n.nodeToken7.accept(this);
   }

   
    
    
    
    
   public void visit(BooleanType n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
    
   public void visit(BooleanValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(XMLBooleanValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(IntegerType n) {
      n.nodeToken.accept(this);
      n.nodeOptional.accept(this);
   }

   
    
    
    
    
    
   public void visit(NamedNumberList n) {
      n.namedNumber.accept(this);
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
    
   public void visit(NamedNumber n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(SignedNumber n) {
      n.nodeOptional.accept(this);
      n.nodeToken.accept(this);
   }

   
    
    
    
    
   public void visit(IntegerValue n) {
      n.signedNumber.accept(this);
   }

   
    
    
    
    
    
   public void visit(XMLIntegerValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
    
   public void visit(EnumeratedType n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.enumerations.accept(this);
      n.nodeToken2.accept(this);
   }

   
    
    
    
    
    
    
    
   public void visit(Enumerations n) {
      n.rootEnumeration.accept(this);
      n.nodeOptional.accept(this);
      n.nodeOptional1.accept(this);
      n.nodeOptional2.accept(this);
   }

   
    
    
    
    
   public void visit(RootEnumeration n) {
      n.aSNEnumeration.accept(this);
   }

   
    
    
    
    
   public void visit(AdditionalEnumeration n) {
      n.aSNEnumeration.accept(this);
   }

   
    
    
    
    
    
   public void visit(ASNEnumeration n) {
      n.enumerationItem.accept(this);
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
    
   public void visit(EnumerationItem n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
   public void visit(EnumeratedValue n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
    
    
    
   public void visit(XMLEnumeratedValue n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.nodeToken3.accept(this);
   }

   
    
    
    
    
   public void visit(RealType n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
    
   public void visit(RealValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(NumericRealValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(SpecialRealValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(XMLRealValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(XMLNumericRealValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(XMLSpecialRealValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(BitStringType n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeOptional.accept(this);
   }

   
    
    
    
    
    
   public void visit(NamedBitList n) {
      n.namedBit.accept(this);
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
    
   public void visit(NamedBit n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
    
    
   public void visit(BitStringValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(IdentifierList n) {
      n.nodeToken.accept(this);
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(XMLBitStringValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
   public void visit(XMLIdentifierList n) {
      n.nodeList.accept(this);
   }

   
    
    
    
    
    
   public void visit(OctetStringType n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(OctetStringValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(XMLOctetStringValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
   public void visit(NullType n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
   public void visit(NullValue n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
   public void visit(XMLNullValue n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(SequenceType n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(ExtensionAndException n) {
      n.nodeToken.accept(this);
      n.nodeOptional.accept(this);
   }

   
    
    
    
    
    
   public void visit(OptionalExtensionMarker n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
    
   public void visit(ComponentTypeLists n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
   public void visit(RootComponentTypeList n) {
      n.componentTypeList.accept(this);
   }

   
    
    
    
    
    
   public void visit(ExtensionEndMarker n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
    
   public void visit(ExtensionAdditions n) {
      n.nodeToken.accept(this);
      n.extensionAdditionList.accept(this);
   }

   
    
    
    
    
    
   public void visit(ExtensionAdditionList n) {
      n.extensionAddition.accept(this);
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
    
   public void visit(ExtensionAddition n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
    
   public void visit(ExtensionAdditionGroup n) {
      n.nodeToken.accept(this);
      n.nodeOptional.accept(this);
      n.componentTypeList.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
    
   public void visit(VersionNumber n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
    
   public void visit(ComponentTypeList n) {
      n.componentType.accept(this);
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
    
   public void visit(ComponentType n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(SequenceValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(ComponentValueList n) {
      n.namedValue.accept(this);
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
   public void visit(XMLSequenceValue n) {
      n.xMLComponentValueList.accept(this);
   }

   
    
    
    
    
   public void visit(XMLComponentValueList n) {
      n.nodeList.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(SequenceOfType n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.typeOrNamedType.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(SequenceOfValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(ValueList n) {
      n.value.accept(this);
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(XMLSequenceOfValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
   public void visit(XMLValueList n) {
      n.nodeList.accept(this);
   }

   
    
    
    
    
    
    
    
   public void visit(XMLValueOrEmpty n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nonParameterizedTypeName.accept(this);
      n.nodeToken2.accept(this);
   }

   
    
    
    
    
   public void visit(XMLSpaceSeparatedList n) {
      n.nodeList.accept(this);
   }

   
    
    
    
    
    
   public void visit(XMLDelimitedItemList n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(XMLDelimitedItem n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(SetType n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(SetValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
   public void visit(XMLSetValue n) {
      n.xMLComponentValueList.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(SetOfType n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.typeOrNamedType.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(SetOfValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(XMLSetOfValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
    
   public void visit(ChoiceType n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.alternativeTypeLists.accept(this);
      n.nodeToken2.accept(this);
   }

   
    
    
    
    
    
   public void visit(AlternativeTypeLists n) {
      n.rootAlternativeTypeList.accept(this);
      n.nodeOptional.accept(this);
   }

   
    
    
    
    
   public void visit(RootAlternativeTypeList n) {
      n.alternativeTypeList.accept(this);
   }

   
    
    
    
    
    
   public void visit(ExtensionAdditionAlternatives n) {
      n.nodeToken.accept(this);
      n.extensionAdditionAlternativesList.accept(this);
   }

   
    
    
    
    
    
   public void visit(ExtensionAdditionAlternativesList n) {
      n.extensionAdditionAlternative.accept(this);
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
    
   public void visit(ExtensionAdditionAlternative n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
    
   public void visit(ExtensionAdditionAlternativesGroup n) {
      n.nodeToken.accept(this);
      n.nodeOptional.accept(this);
      n.alternativeTypeList.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
    
   public void visit(AlternativeTypeList n) {
      n.namedType.accept(this);
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(ChoiceValue n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.value.accept(this);
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
   public void visit(XMLChoiceValue n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.nodeToken3.accept(this);
      n.xMLValue.accept(this);
      n.nodeToken4.accept(this);
      n.nodeToken5.accept(this);
      n.nodeToken6.accept(this);
      n.nodeToken7.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(SelectionType n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.type.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(TaggedType n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
    
   public void visit(Tag n) {
      n.nodeToken.accept(this);
      n.nodeOptional.accept(this);
      n.classNumber.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
    
   public void visit(ClassNumber n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(TagClass n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(EmbeddedPDVType n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
   public void visit(EmbeddedPDVValue n) {
      n.sequenceValue.accept(this);
   }

   
    
    
    
    
   public void visit(XMLEmbeddedPDVValue n) {
      n.nodeOptional.accept(this);
   }

   
    
    
    
    
   public void visit(ExternalType n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
   public void visit(ExternalValue n) {
      n.sequenceValue.accept(this);
   }

   
    
    
    
    
   public void visit(XMLExternalValue n) {
      n.nodeOptional.accept(this);
   }

   
    
    
    
    
    
   public void visit(ObjectIdentifierType n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(ObjectIdentifierValue n) {
      n.nodeToken.accept(this);
      n.objIdComponentsList.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
   public void visit(ObjIdComponentsList n) {
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(ObjIdComponents n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
   public void visit(NameForm n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
    
   public void visit(NumberForm n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
    
   public void visit(NameAndNumberForm n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.numberForm.accept(this);
      n.nodeToken2.accept(this);
   }

   
    
    
    
    
   public void visit(XMLObjectIdentifierValue n) {
      n.xMLObjIdComponentList.accept(this);
   }

   
    
    
    
    
    
   public void visit(XMLObjIdComponentList n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(XMLObjIdComponent n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
   public void visit(XMLNumberForm n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
    
    
    
    
    
    
   public void visit(XMLNameAndNumberForm n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.nodeToken3.accept(this);
      n.xMLNumberForm.accept(this);
      n.nodeToken4.accept(this);
      n.nodeToken5.accept(this);
   }

   
    
    
    
    
   public void visit(RelativeOIDType n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(RelativeOIDValue n) {
      n.nodeToken.accept(this);
      n.relativeOIDComponentsList.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
    
   public void visit(RelativeOIDComponentsList n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(RelativeOIDComponents n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
   public void visit(XMLRelativeOIDValue n) {
      n.xMLRelativeOIDComponentList.accept(this);
   }

   
    
    
    
    
    
   public void visit(XMLRelativeOIDComponentList n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(XMLRelativeOIDComponent n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(CharacterStringType n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   public void visit(RestrictedCharacterStringType n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
    
   public void visit(RestrictedCharacterStringValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(CharacterStringList n) {
      n.nodeToken.accept(this);
      n.charSyms.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
    
   public void visit(CharSyms n) {
      n.charsDefn.accept(this);
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
    
    
    
   public void visit(CharsDefn n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
   public void visit(Quadruple n) {
      n.nodeToken.accept(this);
      n.group.accept(this);
      n.nodeToken1.accept(this);
      n.plane.accept(this);
      n.nodeToken2.accept(this);
      n.row.accept(this);
      n.nodeToken3.accept(this);
      n.cell.accept(this);
      n.nodeToken4.accept(this);
   }

   
    
    
    
    
   public void visit(Group n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
   public void visit(Plane n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
   public void visit(Row n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
   public void visit(Cell n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
    
    
    
    
   public void visit(Tuple n) {
      n.nodeToken.accept(this);
      n.tableColumn.accept(this);
      n.nodeToken1.accept(this);
      n.tableRow.accept(this);
      n.nodeToken2.accept(this);
   }

   
    
    
    
    
   public void visit(TableColumn n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
   public void visit(TableRow n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
   public void visit(XMLRestrictedCharacterStringValue n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
    
   public void visit(UnrestrictedCharacterStringType n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
   public void visit(CharacterStringValue n) {
      n.restrictedCharacterStringValue.accept(this);
   }

   
    
    
    
    
    
   public void visit(XMLCharacterStringValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
   public void visit(UnrestrictedCharacterStringValue n) {
      n.sequenceValue.accept(this);
   }

   
    
    
    
    
   public void visit(XMLUnrestrictedCharacterStringValue n) {
      n.nodeOptional.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(UsefulType n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
    
   public void visit(TypeWithConstraint n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(TypeOrNamedType n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
    
   public void visit(Constraint n) {
      n.nodeToken.accept(this);
      n.constraintSpec.accept(this);
      n.nodeOptional.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
   public void visit(ConstraintSpec n) {
      n.subtypeConstraint.accept(this);
   }

   
    
    
    
    
    
   public void visit(ExceptionSpec n) {
      n.nodeToken.accept(this);
      n.exceptionIdentification.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(ExceptionIdentification n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
   public void visit(SubtypeConstraint n) {
      n.elementSetSpecs.accept(this);
   }

   
    
    
    
    
    
   public void visit(ElementSetSpecs n) {
      n.rootElementSetSpec.accept(this);
      n.nodeOptional.accept(this);
   }

   
    
    
    
    
   public void visit(RootElementSetSpec n) {
      n.elementSetSpec.accept(this);
   }

   
    
    
    
    
   public void visit(AdditionalElementSetSpec n) {
      n.elementSetSpec.accept(this);
   }

   
    
    
    
    
    
   public void visit(ElementSetSpec n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(Unions n) {
      n.intersections.accept(this);
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
    
   public void visit(Intersections n) {
      n.intersectionElements.accept(this);
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
    
   public void visit(IntersectionElements n) {
      n.elements.accept(this);
      n.nodeOptional.accept(this);
   }

   
    
    
    
    
   public void visit(Elems n) {
      n.elements.accept(this);
   }

   
    
    
    
    
    
   public void visit(Exclusions n) {
      n.nodeToken.accept(this);
      n.elements.accept(this);
   }

   
    
    
    
    
    
   public void visit(UnionMark n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(IntersectionMark n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(Elements n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
    
    
    
    
    
   public void visit(SubtypeElements n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(PatternConstraint n) {
      n.nodeToken.accept(this);
      n.value.accept(this);
   }

   
    
    
    
    
   public void visit(SingleValue n) {
      n.value.accept(this);
   }

   
    
    
    
    
    
   public void visit(ContainedSubtype n) {
      n.nodeOptional.accept(this);
      n.type.accept(this);
   }

   
    
    
    
    
   public void visit(Includes n) {
      n.nodeToken.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(ValueRange n) {
      n.lowerEndpoint.accept(this);
      n.nodeToken.accept(this);
      n.upperEndpoint.accept(this);
   }

   
    
    
    
    
    
   public void visit(LowerEndpoint n) {
      n.lowerEndValue.accept(this);
      n.nodeOptional.accept(this);
   }

   
    
    
    
    
    
   public void visit(UpperEndpoint n) {
      n.nodeOptional.accept(this);
      n.upperEndValue.accept(this);
   }

   
    
    
    
    
    
   public void visit(LowerEndValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(UpperEndValue n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
   public void visit(SizeConstraint n) {
      n.nodeToken.accept(this);
      n.constraint.accept(this);
   }

   
    
    
    
    
    
   public void visit(PermittedAlphabet n) {
      n.nodeToken.accept(this);
      n.constraint.accept(this);
   }

   
    
    
    
    
   public void visit(TypeConstraint n) {
      n.type.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(InnerTypeConstraints n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
   public void visit(SingleTypeConstraint n) {
      n.constraint.accept(this);
   }

   
    
    
    
    
    
   public void visit(MultipleTypeConstraints n) {
      n.nodeChoice.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(FullSpecification n) {
      n.nodeToken.accept(this);
      n.typeConstraints.accept(this);
      n.nodeToken1.accept(this);
   }

   
    
    
    
    
    
    
    
    
   public void visit(PartialSpecification n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.typeConstraints.accept(this);
      n.nodeToken3.accept(this);
   }

   
    
    
    
    
    
   public void visit(TypeConstraints n) {
      n.namedConstraint.accept(this);
      n.nodeListOptional.accept(this);
   }

   
    
    
    
    
    
   public void visit(NamedConstraint n) {
      n.nodeToken.accept(this);
      n.componentConstraint.accept(this);
   }

   
    
    
    
    
    
   public void visit(ComponentConstraint n) {
      n.nodeOptional.accept(this);
      n.nodeOptional1.accept(this);
   }

   
    
    
    
    
   public void visit(ValueConstraint n) {
      n.constraint.accept(this);
   }

   
    
    
    
    
    
    
   public void visit(PresenceConstraint n) {
      n.nodeChoice.accept(this);
   }

}
