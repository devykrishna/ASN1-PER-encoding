//
// Generated by JTB 1.3.2
//

package com.github.openasn1.parser.generated.visitor;
import java.util.*;

import com.github.openasn1.parser.generated.syntaxtree.*;


 
 
 
public class GJVoidDepthFirst<A> implements GJVoidVisitor<A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
      }
   }

   public void visit(NodeOptional n, A argu) {
      if ( n.present() )
         n.node.accept(this,argu);
   }

   public void visit(NodeSequence n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeToken n, A argu) {}

   //
   // User-generated visitor methods below
   //

   
    
    
    
    
   public void visit(modulereference n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
   public void visit(valuereference n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
   public void visit(xmlasn1typename n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(NamedValueList n, A argu) {
      n.namedValue.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
    
    
    
    
    
    
    
   public void visit(ModuleDefinition n, A argu) {
      n.moduleIdentifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeOptional1.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.moduleBody.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ModuleIdentifier n, A argu) {
      n.modulereference.accept(this, argu);
      n.nodeOptional.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(DefinitiveIdentifier n, A argu) {
      n.nodeToken.accept(this, argu);
      n.definitiveObjIdComponentList.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
   public void visit(DefinitiveObjIdComponentList n, A argu) {
      n.nodeList.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(DefinitiveObjIdComponent n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
   public void visit(DefinitiveNumberForm n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
    
    
    
   public void visit(DefinitiveNameAndNumberForm n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.definitiveNumberForm.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(TagDefault n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ExtensionDefault n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(ModuleBody n, A argu) {
      n.nodeOptional.accept(this, argu);
      n.nodeOptional1.accept(this, argu);
      n.assignmentList.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(Exports n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
   public void visit(SymbolsExported n, A argu) {
      n.symbolList.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(Imports n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
   public void visit(SymbolsImported n, A argu) {
      n.symbolsFromModuleList.accept(this, argu);
   }

   
    
    
    
    
   public void visit(SymbolsFromModuleList n, A argu) {
      n.nodeList.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(SymbolsFromModule n, A argu) {
      n.symbolList.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.globalModuleReference.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(GlobalModuleReference n, A argu) {
      n.modulereference.accept(this, argu);
      n.nodeOptional.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(AssignedIdentifier n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(SymbolList n, A argu) {
      n.symbol.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
   public void visit(Symbol n, A argu) {
      n.reference.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(Reference n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
   public void visit(AssignmentList n, A argu) {
      n.nodeList.accept(this, argu);
   }

   
    
    
    
    
    
    
    
   public void visit(Assignment n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(DefinedType n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(ExternalTypeReference n, A argu) {
      n.modulereference.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(NonParameterizedTypeName n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(DefinedValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(ExternalValueReference n, A argu) {
      n.modulereference.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.valuereference.accept(this, argu);
   }

   
    
    
    
    
    
    
    
   public void visit(AbsoluteReference n, A argu) {
      n.nodeToken.accept(this, argu);
      n.moduleIdentifier.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.itemSpec.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ItemSpec n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(ComponentId n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(TypeAssignment n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.type.accept(this, argu);
   }

   
    
    
    
    
    
    
    
   public void visit(ValueAssignment n, A argu) {
      n.valuereference.accept(this, argu);
      n.type.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.value.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(XMLValueAssignment n, A argu) {
      n.valuereference.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.xMLTypedValue.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(XMLTypedValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
    
   public void visit(ValueSetTypeAssignment n, A argu) {
      n.nodeToken.accept(this, argu);
      n.type.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.valueSet.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(ValueSet n, A argu) {
      n.nodeToken.accept(this, argu);
      n.elementSetSpecs.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(Type n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(NormalConstrainedType n, A argu) {
      n.nodeChoice.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   public void visit(BuiltinType n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(NamedType n, A argu) {
      n.nodeToken.accept(this, argu);
      n.type.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(ReferencedType n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(Value n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
   public void visit(XMLValue n, A argu) {
      n.xMLBuiltinValue.accept(this, argu);
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   public void visit(BuiltinValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   public void visit(XMLBuiltinValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
   public void visit(ReferencedValue n, A argu) {
      n.definedValue.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(NamedValue n, A argu) {
      n.nodeToken.accept(this, argu);
      n.value.accept(this, argu);
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
   public void visit(XMLNamedValue n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.xMLValue.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.nodeToken5.accept(this, argu);
      n.nodeToken6.accept(this, argu);
      n.nodeToken7.accept(this, argu);
   }

   
    
    
    
    
   public void visit(BooleanType n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(BooleanValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(XMLBooleanValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(IntegerType n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(NamedNumberList n, A argu) {
      n.namedNumber.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(NamedNumber n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(SignedNumber n, A argu) {
      n.nodeOptional.accept(this, argu);
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
   public void visit(IntegerValue n, A argu) {
      n.signedNumber.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(XMLIntegerValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
    
   public void visit(EnumeratedType n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.enumerations.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   
    
    
    
    
    
    
    
   public void visit(Enumerations n, A argu) {
      n.rootEnumeration.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeOptional1.accept(this, argu);
      n.nodeOptional2.accept(this, argu);
   }

   
    
    
    
    
   public void visit(RootEnumeration n, A argu) {
      n.aSNEnumeration.accept(this, argu);
   }

   
    
    
    
    
   public void visit(AdditionalEnumeration n, A argu) {
      n.aSNEnumeration.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ASNEnumeration n, A argu) {
      n.enumerationItem.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(EnumerationItem n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
   public void visit(EnumeratedValue n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
    
    
    
   public void visit(XMLEnumeratedValue n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   
    
    
    
    
   public void visit(RealType n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(RealValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(NumericRealValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(SpecialRealValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(XMLRealValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(XMLNumericRealValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(XMLSpecialRealValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(BitStringType n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeOptional.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(NamedBitList n, A argu) {
      n.namedBit.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(NamedBit n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
    
    
   public void visit(BitStringValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(IdentifierList n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(XMLBitStringValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
   public void visit(XMLIdentifierList n, A argu) {
      n.nodeList.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(OctetStringType n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(OctetStringValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(XMLOctetStringValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
   public void visit(NullType n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
   public void visit(NullValue n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
   public void visit(XMLNullValue n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(SequenceType n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ExtensionAndException n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(OptionalExtensionMarker n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ComponentTypeLists n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
   public void visit(RootComponentTypeList n, A argu) {
      n.componentTypeList.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ExtensionEndMarker n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ExtensionAdditions n, A argu) {
      n.nodeToken.accept(this, argu);
      n.extensionAdditionList.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ExtensionAdditionList n, A argu) {
      n.extensionAddition.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ExtensionAddition n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
    
   public void visit(ExtensionAdditionGroup n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.componentTypeList.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(VersionNumber n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ComponentTypeList n, A argu) {
      n.componentType.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ComponentType n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(SequenceValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ComponentValueList n, A argu) {
      n.namedValue.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
   public void visit(XMLSequenceValue n, A argu) {
      n.xMLComponentValueList.accept(this, argu);
   }

   
    
    
    
    
   public void visit(XMLComponentValueList n, A argu) {
      n.nodeList.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(SequenceOfType n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.typeOrNamedType.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(SequenceOfValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ValueList n, A argu) {
      n.value.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(XMLSequenceOfValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
   public void visit(XMLValueList n, A argu) {
      n.nodeList.accept(this, argu);
   }

   
    
    
    
    
    
    
    
   public void visit(XMLValueOrEmpty n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nonParameterizedTypeName.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   
    
    
    
    
   public void visit(XMLSpaceSeparatedList n, A argu) {
      n.nodeList.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(XMLDelimitedItemList n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(XMLDelimitedItem n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(SetType n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(SetValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
   public void visit(XMLSetValue n, A argu) {
      n.xMLComponentValueList.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(SetOfType n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.typeOrNamedType.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(SetOfValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(XMLSetOfValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
    
   public void visit(ChoiceType n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.alternativeTypeLists.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(AlternativeTypeLists n, A argu) {
      n.rootAlternativeTypeList.accept(this, argu);
      n.nodeOptional.accept(this, argu);
   }

   
    
    
    
    
   public void visit(RootAlternativeTypeList n, A argu) {
      n.alternativeTypeList.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ExtensionAdditionAlternatives n, A argu) {
      n.nodeToken.accept(this, argu);
      n.extensionAdditionAlternativesList.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ExtensionAdditionAlternativesList n, A argu) {
      n.extensionAdditionAlternative.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ExtensionAdditionAlternative n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
    
   public void visit(ExtensionAdditionAlternativesGroup n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.alternativeTypeList.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(AlternativeTypeList n, A argu) {
      n.namedType.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(ChoiceValue n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.value.accept(this, argu);
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
   public void visit(XMLChoiceValue n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.xMLValue.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.nodeToken5.accept(this, argu);
      n.nodeToken6.accept(this, argu);
      n.nodeToken7.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(SelectionType n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.type.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(TaggedType n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
    
   public void visit(Tag n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.classNumber.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ClassNumber n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(TagClass n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(EmbeddedPDVType n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
   public void visit(EmbeddedPDVValue n, A argu) {
      n.sequenceValue.accept(this, argu);
   }

   
    
    
    
    
   public void visit(XMLEmbeddedPDVValue n, A argu) {
      n.nodeOptional.accept(this, argu);
   }

   
    
    
    
    
   public void visit(ExternalType n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
   public void visit(ExternalValue n, A argu) {
      n.sequenceValue.accept(this, argu);
   }

   
    
    
    
    
   public void visit(XMLExternalValue n, A argu) {
      n.nodeOptional.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ObjectIdentifierType n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(ObjectIdentifierValue n, A argu) {
      n.nodeToken.accept(this, argu);
      n.objIdComponentsList.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
   public void visit(ObjIdComponentsList n, A argu) {
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(ObjIdComponents n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
   public void visit(NameForm n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(NumberForm n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
    
   public void visit(NameAndNumberForm n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.numberForm.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   
    
    
    
    
   public void visit(XMLObjectIdentifierValue n, A argu) {
      n.xMLObjIdComponentList.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(XMLObjIdComponentList n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(XMLObjIdComponent n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
   public void visit(XMLNumberForm n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
    
    
    
    
    
    
   public void visit(XMLNameAndNumberForm n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.xMLNumberForm.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.nodeToken5.accept(this, argu);
   }

   
    
    
    
    
   public void visit(RelativeOIDType n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(RelativeOIDValue n, A argu) {
      n.nodeToken.accept(this, argu);
      n.relativeOIDComponentsList.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(RelativeOIDComponentsList n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(RelativeOIDComponents n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
   public void visit(XMLRelativeOIDValue n, A argu) {
      n.xMLRelativeOIDComponentList.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(XMLRelativeOIDComponentList n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(XMLRelativeOIDComponent n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(CharacterStringType n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   public void visit(RestrictedCharacterStringType n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
    
   public void visit(RestrictedCharacterStringValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(CharacterStringList n, A argu) {
      n.nodeToken.accept(this, argu);
      n.charSyms.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(CharSyms n, A argu) {
      n.charsDefn.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
    
    
    
   public void visit(CharsDefn n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
    
    
    
    
    
    
   public void visit(Quadruple n, A argu) {
      n.nodeToken.accept(this, argu);
      n.group.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.plane.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.row.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.cell.accept(this, argu);
      n.nodeToken4.accept(this, argu);
   }

   
    
    
    
    
   public void visit(Group n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
   public void visit(Plane n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
   public void visit(Row n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
   public void visit(Cell n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
    
    
    
    
   public void visit(Tuple n, A argu) {
      n.nodeToken.accept(this, argu);
      n.tableColumn.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.tableRow.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   
    
    
    
    
   public void visit(TableColumn n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
   public void visit(TableRow n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
   public void visit(XMLRestrictedCharacterStringValue n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(UnrestrictedCharacterStringType n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
   public void visit(CharacterStringValue n, A argu) {
      n.restrictedCharacterStringValue.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(XMLCharacterStringValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
   public void visit(UnrestrictedCharacterStringValue n, A argu) {
      n.sequenceValue.accept(this, argu);
   }

   
    
    
    
    
   public void visit(XMLUnrestrictedCharacterStringValue n, A argu) {
      n.nodeOptional.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(UsefulType n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
    
   public void visit(TypeWithConstraint n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(TypeOrNamedType n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
    
   public void visit(Constraint n, A argu) {
      n.nodeToken.accept(this, argu);
      n.constraintSpec.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
   public void visit(ConstraintSpec n, A argu) {
      n.subtypeConstraint.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ExceptionSpec n, A argu) {
      n.nodeToken.accept(this, argu);
      n.exceptionIdentification.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(ExceptionIdentification n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
   public void visit(SubtypeConstraint n, A argu) {
      n.elementSetSpecs.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ElementSetSpecs n, A argu) {
      n.rootElementSetSpec.accept(this, argu);
      n.nodeOptional.accept(this, argu);
   }

   
    
    
    
    
   public void visit(RootElementSetSpec n, A argu) {
      n.elementSetSpec.accept(this, argu);
   }

   
    
    
    
    
   public void visit(AdditionalElementSetSpec n, A argu) {
      n.elementSetSpec.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ElementSetSpec n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(Unions n, A argu) {
      n.intersections.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(Intersections n, A argu) {
      n.intersectionElements.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(IntersectionElements n, A argu) {
      n.elements.accept(this, argu);
      n.nodeOptional.accept(this, argu);
   }

   
    
    
    
    
   public void visit(Elems n, A argu) {
      n.elements.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(Exclusions n, A argu) {
      n.nodeToken.accept(this, argu);
      n.elements.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(UnionMark n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(IntersectionMark n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(Elements n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
    
    
    
    
    
   public void visit(SubtypeElements n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(PatternConstraint n, A argu) {
      n.nodeToken.accept(this, argu);
      n.value.accept(this, argu);
   }

   
    
    
    
    
   public void visit(SingleValue n, A argu) {
      n.value.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ContainedSubtype n, A argu) {
      n.nodeOptional.accept(this, argu);
      n.type.accept(this, argu);
   }

   
    
    
    
    
   public void visit(Includes n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(ValueRange n, A argu) {
      n.lowerEndpoint.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.upperEndpoint.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(LowerEndpoint n, A argu) {
      n.lowerEndValue.accept(this, argu);
      n.nodeOptional.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(UpperEndpoint n, A argu) {
      n.nodeOptional.accept(this, argu);
      n.upperEndValue.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(LowerEndValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(UpperEndValue n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(SizeConstraint n, A argu) {
      n.nodeToken.accept(this, argu);
      n.constraint.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(PermittedAlphabet n, A argu) {
      n.nodeToken.accept(this, argu);
      n.constraint.accept(this, argu);
   }

   
    
    
    
    
   public void visit(TypeConstraint n, A argu) {
      n.type.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(InnerTypeConstraints n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
   public void visit(SingleTypeConstraint n, A argu) {
      n.constraint.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(MultipleTypeConstraints n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(FullSpecification n, A argu) {
      n.nodeToken.accept(this, argu);
      n.typeConstraints.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   
    
    
    
    
    
    
    
    
   public void visit(PartialSpecification n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.typeConstraints.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(TypeConstraints n, A argu) {
      n.namedConstraint.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(NamedConstraint n, A argu) {
      n.nodeToken.accept(this, argu);
      n.componentConstraint.accept(this, argu);
   }

   
    
    
    
    
    
   public void visit(ComponentConstraint n, A argu) {
      n.nodeOptional.accept(this, argu);
      n.nodeOptional1.accept(this, argu);
   }

   
    
    
    
    
   public void visit(ValueConstraint n, A argu) {
      n.constraint.accept(this, argu);
   }

   
    
    
    
    
    
    
   public void visit(PresenceConstraint n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

}
