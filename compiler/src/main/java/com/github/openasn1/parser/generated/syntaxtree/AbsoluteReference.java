//
// Generated by JTB 1.3.2
//

package com.github.openasn1.parser.generated.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * nodeToken -> &lt;AT_TKN&gt;
 * moduleIdentifier -> ModuleIdentifier()
 * nodeToken1 -> &lt;DOT_TKN&gt;
 * itemSpec -> ItemSpec()
 * </PRE>
 */
public class AbsoluteReference implements Node {
   private Node parent;
   public NodeToken nodeToken;
   public ModuleIdentifier moduleIdentifier;
   public NodeToken nodeToken1;
   public ItemSpec itemSpec;

   public AbsoluteReference(NodeToken n0, ModuleIdentifier n1, NodeToken n2, ItemSpec n3) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      moduleIdentifier = n1;
      if ( moduleIdentifier != null ) moduleIdentifier.setParent(this);
      nodeToken1 = n2;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      itemSpec = n3;
      if ( itemSpec != null ) itemSpec.setParent(this);
   }

   public AbsoluteReference(ModuleIdentifier n0, ItemSpec n1) {
      nodeToken = new NodeToken("@");
      if ( nodeToken != null ) nodeToken.setParent(this);
      moduleIdentifier = n0;
      if ( moduleIdentifier != null ) moduleIdentifier.setParent(this);
      nodeToken1 = new NodeToken(".");
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      itemSpec = n1;
      if ( itemSpec != null ) itemSpec.setParent(this);
   }

   public void accept(com.github.openasn1.parser.generated.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(com.github.openasn1.parser.generated.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(com.github.openasn1.parser.generated.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(com.github.openasn1.parser.generated.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

