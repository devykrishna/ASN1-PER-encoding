/* Generated By:JavaCC: Do not edit this line. ASN1Parser.java */
package com.github.openasn1.parser.generated;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.InputStream;
import java.util.Vector;

import com.github.openasn1.parser.generated.syntaxtree.*;
import com.github.openasn1.parser.generated.visitor.*;


public class ASN1Parser implements ASN1ParserConstants {
   public static void main(String args[])
   {
      System.out.println("Reading Input File");
      try
      {
         String path;
         if ( args.length < 1 )
         {
            path = "asn1specifications/M3100ASN1TypeModule2.asn";
         }
         else
         {
            path = args[0];
         }
         ASN1Parser p = new ASN1Parser(new FileInputStream(path));
         Node start = p.parse();
         Visitor v = new MyVisitor();
         start.accept(v);
      }
      catch (Exception e)
      {
         System.out.println("Oops.");
         System.out.println(e.getMessage());
      }
   }
   public Node parse() throws ParseException
   {
      return ModuleDefinition();
   }
   public static Node parseFile(File file) throws FileNotFoundException,ParseException
   {
      ASN1Parser p = new ASN1Parser(new FileReader(file));
      return p.parse();
   }
   public static Node parseFile(String file) throws FileNotFoundException,ParseException
   {
      ASN1Parser p = new ASN1Parser(new FileReader(file));
      return p.parse();
   }
   public static Node parseStream(InputStream s) throws ParseException
   {
      ASN1Parser p = new ASN1Parser(s);
      return p.parse();
   }

  final public modulereference modulereference() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(TYPEREFERENCE);
                        n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new modulereference(n0);}
    throw new Error("Missing return statement in function");
  }

  final public valuereference valuereference() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new valuereference(n0);}
    throw new Error("Missing return statement in function");
  }

  final public xmlasn1typename xmlasn1typename() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(TYPEREFERENCE);
                        n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new xmlasn1typename(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NamedValueList NamedValueList() throws ParseException {
   NamedValue n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NamedValue n5;
    n0 = NamedValue();
    label_1:
    while (true) {
      if (jj_2_1(8)) {
        ;
      } else {
        break label_1;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA_TKN);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = NamedValue();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new NamedValueList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ModuleDefinition ModuleDefinition() throws ParseException {
   ModuleIdentifier n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   TagDefault n4;
   NodeOptional n5 = new NodeOptional();
   ExtensionDefault n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   ModuleBody n11;
   NodeToken n12;
   Token n13;
    n0 = ModuleIdentifier();
    n2 = jj_consume_token(DEFINITIONS_TKN);
                          n1 = JTBToolkit.makeNodeToken(n2);
    if (jj_2_2(8)) {
      n4 = TagDefault();
        n3.addNode(n4);
    } else {
      ;
    }
    if (jj_2_3(8)) {
      n6 = ExtensionDefault();
        n5.addNode(n6);
    } else {
      ;
    }
    n8 = jj_consume_token(ASSIGN_OP_TKN);
                        n7 = JTBToolkit.makeNodeToken(n8);
    n10 = jj_consume_token(BEGIN_TKN);
                     n9 = JTBToolkit.makeNodeToken(n10);
    n11 = ModuleBody();
    n13 = jj_consume_token(END_TKN);
                   n12 = JTBToolkit.makeNodeToken(n13);
     {if (true) return new ModuleDefinition(n0,n1,n3,n5,n7,n9,n11,n12);}
    throw new Error("Missing return statement in function");
  }

  final public ModuleIdentifier ModuleIdentifier() throws ParseException {
   modulereference n0;
   NodeOptional n1 = new NodeOptional();
   DefinitiveIdentifier n2;
    n0 = modulereference();
    if (jj_2_4(8)) {
      n2 = DefinitiveIdentifier();
        n1.addNode(n2);
    } else {
      ;
    }
     {if (true) return new ModuleIdentifier(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public DefinitiveIdentifier DefinitiveIdentifier() throws ParseException {
   NodeToken n0;
   Token n1;
   DefinitiveObjIdComponentList n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(LEFT_BRACE_TKN);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n2 = DefinitiveObjIdComponentList();
    n4 = jj_consume_token(RIGHT_BRACE_TKN);
                          n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new DefinitiveIdentifier(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public DefinitiveObjIdComponentList DefinitiveObjIdComponentList() throws ParseException {
   NodeList n0 = new NodeList();
   DefinitiveObjIdComponent n1;
    label_2:
    while (true) {
      n1 = DefinitiveObjIdComponent();
        n0.addNode(n1);
      if (jj_2_5(8)) {
        ;
      } else {
        break label_2;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new DefinitiveObjIdComponentList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public DefinitiveObjIdComponent DefinitiveObjIdComponent() throws ParseException {
   NodeChoice n0;
   DefinitiveNameAndNumberForm n1;
   NameForm n2;
   DefinitiveNumberForm n3;
    if (jj_2_6(8)) {
      n1 = DefinitiveNameAndNumberForm();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_7(8)) {
      n2 = NameForm();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_8(8)) {
      n3 = DefinitiveNumberForm();
        n0 = new NodeChoice(n3, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new DefinitiveObjIdComponent(n0);}
    throw new Error("Missing return statement in function");
  }

  final public DefinitiveNumberForm DefinitiveNumberForm() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NUMBER);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new DefinitiveNumberForm(n0);}
    throw new Error("Missing return statement in function");
  }

  final public DefinitiveNameAndNumberForm DefinitiveNameAndNumberForm() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   DefinitiveNumberForm n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LEFT_PARENTHESIS_TKN);
                               n2 = JTBToolkit.makeNodeToken(n3);
    n4 = DefinitiveNumberForm();
    n6 = jj_consume_token(RIGHT_PARENTHESIS_TKN);
                                n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new DefinitiveNameAndNumberForm(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public TagDefault TagDefault() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
    if (jj_2_9(8)) {
        n1 = new NodeSequence(2);
      n3 = jj_consume_token(EXPLICIT_TKN);
                          n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(TAGS_TKN);
                      n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_10(8)) {
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(IMPLICIT_TKN);
                          n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n10 = jj_consume_token(TAGS_TKN);
                       n9 = JTBToolkit.makeNodeToken(n10);
        n6.addNode(n9);
        n0 = new NodeChoice(n6, 1);
    } else if (jj_2_11(8)) {
        n11 = new NodeSequence(2);
      n13 = jj_consume_token(AUTOMATIC_TKN);
                            n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
      n15 = jj_consume_token(TAGS_TKN);
                       n14 = JTBToolkit.makeNodeToken(n15);
        n11.addNode(n14);
        n0 = new NodeChoice(n11, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TagDefault(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExtensionDefault ExtensionDefault() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(EXTENSIBILITY_TKN);
                            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(IMPLIED_TKN);
                      n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new ExtensionDefault(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public ModuleBody ModuleBody() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   Exports n1;
   NodeOptional n2 = new NodeOptional();
   Imports n3;
   AssignmentList n4;
    if (jj_2_12(8)) {
      n1 = Exports();
        n0.addNode(n1);
    } else {
      ;
    }
    if (jj_2_13(8)) {
      n3 = Imports();
        n2.addNode(n3);
    } else {
      ;
    }
    n4 = AssignmentList();
     {if (true) return new ModuleBody(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public Exports Exports() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   SymbolsExported n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
    if (jj_2_15(8)) {
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(EXPORTS_TKN);
                         n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      if (jj_2_14(8)) {
        n5 = SymbolsExported();
           n4.addNode(n5);
      } else {
        ;
      }
        n1.addNode(n4);
      n7 = jj_consume_token(SEMICOLON_TKN);
                           n6 = JTBToolkit.makeNodeToken(n7);
        n1.addNode(n6);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_16(8)) {
        n8 = new NodeSequence(3);
      n10 = jj_consume_token(EXPORTS_TKN);
                          n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
      n12 = jj_consume_token(ALL_TKN);
                      n11 = JTBToolkit.makeNodeToken(n12);
        n8.addNode(n11);
      n14 = jj_consume_token(SEMICOLON_TKN);
                            n13 = JTBToolkit.makeNodeToken(n14);
        n8.addNode(n13);
        n0 = new NodeChoice(n8, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Exports(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SymbolsExported SymbolsExported() throws ParseException {
   SymbolList n0;
    n0 = SymbolList();
     {if (true) return new SymbolsExported(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Imports Imports() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   SymbolsImported n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(IMPORTS_TKN);
                      n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_17(8)) {
      n3 = SymbolsImported();
        n2.addNode(n3);
    } else {
      ;
    }
    n5 = jj_consume_token(SEMICOLON_TKN);
                        n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Imports(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public SymbolsImported SymbolsImported() throws ParseException {
   SymbolsFromModuleList n0;
    n0 = SymbolsFromModuleList();
     {if (true) return new SymbolsImported(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SymbolsFromModuleList SymbolsFromModuleList() throws ParseException {
   NodeList n0 = new NodeList();
   SymbolsFromModule n1;
    label_3:
    while (true) {
      n1 = SymbolsFromModule();
        n0.addNode(n1);
      if (jj_2_18(8)) {
        ;
      } else {
        break label_3;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new SymbolsFromModuleList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SymbolsFromModule SymbolsFromModule() throws ParseException {
   SymbolList n0;
   NodeToken n1;
   Token n2;
   GlobalModuleReference n3;
    n0 = SymbolList();
    n2 = jj_consume_token(FROM_TKN);
                   n1 = JTBToolkit.makeNodeToken(n2);
    n3 = GlobalModuleReference();
     {if (true) return new SymbolsFromModule(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public GlobalModuleReference GlobalModuleReference() throws ParseException {
   modulereference n0;
   NodeOptional n1 = new NodeOptional();
   AssignedIdentifier n2;
    n0 = modulereference();
    if (jj_2_19(8)) {
      n2 = AssignedIdentifier();
        n1.addNode(n2);
    } else {
      ;
    }
     {if (true) return new GlobalModuleReference(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public AssignedIdentifier AssignedIdentifier() throws ParseException {
   NodeChoice n0;
   ObjectIdentifierValue n1;
   DefinedValue n2;
    if (jj_2_20(8)) {
      n1 = ObjectIdentifierValue();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_21(8)) {
      n2 = DefinedValue();
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AssignedIdentifier(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SymbolList SymbolList() throws ParseException {
   Symbol n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Symbol n5;
    n0 = Symbol();
    label_4:
    while (true) {
      if (jj_2_22(8)) {
        ;
      } else {
        break label_4;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA_TKN);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Symbol();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new SymbolList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Symbol Symbol() throws ParseException {
   Reference n0;
    n0 = Reference();
     {if (true) return new Symbol(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Reference Reference() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   valuereference n3;
    if (jj_2_23(8)) {
      n2 = jj_consume_token(TYPEREFERENCE);
                           n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_24(8)) {
      n3 = valuereference();
        n0 = new NodeChoice(n3, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Reference(n0);}
    throw new Error("Missing return statement in function");
  }

  final public AssignmentList AssignmentList() throws ParseException {
   NodeList n0 = new NodeList();
   Assignment n1;
    label_5:
    while (true) {
      n1 = Assignment();
        n0.addNode(n1);
      if (jj_2_25(8)) {
        ;
      } else {
        break label_5;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new AssignmentList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Assignment Assignment() throws ParseException {
   NodeChoice n0;
   TypeAssignment n1;
   ValueAssignment n2;
   XMLValueAssignment n3;
   ValueSetTypeAssignment n4;
    if (jj_2_26(8)) {
      n1 = TypeAssignment();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_27(8)) {
      n2 = ValueAssignment();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_28(8)) {
      n3 = XMLValueAssignment();
        n0 = new NodeChoice(n3, 2);
    } else if (jj_2_29(8)) {
      n4 = ValueSetTypeAssignment();
        n0 = new NodeChoice(n4, 3);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Assignment(n0);}
    throw new Error("Missing return statement in function");
  }

  final public DefinedType DefinedType() throws ParseException {
   NodeChoice n0;
   ExternalTypeReference n1;
   NodeToken n2;
   Token n3;
    if (jj_2_30(8)) {
      n1 = ExternalTypeReference();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_31(8)) {
      n3 = jj_consume_token(TYPEREFERENCE);
                           n2 = JTBToolkit.makeNodeToken(n3);
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new DefinedType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExternalTypeReference ExternalTypeReference() throws ParseException {
   modulereference n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    n0 = modulereference();
    n2 = jj_consume_token(DOT_TKN);
                  n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(TYPEREFERENCE);
                        n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new ExternalTypeReference(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public NonParameterizedTypeName NonParameterizedTypeName() throws ParseException {
   NodeChoice n0;
   ExternalTypeReference n1;
   NodeToken n2;
   Token n3;
   xmlasn1typename n4;
    if (jj_2_32(8)) {
      n1 = ExternalTypeReference();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_33(8)) {
      n3 = jj_consume_token(TYPEREFERENCE);
                           n2 = JTBToolkit.makeNodeToken(n3);
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_34(8)) {
      n4 = xmlasn1typename();
        n0 = new NodeChoice(n4, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new NonParameterizedTypeName(n0);}
    throw new Error("Missing return statement in function");
  }

  final public DefinedValue DefinedValue() throws ParseException {
   NodeChoice n0;
   ExternalValueReference n1;
   valuereference n2;
    if (jj_2_35(8)) {
      n1 = ExternalValueReference();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_36(8)) {
      n2 = valuereference();
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new DefinedValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExternalValueReference ExternalValueReference() throws ParseException {
   modulereference n0;
   NodeToken n1;
   Token n2;
   valuereference n3;
    n0 = modulereference();
    n2 = jj_consume_token(DOT_TKN);
                  n1 = JTBToolkit.makeNodeToken(n2);
    n3 = valuereference();
     {if (true) return new ExternalValueReference(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public AbsoluteReference AbsoluteReference() throws ParseException {
   NodeToken n0;
   Token n1;
   ModuleIdentifier n2;
   NodeToken n3;
   Token n4;
   ItemSpec n5;
    n1 = jj_consume_token(AT_TKN);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ModuleIdentifier();
    n4 = jj_consume_token(DOT_TKN);
                  n3 = JTBToolkit.makeNodeToken(n4);
    n5 = ItemSpec();
     {if (true) return new AbsoluteReference(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  final public ItemSpec ItemSpec() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   ComponentId n6;
    n1 = jj_consume_token(TYPEREFERENCE);
                        n0 = JTBToolkit.makeNodeToken(n1);
    label_6:
    while (true) {
      if (jj_2_37(8)) {
        ;
      } else {
        break label_6;
      }
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(DOT_TKN);
                     n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n6 = ComponentId();
        n3.addNode(n6);
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
     {if (true) return new ItemSpec(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public ComponentId ComponentId() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    if (jj_2_38(8)) {
      n2 = jj_consume_token(IDENTIFIER);
                        n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_39(8)) {
      n4 = jj_consume_token(NUMBER);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
    } else if (jj_2_40(8)) {
      n6 = jj_consume_token(STAR_TKN);
                      n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ComponentId(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TypeAssignment TypeAssignment() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Type n4;
    n1 = jj_consume_token(TYPEREFERENCE);
                        n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ASSIGN_OP_TKN);
                        n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Type();
     {if (true) return new TypeAssignment(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public ValueAssignment ValueAssignment() throws ParseException {
   valuereference n0;
   Type n1;
   NodeToken n2;
   Token n3;
   Value n4;
    n0 = valuereference();
    n1 = Type();
    n3 = jj_consume_token(ASSIGN_OP_TKN);
                        n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Value();
     {if (true) return new ValueAssignment(n0,n1,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public XMLValueAssignment XMLValueAssignment() throws ParseException {
   valuereference n0;
   NodeToken n1;
   Token n2;
   XMLTypedValue n3;
    n0 = valuereference();
    n2 = jj_consume_token(ASSIGN_OP_TKN);
                        n1 = JTBToolkit.makeNodeToken(n2);
    n3 = XMLTypedValue();
     {if (true) return new XMLValueAssignment(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public XMLTypedValue XMLTypedValue() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NonParameterizedTypeName n6;
   NodeToken n7;
   Token n8;
   XMLValue n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NonParameterizedTypeName n14;
   NodeToken n15;
   Token n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NonParameterizedTypeName n22;
   NodeToken n23;
   Token n24;
    if (jj_2_41(8)) {
        n1 = new NodeSequence(9);
      n3 = jj_consume_token(LESSER_THAN_TKN);
                             n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(AMPERSAND_TKN);
                           n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n6 = NonParameterizedTypeName();
        n1.addNode(n6);
      n8 = jj_consume_token(GREATER_THAN_TKN);
                              n7 = JTBToolkit.makeNodeToken(n8);
        n1.addNode(n7);
      n9 = XMLValue();
        n1.addNode(n9);
      n11 = jj_consume_token(XMLENDTAGBRACKET_TKN);
                                   n10 = JTBToolkit.makeNodeToken(n11);
        n1.addNode(n10);
      n13 = jj_consume_token(AMPERSAND_TKN);
                            n12 = JTBToolkit.makeNodeToken(n13);
        n1.addNode(n12);
      n14 = NonParameterizedTypeName();
        n1.addNode(n14);
      n16 = jj_consume_token(GREATER_THAN_TKN);
                               n15 = JTBToolkit.makeNodeToken(n16);
        n1.addNode(n15);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_42(8)) {
        n17 = new NodeSequence(4);
      n19 = jj_consume_token(LESSER_THAN_TKN);
                              n18 = JTBToolkit.makeNodeToken(n19);
        n17.addNode(n18);
      n21 = jj_consume_token(AMPERSAND_TKN);
                            n20 = JTBToolkit.makeNodeToken(n21);
        n17.addNode(n20);
      n22 = NonParameterizedTypeName();
        n17.addNode(n22);
      n24 = jj_consume_token(XMLTAGTERMINATINGBRACKET_TKN);
                                           n23 = JTBToolkit.makeNodeToken(n24);
        n17.addNode(n23);
        n0 = new NodeChoice(n17, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new XMLTypedValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ValueSetTypeAssignment ValueSetTypeAssignment() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
   NodeToken n3;
   Token n4;
   ValueSet n5;
    n1 = jj_consume_token(TYPEREFERENCE);
                        n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n4 = jj_consume_token(ASSIGN_OP_TKN);
                        n3 = JTBToolkit.makeNodeToken(n4);
    n5 = ValueSet();
     {if (true) return new ValueSetTypeAssignment(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  final public ValueSet ValueSet() throws ParseException {
   NodeToken n0;
   Token n1;
   ElementSetSpecs n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(LEFT_BRACE_TKN);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ElementSetSpecs();
    n4 = jj_consume_token(RIGHT_BRACE_TKN);
                          n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new ValueSet(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public Type Type() throws ParseException {
   NodeChoice n0;
   NormalConstrainedType n1;
   TypeWithConstraint n2;
    if (jj_2_43(8)) {
      n1 = NormalConstrainedType();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_44(8)) {
      n2 = TypeWithConstraint();
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Type(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NormalConstrainedType NormalConstrainedType() throws ParseException {
   NodeChoice n0;
   BuiltinType n1;
   ReferencedType n2;
   NodeListOptional n3 = new NodeListOptional();
   Constraint n4;
    if (jj_2_45(8)) {
      n1 = BuiltinType();
           n0 = new NodeChoice(n1, 0);
    } else if (jj_2_46(8)) {
      n2 = ReferencedType();
           n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_7:
    while (true) {
      if (jj_2_47(8)) {
        ;
      } else {
        break label_7;
      }
      n4 = Constraint();
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
     {if (true) return new NormalConstrainedType(n0,n3);}
    throw new Error("Missing return statement in function");
  }

  final public BuiltinType BuiltinType() throws ParseException {
   NodeChoice n0;
   BitStringType n1;
   BooleanType n2;
   CharacterStringType n3;
   ChoiceType n4;
   EmbeddedPDVType n5;
   EnumeratedType n6;
   ExternalType n7;
   IntegerType n8;
   NullType n9;
   ObjectIdentifierType n10;
   OctetStringType n11;
   RealType n12;
   RelativeOIDType n13;
   SequenceOfType n14;
   SequenceType n15;
   SetOfType n16;
   SetType n17;
   TaggedType n18;
    if (jj_2_48(8)) {
      n1 = BitStringType();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_49(8)) {
      n2 = BooleanType();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_50(8)) {
      n3 = CharacterStringType();
        n0 = new NodeChoice(n3, 2);
    } else if (jj_2_51(8)) {
      n4 = ChoiceType();
        n0 = new NodeChoice(n4, 3);
    } else if (jj_2_52(8)) {
      n5 = EmbeddedPDVType();
        n0 = new NodeChoice(n5, 4);
    } else if (jj_2_53(8)) {
      n6 = EnumeratedType();
        n0 = new NodeChoice(n6, 5);
    } else if (jj_2_54(8)) {
      n7 = ExternalType();
        n0 = new NodeChoice(n7, 6);
    } else if (jj_2_55(8)) {
      n8 = IntegerType();
        n0 = new NodeChoice(n8, 7);
    } else if (jj_2_56(8)) {
      n9 = NullType();
        n0 = new NodeChoice(n9, 8);
    } else if (jj_2_57(8)) {
      n10 = ObjectIdentifierType();
        n0 = new NodeChoice(n10, 9);
    } else if (jj_2_58(8)) {
      n11 = OctetStringType();
        n0 = new NodeChoice(n11, 10);
    } else if (jj_2_59(8)) {
      n12 = RealType();
        n0 = new NodeChoice(n12, 11);
    } else if (jj_2_60(8)) {
      n13 = RelativeOIDType();
        n0 = new NodeChoice(n13, 12);
    } else if (jj_2_61(8)) {
      n14 = SequenceOfType();
        n0 = new NodeChoice(n14, 13);
    } else if (jj_2_62(8)) {
      n15 = SequenceType();
        n0 = new NodeChoice(n15, 14);
    } else if (jj_2_63(8)) {
      n16 = SetOfType();
        n0 = new NodeChoice(n16, 15);
    } else if (jj_2_64(8)) {
      n17 = SetType();
        n0 = new NodeChoice(n17, 16);
    } else if (jj_2_65(8)) {
      n18 = TaggedType();
        n0 = new NodeChoice(n18, 17);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new BuiltinType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NamedType NamedType() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
     {if (true) return new NamedType(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public ReferencedType ReferencedType() throws ParseException {
   NodeChoice n0;
   DefinedType n1;
   UsefulType n2;
   SelectionType n3;
    if (jj_2_66(8)) {
      n1 = DefinedType();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_67(8)) {
      n2 = UsefulType();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_68(8)) {
      n3 = SelectionType();
        n0 = new NodeChoice(n3, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ReferencedType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Value Value() throws ParseException {
   NodeChoice n0;
   BuiltinValue n1;
   ReferencedValue n2;
    if (jj_2_69(8)) {
      n1 = BuiltinValue();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_70(8)) {
      n2 = ReferencedValue();
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Value(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLValue XMLValue() throws ParseException {
   XMLBuiltinValue n0;
    n0 = XMLBuiltinValue();
     {if (true) return new XMLValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BuiltinValue BuiltinValue() throws ParseException {
   NodeChoice n0;
   BitStringValue n1;
   BooleanValue n2;
   CharacterStringValue n3;
   ChoiceValue n4;
   EmbeddedPDVValue n5;
   IntegerValue n6;
   NullValue n7;
   ObjectIdentifierValue n8;
   OctetStringValue n9;
   RealValue n10;
   RelativeOIDValue n11;
   SequenceValue n12;
   SequenceOfValue n13;
   SetValue n14;
   SetOfValue n15;
    if (jj_2_71(8)) {
      n1 = BitStringValue();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_72(8)) {
      n2 = BooleanValue();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_73(8)) {
      n3 = CharacterStringValue();
        n0 = new NodeChoice(n3, 2);
    } else if (jj_2_74(8)) {
      n4 = ChoiceValue();
        n0 = new NodeChoice(n4, 3);
    } else if (jj_2_75(8)) {
      n5 = EmbeddedPDVValue();
        n0 = new NodeChoice(n5, 4);
    } else if (jj_2_76(8)) {
      n6 = IntegerValue();
        n0 = new NodeChoice(n6, 5);
    } else if (jj_2_77(8)) {
      n7 = NullValue();
        n0 = new NodeChoice(n7, 6);
    } else if (jj_2_78(8)) {
      n8 = ObjectIdentifierValue();
        n0 = new NodeChoice(n8, 7);
    } else if (jj_2_79(8)) {
      n9 = OctetStringValue();
        n0 = new NodeChoice(n9, 8);
    } else if (jj_2_80(8)) {
      n10 = RealValue();
        n0 = new NodeChoice(n10, 9);
    } else if (jj_2_81(8)) {
      n11 = RelativeOIDValue();
        n0 = new NodeChoice(n11, 10);
    } else if (jj_2_82(8)) {
      n12 = SequenceValue();
        n0 = new NodeChoice(n12, 11);
    } else if (jj_2_83(8)) {
      n13 = SequenceOfValue();
        n0 = new NodeChoice(n13, 12);
    } else if (jj_2_84(8)) {
      n14 = SetValue();
        n0 = new NodeChoice(n14, 13);
    } else if (jj_2_85(8)) {
      n15 = SetOfValue();
        n0 = new NodeChoice(n15, 14);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new BuiltinValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLBuiltinValue XMLBuiltinValue() throws ParseException {
   NodeChoice n0;
   NodeOptional n1 = new NodeOptional();
   XMLBitStringValue n2;
   XMLBooleanValue n3;
   XMLCharacterStringValue n4;
   XMLChoiceValue n5;
   XMLEmbeddedPDVValue n6;
   XMLEnumeratedValue n7;
   XMLExternalValue n8;
   XMLIntegerValue n9;
   XMLNullValue n10;
   XMLObjectIdentifierValue n11;
   XMLOctetStringValue n12;
   XMLRealValue n13;
   XMLRelativeOIDValue n14;
   NodeOptional n15 = new NodeOptional();
   XMLSequenceValue n16;
   NodeOptional n17 = new NodeOptional();
   XMLSequenceOfValue n18;
   NodeOptional n19 = new NodeOptional();
   XMLSetValue n20;
   NodeOptional n21 = new NodeOptional();
   XMLSetOfValue n22;
    if (jj_2_86(8)) {
      n2 = XMLBitStringValue();
           n1.addNode(n2);
    } else {
      ;
    }
        n0 = new NodeChoice(n1, 0);
     {if (true) return new XMLBuiltinValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ReferencedValue ReferencedValue() throws ParseException {
   DefinedValue n0;
    n0 = DefinedValue();
     {if (true) return new ReferencedValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NamedValue NamedValue() throws ParseException {
   NodeToken n0;
   Token n1;
   Value n2;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Value();
     {if (true) return new NamedValue(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public XMLNamedValue XMLNamedValue() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   XMLValue n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
    n1 = jj_consume_token(LESSER_THAN_TKN);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(AMPERSAND_TKN);
                        n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(IDENTIFIER);
                     n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(GREATER_THAN_TKN);
                           n6 = JTBToolkit.makeNodeToken(n7);
    n8 = XMLValue();
    n10 = jj_consume_token(XMLENDTAGBRACKET_TKN);
                                n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(AMPERSAND_TKN);
                         n11 = JTBToolkit.makeNodeToken(n12);
    n14 = jj_consume_token(IDENTIFIER);
                      n13 = JTBToolkit.makeNodeToken(n14);
    n16 = jj_consume_token(GREATER_THAN_TKN);
                            n15 = JTBToolkit.makeNodeToken(n16);
     {if (true) return new XMLNamedValue(n0,n2,n4,n6,n8,n9,n11,n13,n15);}
    throw new Error("Missing return statement in function");
  }

  final public BooleanType BooleanType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(BOOLEAN_TKN);
                      n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new BooleanType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BooleanValue BooleanValue() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    if (jj_2_91(8)) {
      n2 = jj_consume_token(TRUE_TKN);
                      n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_92(8)) {
      n4 = jj_consume_token(FALSE_TKN);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new BooleanValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLBooleanValue XMLBooleanValue() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
    if (jj_2_93(8)) {
        n1 = new NodeSequence(4);
      n3 = jj_consume_token(LESSER_THAN_TKN);
                             n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(AMPERSAND_TKN);
                           n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n7 = jj_consume_token(IDENTIFIER);
                        n6 = JTBToolkit.makeNodeToken(n7);
        n1.addNode(n6);
      n9 = jj_consume_token(XMLTAGTERMINATINGBRACKET_TKN);
                                          n8 = JTBToolkit.makeNodeToken(n9);
        n1.addNode(n8);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_94(8)) {
        n10 = new NodeSequence(4);
      n12 = jj_consume_token(LESSER_THAN_TKN);
                              n11 = JTBToolkit.makeNodeToken(n12);
        n10.addNode(n11);
      n14 = jj_consume_token(AMPERSAND_TKN);
                            n13 = JTBToolkit.makeNodeToken(n14);
        n10.addNode(n13);
      n16 = jj_consume_token(IDENTIFIER);
                         n15 = JTBToolkit.makeNodeToken(n16);
        n10.addNode(n15);
      n18 = jj_consume_token(XMLTAGTERMINATINGBRACKET_TKN);
                                           n17 = JTBToolkit.makeNodeToken(n18);
        n10.addNode(n17);
        n0 = new NodeChoice(n10, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new XMLBooleanValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IntegerType IntegerType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NamedNumberList n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(INTEGER_TKN);
                      n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_95(8)) {
        n3 = new NodeSequence(3);
      n5 = jj_consume_token(LEFT_BRACE_TKN);
                            n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n6 = NamedNumberList();
        n3.addNode(n6);
      n8 = jj_consume_token(RIGHT_BRACE_TKN);
                             n7 = JTBToolkit.makeNodeToken(n8);
        n3.addNode(n7);
        n2.addNode(n3);
    } else {
      ;
    }
     {if (true) return new IntegerType(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public NamedNumberList NamedNumberList() throws ParseException {
   NamedNumber n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NamedNumber n5;
    n0 = NamedNumber();
    label_8:
    while (true) {
      if (jj_2_96(8)) {
        ;
      } else {
        break label_8;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA_TKN);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = NamedNumber();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new NamedNumberList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public NamedNumber NamedNumber() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   SignedNumber n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   DefinedValue n14;
   NodeToken n15;
   Token n16;
    if (jj_2_97(8)) {
        n1 = new NodeSequence(4);
      n3 = jj_consume_token(IDENTIFIER);
                        n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(LEFT_PARENTHESIS_TKN);
                                  n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n6 = SignedNumber();
        n1.addNode(n6);
      n8 = jj_consume_token(RIGHT_PARENTHESIS_TKN);
                                   n7 = JTBToolkit.makeNodeToken(n8);
        n1.addNode(n7);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_98(8)) {
        n9 = new NodeSequence(4);
      n11 = jj_consume_token(IDENTIFIER);
                         n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n13 = jj_consume_token(LEFT_PARENTHESIS_TKN);
                                   n12 = JTBToolkit.makeNodeToken(n13);
        n9.addNode(n12);
      n14 = DefinedValue();
        n9.addNode(n14);
      n16 = jj_consume_token(RIGHT_PARENTHESIS_TKN);
                                    n15 = JTBToolkit.makeNodeToken(n16);
        n9.addNode(n15);
        n0 = new NodeChoice(n9, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new NamedNumber(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SignedNumber SignedNumber() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    if (jj_2_99(8)) {
      n2 = jj_consume_token(MINUS_TKN);
                       n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
    } else {
      ;
    }
    n4 = jj_consume_token(NUMBER);
                 n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new SignedNumber(n0,n3);}
    throw new Error("Missing return statement in function");
  }

  final public IntegerValue IntegerValue() throws ParseException {
   SignedNumber n0;
    n0 = SignedNumber();
     {if (true) return new IntegerValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLIntegerValue XMLIntegerValue() throws ParseException {
   NodeChoice n0;
   SignedNumber n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
    if (jj_2_100(8)) {
      n1 = SignedNumber();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_101(8)) {
        n2 = new NodeSequence(4);
      n4 = jj_consume_token(LESSER_THAN_TKN);
                             n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n6 = jj_consume_token(AMPERSAND_TKN);
                           n5 = JTBToolkit.makeNodeToken(n6);
        n2.addNode(n5);
      n8 = jj_consume_token(IDENTIFIER);
                        n7 = JTBToolkit.makeNodeToken(n8);
        n2.addNode(n7);
      n10 = jj_consume_token(XMLTAGTERMINATINGBRACKET_TKN);
                                           n9 = JTBToolkit.makeNodeToken(n10);
        n2.addNode(n9);
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new XMLIntegerValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public EnumeratedType EnumeratedType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Enumerations n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(ENUMERATED_TKN);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LEFT_BRACE_TKN);
                         n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Enumerations();
    n6 = jj_consume_token(RIGHT_BRACE_TKN);
                          n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new EnumeratedType(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Enumerations Enumerations() throws ParseException {
   RootEnumeration n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   ExceptionSpec n8;
   NodeOptional n9 = new NodeOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   AdditionalEnumeration n13;
    n0 = RootEnumeration();
    if (jj_2_102(8)) {
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA_TKN);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n6 = jj_consume_token(ELLIPSIS_TKN);
                          n5 = JTBToolkit.makeNodeToken(n6);
        n2.addNode(n5);
        n1.addNode(n2);
    } else {
      ;
    }
    if (jj_2_103(8)) {
      n8 = ExceptionSpec();
        n7.addNode(n8);
    } else {
      ;
    }
    if (jj_2_104(8)) {
        n10 = new NodeSequence(2);
      n12 = jj_consume_token(COMMA_TKN);
                        n11 = JTBToolkit.makeNodeToken(n12);
        n10.addNode(n11);
      n13 = AdditionalEnumeration();
        n10.addNode(n13);
        n9.addNode(n10);
    } else {
      ;
    }
     {if (true) return new Enumerations(n0,n1,n7,n9);}
    throw new Error("Missing return statement in function");
  }

  final public RootEnumeration RootEnumeration() throws ParseException {
   ASNEnumeration n0;
    n0 = ASNEnumeration();
     {if (true) return new RootEnumeration(n0);}
    throw new Error("Missing return statement in function");
  }

  final public AdditionalEnumeration AdditionalEnumeration() throws ParseException {
   ASNEnumeration n0;
    n0 = ASNEnumeration();
     {if (true) return new AdditionalEnumeration(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ASNEnumeration ASNEnumeration() throws ParseException {
   EnumerationItem n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   EnumerationItem n5;
    n0 = EnumerationItem();
    label_9:
    while (true) {
      if (jj_2_105(8)) {
        ;
      } else {
        break label_9;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA_TKN);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = EnumerationItem();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ASNEnumeration(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public EnumerationItem EnumerationItem() throws ParseException {
   NodeChoice n0;
   NamedNumber n1;
   NodeToken n2;
   Token n3;
    if (jj_2_106(8)) {
      n1 = NamedNumber();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_107(8)) {
      n3 = jj_consume_token(IDENTIFIER);
                        n2 = JTBToolkit.makeNodeToken(n3);
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new EnumerationItem(n0);}
    throw new Error("Missing return statement in function");
  }

  final public EnumeratedValue EnumeratedValue() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new EnumeratedValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLEnumeratedValue XMLEnumeratedValue() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(LESSER_THAN_TKN);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(AMPERSAND_TKN);
                        n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(IDENTIFIER);
                     n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(XMLTAGTERMINATINGBRACKET_TKN);
                                       n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new XMLEnumeratedValue(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  final public RealType RealType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(REAL_TKN);
                   n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new RealType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public RealValue RealValue() throws ParseException {
   NodeChoice n0;
   NumericRealValue n1;
   SpecialRealValue n2;
    if (jj_2_108(8)) {
      n1 = NumericRealValue();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_109(8)) {
      n2 = SpecialRealValue();
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new RealValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NumericRealValue NumericRealValue() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   SequenceValue n8;
    if (jj_2_110(8)) {
      n2 = jj_consume_token(REALNUMBER);
                        n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_111(8)) {
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(MINUS_TKN);
                       n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(REALNUMBER);
                        n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n0 = new NodeChoice(n3, 1);
    } else if (jj_2_112(8)) {
      n8 = SequenceValue();
        n0 = new NodeChoice(n8, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new NumericRealValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SpecialRealValue SpecialRealValue() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    if (jj_2_113(8)) {
      n2 = jj_consume_token(PLUS_INFINITY_TKN);
                               n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_114(8)) {
      n4 = jj_consume_token(MINUS_INFINITY_TKN);
                                n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SpecialRealValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLRealValue XMLRealValue() throws ParseException {
   NodeChoice n0;
   XMLNumericRealValue n1;
   XMLSpecialRealValue n2;
    if (jj_2_115(8)) {
      n1 = XMLNumericRealValue();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_116(8)) {
      n2 = XMLSpecialRealValue();
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new XMLRealValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLNumericRealValue XMLNumericRealValue() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    if (jj_2_117(8)) {
      n2 = jj_consume_token(REALNUMBER);
                        n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_118(8)) {
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(MINUS_TKN);
                       n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(REALNUMBER);
                        n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n0 = new NodeChoice(n3, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new XMLNumericRealValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLSpecialRealValue XMLSpecialRealValue() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
    if (jj_2_119(8)) {
        n1 = new NodeSequence(4);
      n3 = jj_consume_token(LESSER_THAN_TKN);
                             n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(AMPERSAND_TKN);
                           n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n7 = jj_consume_token(PLUS_INFINITY_TKN);
                               n6 = JTBToolkit.makeNodeToken(n7);
        n1.addNode(n6);
      n9 = jj_consume_token(XMLTAGTERMINATINGBRACKET_TKN);
                                          n8 = JTBToolkit.makeNodeToken(n9);
        n1.addNode(n8);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_120(8)) {
        n10 = new NodeSequence(4);
      n12 = jj_consume_token(LESSER_THAN_TKN);
                              n11 = JTBToolkit.makeNodeToken(n12);
        n10.addNode(n11);
      n14 = jj_consume_token(AMPERSAND_TKN);
                            n13 = JTBToolkit.makeNodeToken(n14);
        n10.addNode(n13);
      n16 = jj_consume_token(MINUS_INFINITY_TKN);
                                 n15 = JTBToolkit.makeNodeToken(n16);
        n10.addNode(n15);
      n18 = jj_consume_token(XMLTAGTERMINATINGBRACKET_TKN);
                                           n17 = JTBToolkit.makeNodeToken(n18);
        n10.addNode(n17);
        n0 = new NodeChoice(n10, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new XMLSpecialRealValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BitStringType BitStringType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NamedBitList n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(BIT_TKN);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(STRING_TKN);
                     n2 = JTBToolkit.makeNodeToken(n3);
    if (jj_2_121(8)) {
        n5 = new NodeSequence(3);
      n7 = jj_consume_token(LEFT_BRACE_TKN);
                            n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = NamedBitList();
        n5.addNode(n8);
      n10 = jj_consume_token(RIGHT_BRACE_TKN);
                              n9 = JTBToolkit.makeNodeToken(n10);
        n5.addNode(n9);
        n4.addNode(n5);
    } else {
      ;
    }
     {if (true) return new BitStringType(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public NamedBitList NamedBitList() throws ParseException {
   NamedBit n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NamedBit n5;
    n0 = NamedBit();
    label_10:
    while (true) {
      if (jj_2_122(8)) {
        ;
      } else {
        break label_10;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA_TKN);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = NamedBit();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new NamedBitList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public NamedBit NamedBit() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   DefinedValue n15;
   NodeToken n16;
   Token n17;
    if (jj_2_123(8)) {
        n1 = new NodeSequence(4);
      n3 = jj_consume_token(IDENTIFIER);
                        n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(LEFT_PARENTHESIS_TKN);
                                  n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n7 = jj_consume_token(NUMBER);
                    n6 = JTBToolkit.makeNodeToken(n7);
        n1.addNode(n6);
      n9 = jj_consume_token(RIGHT_PARENTHESIS_TKN);
                                   n8 = JTBToolkit.makeNodeToken(n9);
        n1.addNode(n8);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_124(8)) {
        n10 = new NodeSequence(4);
      n12 = jj_consume_token(IDENTIFIER);
                         n11 = JTBToolkit.makeNodeToken(n12);
        n10.addNode(n11);
      n14 = jj_consume_token(LEFT_PARENTHESIS_TKN);
                                   n13 = JTBToolkit.makeNodeToken(n14);
        n10.addNode(n13);
      n15 = DefinedValue();
        n10.addNode(n15);
      n17 = jj_consume_token(RIGHT_PARENTHESIS_TKN);
                                    n16 = JTBToolkit.makeNodeToken(n17);
        n10.addNode(n16);
        n0 = new NodeChoice(n10, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new NamedBit(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BitStringValue BitStringValue() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   IdentifierList n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   Value n19;
    if (jj_2_125(8)) {
      n2 = jj_consume_token(BSTRING);
                     n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_126(8)) {
      n4 = jj_consume_token(HSTRING);
                     n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
    } else if (jj_2_127(8)) {
        n5 = new NodeSequence(3);
      n7 = jj_consume_token(LEFT_BRACE_TKN);
                            n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = IdentifierList();
        n5.addNode(n8);
      n10 = jj_consume_token(RIGHT_BRACE_TKN);
                              n9 = JTBToolkit.makeNodeToken(n10);
        n5.addNode(n9);
        n0 = new NodeChoice(n5, 2);
    } else if (jj_2_128(8)) {
        n11 = new NodeSequence(2);
      n13 = jj_consume_token(LEFT_BRACE_TKN);
                             n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
      n15 = jj_consume_token(RIGHT_BRACE_TKN);
                              n14 = JTBToolkit.makeNodeToken(n15);
        n11.addNode(n14);
        n0 = new NodeChoice(n11, 3);
    } else if (jj_2_129(8)) {
        n16 = new NodeSequence(2);
      n18 = jj_consume_token(CONTAINING_TKN);
                             n17 = JTBToolkit.makeNodeToken(n18);
        n16.addNode(n17);
      n19 = Value();
        n16.addNode(n19);
        n0 = new NodeChoice(n16, 4);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new BitStringValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IdentifierList IdentifierList() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    label_11:
    while (true) {
      if (jj_2_130(8)) {
        ;
      } else {
        break label_11;
      }
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(COMMA_TKN);
                       n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(IDENTIFIER);
                        n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
     {if (true) return new IdentifierList(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public XMLBitStringValue XMLBitStringValue() throws ParseException {
   NodeChoice n0;
   XMLTypedValue n1;
   NodeToken n2;
   Token n3;
   XMLIdentifierList n4;
    if (jj_2_131(8)) {
      n1 = XMLTypedValue();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_132(8)) {
      n3 = jj_consume_token(CSTRING);
                     n2 = JTBToolkit.makeNodeToken(n3);
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_133(8)) {
      n4 = XMLIdentifierList();
        n0 = new NodeChoice(n4, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new XMLBitStringValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLIdentifierList XMLIdentifierList() throws ParseException {
   NodeList n0 = new NodeList();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
    label_12:
    while (true) {
        n1 = new NodeSequence(4);
      n3 = jj_consume_token(LESSER_THAN_TKN);
                             n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(AMPERSAND_TKN);
                           n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n7 = jj_consume_token(IDENTIFIER);
                        n6 = JTBToolkit.makeNodeToken(n7);
        n1.addNode(n6);
      n9 = jj_consume_token(XMLTAGTERMINATINGBRACKET_TKN);
                                          n8 = JTBToolkit.makeNodeToken(n9);
        n1.addNode(n8);
        n0.addNode(n1);
      if (jj_2_134(8)) {
        ;
      } else {
        break label_12;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new XMLIdentifierList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public OctetStringType OctetStringType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(OCTET_TKN);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(STRING_TKN);
                     n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new OctetStringType(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public OctetStringValue OctetStringValue() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   Value n8;
    if (jj_2_135(8)) {
      n2 = jj_consume_token(BSTRING);
                     n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_136(8)) {
      n4 = jj_consume_token(HSTRING);
                     n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
    } else if (jj_2_137(8)) {
        n5 = new NodeSequence(2);
      n7 = jj_consume_token(CONTAINING_TKN);
                            n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = Value();
        n5.addNode(n8);
        n0 = new NodeChoice(n5, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new OctetStringValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLOctetStringValue XMLOctetStringValue() throws ParseException {
   NodeChoice n0;
   XMLTypedValue n1;
   NodeToken n2;
   Token n3;
    if (jj_2_138(8)) {
      n1 = XMLTypedValue();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_139(8)) {
      n3 = jj_consume_token(CSTRING);
                     n2 = JTBToolkit.makeNodeToken(n3);
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new XMLOctetStringValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NullType NullType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NULL_TKN);
                   n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new NullType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NullValue NullValue() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NULL_TKN);
                   n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new NullValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLNullValue XMLNullValue() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NULL_TKN);
                   n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new XMLNullValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SequenceType SequenceType() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   ExtensionAndException n6;
   NodeOptional n7 = new NodeOptional();
   OptionalExtensionMarker n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   ComponentTypeLists n16;
   NodeToken n17;
   Token n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
    if (jj_2_141(8)) {
        n1 = new NodeSequence(5);
      n3 = jj_consume_token(SEQUENCE_TKN);
                          n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(LEFT_BRACE_TKN);
                            n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n6 = ExtensionAndException();
        n1.addNode(n6);
      if (jj_2_140(8)) {
        n8 = OptionalExtensionMarker();
           n7.addNode(n8);
      } else {
        ;
      }
        n1.addNode(n7);
      n10 = jj_consume_token(RIGHT_BRACE_TKN);
                              n9 = JTBToolkit.makeNodeToken(n10);
        n1.addNode(n9);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_142(8)) {
        n11 = new NodeSequence(4);
      n13 = jj_consume_token(SEQUENCE_TKN);
                           n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
      n15 = jj_consume_token(LEFT_BRACE_TKN);
                             n14 = JTBToolkit.makeNodeToken(n15);
        n11.addNode(n14);
      n16 = ComponentTypeLists();
        n11.addNode(n16);
      n18 = jj_consume_token(RIGHT_BRACE_TKN);
                              n17 = JTBToolkit.makeNodeToken(n18);
        n11.addNode(n17);
        n0 = new NodeChoice(n11, 1);
    } else if (jj_2_143(8)) {
        n19 = new NodeSequence(3);
      n21 = jj_consume_token(SEQUENCE_TKN);
                           n20 = JTBToolkit.makeNodeToken(n21);
        n19.addNode(n20);
      n23 = jj_consume_token(LEFT_BRACE_TKN);
                             n22 = JTBToolkit.makeNodeToken(n23);
        n19.addNode(n22);
      n25 = jj_consume_token(RIGHT_BRACE_TKN);
                              n24 = JTBToolkit.makeNodeToken(n25);
        n19.addNode(n24);
        n0 = new NodeChoice(n19, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SequenceType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExtensionAndException ExtensionAndException() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   ExceptionSpec n3;
    n1 = jj_consume_token(ELLIPSIS_TKN);
                       n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_144(8)) {
      n3 = ExceptionSpec();
        n2.addNode(n3);
    } else {
      ;
    }
     {if (true) return new ExtensionAndException(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public OptionalExtensionMarker OptionalExtensionMarker() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(COMMA_TKN);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ELLIPSIS_TKN);
                       n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new OptionalExtensionMarker(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public ComponentTypeLists ComponentTypeLists() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   RootComponentTypeList n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   ExtensionAndException n7;
   NodeOptional n8;
   ExtensionAdditions n9;
   NodeOptional n10;
   NodeSequence n11;
   ExtensionEndMarker n12;
   NodeOptional n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   RootComponentTypeList n17;
   NodeSequence n18;
   ExtensionAndException n19;
   NodeOptional n20 = new NodeOptional();
   ExtensionAdditions n21;
   NodeOptional n22 = new NodeOptional();
   NodeSequence n23;
   ExtensionEndMarker n24;
   NodeOptional n25;
   NodeSequence n26;
   NodeToken n27;
   Token n28;
   RootComponentTypeList n29;
    if (jj_2_152(8)) {
        n1 = new NodeSequence(2);
      n2 = RootComponentTypeList();
        n1.addNode(n2);
      if (jj_2_148(8)) {
           n8 = new NodeOptional();
           n10 = new NodeOptional();
           n4 = new NodeSequence(4);
        n6 = jj_consume_token(COMMA_TKN);
                          n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
        n7 = ExtensionAndException();
           n4.addNode(n7);
        if (jj_2_145(8)) {
          n9 = ExtensionAdditions();
              n8.addNode(n9);
        } else {
          ;
        }
           n4.addNode(n8);
        if (jj_2_147(8)) {
              n13 = new NodeOptional();
              n11 = new NodeSequence(2);
          n12 = ExtensionEndMarker();
              n11.addNode(n12);
          if (jj_2_146(8)) {
                 n14 = new NodeSequence(2);
            n16 = jj_consume_token(COMMA_TKN);
                                 n15 = JTBToolkit.makeNodeToken(n16);
                 n14.addNode(n15);
            n17 = RootComponentTypeList();
                 n14.addNode(n17);
                 n13.addNode(n14);
          } else {
            ;
          }
              n11.addNode(n13);
              n10.addNode(n11);
        } else {
          ;
        }
           n4.addNode(n10);
           n3.addNode(n4);
      } else {
        ;
      }
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_153(8)) {
        n18 = new NodeSequence(3);
      n19 = ExtensionAndException();
        n18.addNode(n19);
      if (jj_2_149(8)) {
        n21 = ExtensionAdditions();
           n20.addNode(n21);
      } else {
        ;
      }
        n18.addNode(n20);
      if (jj_2_151(8)) {
           n25 = new NodeOptional();
           n23 = new NodeSequence(2);
        n24 = ExtensionEndMarker();
           n23.addNode(n24);
        if (jj_2_150(8)) {
              n26 = new NodeSequence(2);
          n28 = jj_consume_token(COMMA_TKN);
                              n27 = JTBToolkit.makeNodeToken(n28);
              n26.addNode(n27);
          n29 = RootComponentTypeList();
              n26.addNode(n29);
              n25.addNode(n26);
        } else {
          ;
        }
           n23.addNode(n25);
           n22.addNode(n23);
      } else {
        ;
      }
        n18.addNode(n22);
        n0 = new NodeChoice(n18, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ComponentTypeLists(n0);}
    throw new Error("Missing return statement in function");
  }

  final public RootComponentTypeList RootComponentTypeList() throws ParseException {
   ComponentTypeList n0;
    n0 = ComponentTypeList();
     {if (true) return new RootComponentTypeList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExtensionEndMarker ExtensionEndMarker() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(COMMA_TKN);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ELLIPSIS_TKN);
                       n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new ExtensionEndMarker(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public ExtensionAdditions ExtensionAdditions() throws ParseException {
   NodeToken n0;
   Token n1;
   ExtensionAdditionList n2;
    n1 = jj_consume_token(COMMA_TKN);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ExtensionAdditionList();
     {if (true) return new ExtensionAdditions(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public ExtensionAdditionList ExtensionAdditionList() throws ParseException {
   ExtensionAddition n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ExtensionAddition n5;
    n0 = ExtensionAddition();
    label_13:
    while (true) {
      if (jj_2_154(8)) {
        ;
      } else {
        break label_13;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA_TKN);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ExtensionAddition();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ExtensionAdditionList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ExtensionAddition ExtensionAddition() throws ParseException {
   NodeChoice n0;
   ComponentType n1;
   ExtensionAdditionGroup n2;
    if (jj_2_155(8)) {
      n1 = ComponentType();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_156(8)) {
      n2 = ExtensionAdditionGroup();
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ExtensionAddition(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExtensionAdditionGroup ExtensionAdditionGroup() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   VersionNumber n3;
   ComponentTypeList n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(VERSIONBRACKET_START_TKN);
                                   n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_157(8)) {
      n3 = VersionNumber();
        n2.addNode(n3);
    } else {
      ;
    }
    n4 = ComponentTypeList();
    n6 = jj_consume_token(VERSIONBRACKET_END_TKN);
                                 n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new ExtensionAdditionGroup(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public VersionNumber VersionNumber() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(NUMBER);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON_TKN);
                    n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new VersionNumber(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public ComponentTypeList ComponentTypeList() throws ParseException {
   ComponentType n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ComponentType n5;
    n0 = ComponentType();
    label_14:
    while (true) {
      if (jj_2_158(8)) {
        ;
      } else {
        break label_14;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA_TKN);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ComponentType();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ComponentTypeList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ComponentType ComponentType() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NamedType n2;
   NodeOptional n3 = new NodeOptional();
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   Value n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   Type n16;
    if (jj_2_162(8)) {
        n1 = new NodeSequence(2);
      n2 = NamedType();
        n1.addNode(n2);
      if (jj_2_161(8)) {
        if (jj_2_159(8)) {
          n6 = jj_consume_token(OPTIONAL_TKN);
                                n5 = JTBToolkit.makeNodeToken(n6);
              n4 = new NodeChoice(n5, 0);
        } else if (jj_2_160(8)) {
              n7 = new NodeSequence(2);
          n9 = jj_consume_token(DEFAULT_TKN);
                               n8 = JTBToolkit.makeNodeToken(n9);
              n7.addNode(n8);
          n10 = Value();
              n7.addNode(n10);
              n4 = new NodeChoice(n7, 1);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
           n3.addNode(n4);
      } else {
        ;
      }
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_163(8)) {
        n11 = new NodeSequence(3);
      n13 = jj_consume_token(COMPONENTS_TKN);
                             n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
      n15 = jj_consume_token(OF_TKN);
                     n14 = JTBToolkit.makeNodeToken(n15);
        n11.addNode(n14);
      n16 = Type();
        n11.addNode(n16);
        n0 = new NodeChoice(n11, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ComponentType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SequenceValue SequenceValue() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   ComponentValueList n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
    if (jj_2_164(8)) {
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(LEFT_BRACE_TKN);
                            n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = ComponentValueList();
        n1.addNode(n4);
      n6 = jj_consume_token(RIGHT_BRACE_TKN);
                             n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_165(8)) {
        n7 = new NodeSequence(2);
      n9 = jj_consume_token(LEFT_BRACE_TKN);
                            n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n11 = jj_consume_token(RIGHT_BRACE_TKN);
                              n10 = JTBToolkit.makeNodeToken(n11);
        n7.addNode(n10);
        n0 = new NodeChoice(n7, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SequenceValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ComponentValueList ComponentValueList() throws ParseException {
   NamedValue n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NamedValue n5;
    n0 = NamedValue();
    label_15:
    while (true) {
      if (jj_2_166(8)) {
        ;
      } else {
        break label_15;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA_TKN);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = NamedValue();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ComponentValueList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public XMLSequenceValue XMLSequenceValue() throws ParseException {
   XMLComponentValueList n0;
    n0 = XMLComponentValueList();
     {if (true) return new XMLSequenceValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLComponentValueList XMLComponentValueList() throws ParseException {
   NodeList n0 = new NodeList();
   XMLNamedValue n1;
    label_16:
    while (true) {
      n1 = XMLNamedValue();
        n0.addNode(n1);
      if (jj_2_167(8)) {
        ;
      } else {
        break label_16;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new XMLComponentValueList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SequenceOfType SequenceOfType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TypeOrNamedType n4;
    n1 = jj_consume_token(SEQUENCE_TKN);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(OF_TKN);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n4 = TypeOrNamedType();
     {if (true) return new SequenceOfType(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public SequenceOfValue SequenceOfValue() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   ValueList n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NamedValueList n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
    if (jj_2_168(8)) {
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(LEFT_BRACE_TKN);
                            n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = ValueList();
        n1.addNode(n4);
      n6 = jj_consume_token(RIGHT_BRACE_TKN);
                             n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_169(8)) {
        n7 = new NodeSequence(3);
      n9 = jj_consume_token(LEFT_BRACE_TKN);
                            n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n10 = NamedValueList();
        n7.addNode(n10);
      n12 = jj_consume_token(RIGHT_BRACE_TKN);
                              n11 = JTBToolkit.makeNodeToken(n12);
        n7.addNode(n11);
        n0 = new NodeChoice(n7, 1);
    } else if (jj_2_170(8)) {
        n13 = new NodeSequence(2);
      n15 = jj_consume_token(LEFT_BRACE_TKN);
                             n14 = JTBToolkit.makeNodeToken(n15);
        n13.addNode(n14);
      n17 = jj_consume_token(RIGHT_BRACE_TKN);
                              n16 = JTBToolkit.makeNodeToken(n17);
        n13.addNode(n16);
        n0 = new NodeChoice(n13, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SequenceOfValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ValueList ValueList() throws ParseException {
   Value n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Value n5;
    n0 = Value();
    label_17:
    while (true) {
      if (jj_2_171(8)) {
        ;
      } else {
        break label_17;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA_TKN);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Value();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ValueList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public XMLSequenceOfValue XMLSequenceOfValue() throws ParseException {
   NodeChoice n0;
   XMLValueList n1;
   XMLDelimitedItemList n2;
   XMLSpaceSeparatedList n3;
    if (jj_2_172(8)) {
      n1 = XMLValueList();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_173(8)) {
      n2 = XMLDelimitedItemList();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_174(8)) {
      n3 = XMLSpaceSeparatedList();
        n0 = new NodeChoice(n3, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new XMLSequenceOfValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLValueList XMLValueList() throws ParseException {
   NodeList n0 = new NodeList();
   XMLValueOrEmpty n1;
    label_18:
    while (true) {
      n1 = XMLValueOrEmpty();
        n0.addNode(n1);
      if (jj_2_175(8)) {
        ;
      } else {
        break label_18;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new XMLValueList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLValueOrEmpty XMLValueOrEmpty() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NonParameterizedTypeName n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(LESSER_THAN_TKN);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(AMPERSAND_TKN);
                        n2 = JTBToolkit.makeNodeToken(n3);
    n4 = NonParameterizedTypeName();
    n6 = jj_consume_token(XMLTAGTERMINATINGBRACKET_TKN);
                                       n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new XMLValueOrEmpty(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public XMLSpaceSeparatedList XMLSpaceSeparatedList() throws ParseException {
   NodeList n0 = new NodeList();
   XMLValueOrEmpty n1;
    label_19:
    while (true) {
      n1 = XMLValueOrEmpty();
        n0.addNode(n1);
      if (jj_2_176(8)) {
        ;
      } else {
        break label_19;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new XMLSpaceSeparatedList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLDelimitedItemList XMLDelimitedItemList() throws ParseException {
   NodeChoice n0;
   XMLDelimitedItem n1;
   NodeSequence n2;
   XMLDelimitedItem n3;
   XMLDelimitedItemList n4;
    if (jj_2_177(8)) {
      n1 = XMLDelimitedItem();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_178(8)) {
        n2 = new NodeSequence(2);
      n3 = XMLDelimitedItem();
        n2.addNode(n3);
      n4 = XMLDelimitedItemList();
        n2.addNode(n4);
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new XMLDelimitedItemList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLDelimitedItem XMLDelimitedItem() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NonParameterizedTypeName n6;
   NodeToken n7;
   Token n8;
   XMLValue n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NonParameterizedTypeName n14;
   NodeToken n15;
   Token n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   XMLValue n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
    if (jj_2_179(8)) {
        n1 = new NodeSequence(9);
      n3 = jj_consume_token(LESSER_THAN_TKN);
                             n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(AMPERSAND_TKN);
                           n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n6 = NonParameterizedTypeName();
        n1.addNode(n6);
      n8 = jj_consume_token(GREATER_THAN_TKN);
                              n7 = JTBToolkit.makeNodeToken(n8);
        n1.addNode(n7);
      n9 = XMLValue();
        n1.addNode(n9);
      n11 = jj_consume_token(XMLENDTAGBRACKET_TKN);
                                   n10 = JTBToolkit.makeNodeToken(n11);
        n1.addNode(n10);
      n13 = jj_consume_token(AMPERSAND_TKN);
                            n12 = JTBToolkit.makeNodeToken(n13);
        n1.addNode(n12);
      n14 = NonParameterizedTypeName();
        n1.addNode(n14);
      n16 = jj_consume_token(GREATER_THAN_TKN);
                               n15 = JTBToolkit.makeNodeToken(n16);
        n1.addNode(n15);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_180(8)) {
        n17 = new NodeSequence(9);
      n19 = jj_consume_token(LESSER_THAN_TKN);
                              n18 = JTBToolkit.makeNodeToken(n19);
        n17.addNode(n18);
      n21 = jj_consume_token(AMPERSAND_TKN);
                            n20 = JTBToolkit.makeNodeToken(n21);
        n17.addNode(n20);
      n23 = jj_consume_token(IDENTIFIER);
                         n22 = JTBToolkit.makeNodeToken(n23);
        n17.addNode(n22);
      n25 = jj_consume_token(GREATER_THAN_TKN);
                               n24 = JTBToolkit.makeNodeToken(n25);
        n17.addNode(n24);
      n26 = XMLValue();
        n17.addNode(n26);
      n28 = jj_consume_token(XMLENDTAGBRACKET_TKN);
                                   n27 = JTBToolkit.makeNodeToken(n28);
        n17.addNode(n27);
      n30 = jj_consume_token(AMPERSAND_TKN);
                            n29 = JTBToolkit.makeNodeToken(n30);
        n17.addNode(n29);
      n32 = jj_consume_token(IDENTIFIER);
                         n31 = JTBToolkit.makeNodeToken(n32);
        n17.addNode(n31);
      n34 = jj_consume_token(GREATER_THAN_TKN);
                               n33 = JTBToolkit.makeNodeToken(n34);
        n17.addNode(n33);
        n0 = new NodeChoice(n17, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new XMLDelimitedItem(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SetType SetType() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   ExtensionAndException n13;
   NodeOptional n14 = new NodeOptional();
   OptionalExtensionMarker n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   ComponentTypeLists n23;
   NodeToken n24;
   Token n25;
    if (jj_2_182(8)) {
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(SET_TKN);
                     n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(LEFT_BRACE_TKN);
                            n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n7 = jj_consume_token(RIGHT_BRACE_TKN);
                             n6 = JTBToolkit.makeNodeToken(n7);
        n1.addNode(n6);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_183(8)) {
        n8 = new NodeSequence(5);
      n10 = jj_consume_token(SET_TKN);
                      n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
      n12 = jj_consume_token(LEFT_BRACE_TKN);
                             n11 = JTBToolkit.makeNodeToken(n12);
        n8.addNode(n11);
      n13 = ExtensionAndException();
        n8.addNode(n13);
      if (jj_2_181(8)) {
        n15 = OptionalExtensionMarker();
           n14.addNode(n15);
      } else {
        ;
      }
        n8.addNode(n14);
      n17 = jj_consume_token(RIGHT_BRACE_TKN);
                              n16 = JTBToolkit.makeNodeToken(n17);
        n8.addNode(n16);
        n0 = new NodeChoice(n8, 1);
    } else if (jj_2_184(8)) {
        n18 = new NodeSequence(4);
      n20 = jj_consume_token(SET_TKN);
                      n19 = JTBToolkit.makeNodeToken(n20);
        n18.addNode(n19);
      n22 = jj_consume_token(LEFT_BRACE_TKN);
                             n21 = JTBToolkit.makeNodeToken(n22);
        n18.addNode(n21);
      n23 = ComponentTypeLists();
        n18.addNode(n23);
      n25 = jj_consume_token(RIGHT_BRACE_TKN);
                              n24 = JTBToolkit.makeNodeToken(n25);
        n18.addNode(n24);
        n0 = new NodeChoice(n18, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SetType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SetValue SetValue() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   ComponentValueList n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
    if (jj_2_185(8)) {
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(LEFT_BRACE_TKN);
                            n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = ComponentValueList();
        n1.addNode(n4);
      n6 = jj_consume_token(RIGHT_BRACE_TKN);
                             n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_186(8)) {
        n7 = new NodeSequence(2);
      n9 = jj_consume_token(LEFT_BRACE_TKN);
                            n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n11 = jj_consume_token(RIGHT_BRACE_TKN);
                              n10 = JTBToolkit.makeNodeToken(n11);
        n7.addNode(n10);
        n0 = new NodeChoice(n7, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SetValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLSetValue XMLSetValue() throws ParseException {
   XMLComponentValueList n0;
    n0 = XMLComponentValueList();
     {if (true) return new XMLSetValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SetOfType SetOfType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TypeOrNamedType n4;
    n1 = jj_consume_token(SET_TKN);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(OF_TKN);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n4 = TypeOrNamedType();
     {if (true) return new SetOfType(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public SetOfValue SetOfValue() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   ValueList n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NamedValueList n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
    if (jj_2_187(8)) {
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(LEFT_BRACE_TKN);
                            n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = ValueList();
        n1.addNode(n4);
      n6 = jj_consume_token(RIGHT_BRACE_TKN);
                             n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_188(8)) {
        n7 = new NodeSequence(3);
      n9 = jj_consume_token(LEFT_BRACE_TKN);
                            n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n10 = NamedValueList();
        n7.addNode(n10);
      n12 = jj_consume_token(RIGHT_BRACE_TKN);
                              n11 = JTBToolkit.makeNodeToken(n12);
        n7.addNode(n11);
        n0 = new NodeChoice(n7, 1);
    } else if (jj_2_189(8)) {
        n13 = new NodeSequence(2);
      n15 = jj_consume_token(LEFT_BRACE_TKN);
                             n14 = JTBToolkit.makeNodeToken(n15);
        n13.addNode(n14);
      n17 = jj_consume_token(RIGHT_BRACE_TKN);
                              n16 = JTBToolkit.makeNodeToken(n17);
        n13.addNode(n16);
        n0 = new NodeChoice(n13, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SetOfValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLSetOfValue XMLSetOfValue() throws ParseException {
   NodeChoice n0;
   XMLValueList n1;
   XMLDelimitedItemList n2;
   XMLSpaceSeparatedList n3;
    if (jj_2_190(8)) {
      n1 = XMLValueList();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_191(8)) {
      n2 = XMLDelimitedItemList();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_192(8)) {
      n3 = XMLSpaceSeparatedList();
        n0 = new NodeChoice(n3, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new XMLSetOfValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ChoiceType ChoiceType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   AlternativeTypeLists n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(CHOICE_TKN);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LEFT_BRACE_TKN);
                         n2 = JTBToolkit.makeNodeToken(n3);
    n4 = AlternativeTypeLists();
    n6 = jj_consume_token(RIGHT_BRACE_TKN);
                          n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new ChoiceType(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public AlternativeTypeLists AlternativeTypeLists() throws ParseException {
   RootAlternativeTypeList n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ExtensionAndException n5;
   NodeOptional n6;
   ExtensionAdditionAlternatives n7;
   NodeOptional n8;
   OptionalExtensionMarker n9;
    n0 = RootAlternativeTypeList();
    if (jj_2_195(8)) {
        n6 = new NodeOptional();
        n8 = new NodeOptional();
        n2 = new NodeSequence(4);
      n4 = jj_consume_token(COMMA_TKN);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ExtensionAndException();
        n2.addNode(n5);
      if (jj_2_193(8)) {
        n7 = ExtensionAdditionAlternatives();
           n6.addNode(n7);
      } else {
        ;
      }
        n2.addNode(n6);
      if (jj_2_194(8)) {
        n9 = OptionalExtensionMarker();
           n8.addNode(n9);
      } else {
        ;
      }
        n2.addNode(n8);
        n1.addNode(n2);
    } else {
      ;
    }
     {if (true) return new AlternativeTypeLists(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public RootAlternativeTypeList RootAlternativeTypeList() throws ParseException {
   AlternativeTypeList n0;
    n0 = AlternativeTypeList();
     {if (true) return new RootAlternativeTypeList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExtensionAdditionAlternatives ExtensionAdditionAlternatives() throws ParseException {
   NodeToken n0;
   Token n1;
   ExtensionAdditionAlternativesList n2;
    n1 = jj_consume_token(COMMA_TKN);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ExtensionAdditionAlternativesList();
     {if (true) return new ExtensionAdditionAlternatives(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public ExtensionAdditionAlternativesList ExtensionAdditionAlternativesList() throws ParseException {
   ExtensionAdditionAlternative n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ExtensionAdditionAlternative n5;
    n0 = ExtensionAdditionAlternative();
    label_20:
    while (true) {
      if (jj_2_196(8)) {
        ;
      } else {
        break label_20;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA_TKN);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ExtensionAdditionAlternative();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ExtensionAdditionAlternativesList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ExtensionAdditionAlternative ExtensionAdditionAlternative() throws ParseException {
   NodeChoice n0;
   ExtensionAdditionAlternativesGroup n1;
   NamedType n2;
    if (jj_2_197(8)) {
      n1 = ExtensionAdditionAlternativesGroup();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_198(8)) {
      n2 = NamedType();
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ExtensionAdditionAlternative(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExtensionAdditionAlternativesGroup ExtensionAdditionAlternativesGroup() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   VersionNumber n3;
   AlternativeTypeList n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(VERSIONBRACKET_START_TKN);
                                   n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_199(8)) {
      n3 = VersionNumber();
        n2.addNode(n3);
    } else {
      ;
    }
    n4 = AlternativeTypeList();
    n6 = jj_consume_token(VERSIONBRACKET_END_TKN);
                                 n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new ExtensionAdditionAlternativesGroup(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public AlternativeTypeList AlternativeTypeList() throws ParseException {
   NamedType n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NamedType n5;
    n0 = NamedType();
    label_21:
    while (true) {
      if (jj_2_200(8)) {
        ;
      } else {
        break label_21;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA_TKN);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = NamedType();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new AlternativeTypeList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ChoiceValue ChoiceValue() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Value n4;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON_TKN);
                    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Value();
     {if (true) return new ChoiceValue(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public XMLChoiceValue XMLChoiceValue() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   XMLValue n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
    n1 = jj_consume_token(LESSER_THAN_TKN);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(AMPERSAND_TKN);
                        n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(IDENTIFIER);
                     n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(GREATER_THAN_TKN);
                           n6 = JTBToolkit.makeNodeToken(n7);
    n8 = XMLValue();
    n10 = jj_consume_token(XMLENDTAGBRACKET_TKN);
                                n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(AMPERSAND_TKN);
                         n11 = JTBToolkit.makeNodeToken(n12);
    n14 = jj_consume_token(IDENTIFIER);
                      n13 = JTBToolkit.makeNodeToken(n14);
    n16 = jj_consume_token(GREATER_THAN_TKN);
                            n15 = JTBToolkit.makeNodeToken(n16);
     {if (true) return new XMLChoiceValue(n0,n2,n4,n6,n8,n9,n11,n13,n15);}
    throw new Error("Missing return statement in function");
  }

  final public SelectionType SelectionType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Type n4;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LESSER_THAN_TKN);
                          n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Type();
     {if (true) return new SelectionType(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public TaggedType TaggedType() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   Tag n2;
   NodeToken n3;
   Token n4;
   Type n5;
   NodeSequence n6;
   Tag n7;
   NodeToken n8;
   Token n9;
   Type n10;
   NodeSequence n11;
   Tag n12;
   Type n13;
    if (jj_2_201(8)) {
        n1 = new NodeSequence(3);
      n2 = Tag();
        n1.addNode(n2);
      n4 = jj_consume_token(IMPLICIT_TKN);
                          n3 = JTBToolkit.makeNodeToken(n4);
        n1.addNode(n3);
      n5 = Type();
        n1.addNode(n5);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_202(8)) {
        n6 = new NodeSequence(3);
      n7 = Tag();
        n6.addNode(n7);
      n9 = jj_consume_token(EXPLICIT_TKN);
                          n8 = JTBToolkit.makeNodeToken(n9);
        n6.addNode(n8);
      n10 = Type();
        n6.addNode(n10);
        n0 = new NodeChoice(n6, 1);
    } else if (jj_2_203(8)) {
        n11 = new NodeSequence(2);
      n12 = Tag();
        n11.addNode(n12);
      n13 = Type();
        n11.addNode(n13);
        n0 = new NodeChoice(n11, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TaggedType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Tag Tag() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   TagClass n3;
   ClassNumber n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(LEFT_BRACKET_TKN);
                           n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_204(8)) {
      n3 = TagClass();
        n2.addNode(n3);
    } else {
      ;
    }
    n4 = ClassNumber();
    n6 = jj_consume_token(RIGHT_BRACKET_TKN);
                            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Tag(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public ClassNumber ClassNumber() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   DefinedValue n3;
    if (jj_2_205(8)) {
      n2 = jj_consume_token(NUMBER);
                    n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_206(8)) {
      n3 = DefinedValue();
        n0 = new NodeChoice(n3, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ClassNumber(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TagClass TagClass() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    if (jj_2_207(8)) {
      n2 = jj_consume_token(UNIVERSAL_TKN);
                           n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_208(8)) {
      n4 = jj_consume_token(APPLICATION_TKN);
                             n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
    } else if (jj_2_209(8)) {
      n6 = jj_consume_token(PRIVATE_TKN);
                         n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TagClass(n0);}
    throw new Error("Missing return statement in function");
  }

  final public EmbeddedPDVType EmbeddedPDVType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(EMBEDDED_TKN);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PDV_TKN);
                  n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new EmbeddedPDVType(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public EmbeddedPDVValue EmbeddedPDVValue() throws ParseException {
   SequenceValue n0;
    n0 = SequenceValue();
     {if (true) return new EmbeddedPDVValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLEmbeddedPDVValue XMLEmbeddedPDVValue() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   XMLSequenceValue n1;
    if (jj_2_210(8)) {
      n1 = XMLSequenceValue();
        n0.addNode(n1);
    } else {
      ;
    }
     {if (true) return new XMLEmbeddedPDVValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExternalType ExternalType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(EXTERNAL_TKN);
                       n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ExternalType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExternalValue ExternalValue() throws ParseException {
   SequenceValue n0;
    n0 = SequenceValue();
     {if (true) return new ExternalValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLExternalValue XMLExternalValue() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   XMLSequenceValue n1;
    if (jj_2_211(8)) {
      n1 = XMLSequenceValue();
        n0.addNode(n1);
    } else {
      ;
    }
     {if (true) return new XMLExternalValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ObjectIdentifierType ObjectIdentifierType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(OBJECT_TKN);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(IDENTIFIER_TKN);
                         n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new ObjectIdentifierType(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public ObjectIdentifierValue ObjectIdentifierValue() throws ParseException {
   NodeToken n0;
   Token n1;
   ObjIdComponentsList n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(LEFT_BRACE_TKN);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ObjIdComponentsList();
    n4 = jj_consume_token(RIGHT_BRACE_TKN);
                          n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new ObjectIdentifierValue(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public ObjIdComponentsList ObjIdComponentsList() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   ObjIdComponents n1;
    label_22:
    while (true) {
      if (jj_2_212(8)) {
        ;
      } else {
        break label_22;
      }
      n1 = ObjIdComponents();
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
     {if (true) return new ObjIdComponentsList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ObjIdComponents ObjIdComponents() throws ParseException {
   NodeChoice n0;
   NameAndNumberForm n1;
   NameForm n2;
   NumberForm n3;
    if (jj_2_213(8)) {
      n1 = NameAndNumberForm();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_214(8)) {
      n2 = NameForm();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_215(8)) {
      n3 = NumberForm();
        n0 = new NodeChoice(n3, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ObjIdComponents(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NameForm NameForm() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new NameForm(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NumberForm NumberForm() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   DefinedValue n3;
    if (jj_2_216(8)) {
      n2 = jj_consume_token(NUMBER);
                    n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_217(8)) {
      n3 = DefinedValue();
        n0 = new NodeChoice(n3, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new NumberForm(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NameAndNumberForm NameAndNumberForm() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NumberForm n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LEFT_PARENTHESIS_TKN);
                               n2 = JTBToolkit.makeNodeToken(n3);
    n4 = NumberForm();
    n6 = jj_consume_token(RIGHT_PARENTHESIS_TKN);
                                n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new NameAndNumberForm(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public XMLObjectIdentifierValue XMLObjectIdentifierValue() throws ParseException {
   XMLObjIdComponentList n0;
    n0 = XMLObjIdComponentList();
     {if (true) return new XMLObjectIdentifierValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLObjIdComponentList XMLObjIdComponentList() throws ParseException {
   NodeChoice n0;
   XMLObjIdComponent n1;
   NodeSequence n2;
   XMLObjIdComponent n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   XMLObjIdComponentList n10;
    if (jj_2_218(8)) {
      n1 = XMLObjIdComponent();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_219(8)) {
        n2 = new NodeSequence(5);
      n3 = XMLObjIdComponent();
        n2.addNode(n3);
      n5 = jj_consume_token(AMPERSAND_TKN);
                           n4 = JTBToolkit.makeNodeToken(n5);
        n2.addNode(n4);
      n7 = jj_consume_token(DOT_TKN);
                     n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
      n9 = jj_consume_token(AMPERSAND_TKN);
                           n8 = JTBToolkit.makeNodeToken(n9);
        n2.addNode(n8);
      n10 = XMLObjIdComponentList();
        n2.addNode(n10);
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new XMLObjIdComponentList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLObjIdComponent XMLObjIdComponent() throws ParseException {
   NodeChoice n0;
   NameForm n1;
   XMLNumberForm n2;
   XMLNameAndNumberForm n3;
    if (jj_2_220(8)) {
      n1 = NameForm();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_221(8)) {
      n2 = XMLNumberForm();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_222(8)) {
      n3 = XMLNameAndNumberForm();
        n0 = new NodeChoice(n3, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new XMLObjIdComponent(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLNumberForm XMLNumberForm() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NUMBER);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new XMLNumberForm(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLNameAndNumberForm XMLNameAndNumberForm() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   XMLNumberForm n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(AMPERSAND_TKN);
                        n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LEFT_PARENTHESIS_TKN);
                               n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(AMPERSAND_TKN);
                        n6 = JTBToolkit.makeNodeToken(n7);
    n8 = XMLNumberForm();
    n10 = jj_consume_token(AMPERSAND_TKN);
                         n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(RIGHT_PARENTHESIS_TKN);
                                 n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new XMLNameAndNumberForm(n0,n2,n4,n6,n8,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  final public RelativeOIDType RelativeOIDType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(RELATIVE_OID_TKN);
                           n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new RelativeOIDType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public RelativeOIDValue RelativeOIDValue() throws ParseException {
   NodeToken n0;
   Token n1;
   RelativeOIDComponentsList n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(LEFT_BRACE_TKN);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n2 = RelativeOIDComponentsList();
    n4 = jj_consume_token(RIGHT_BRACE_TKN);
                          n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new RelativeOIDValue(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public RelativeOIDComponentsList RelativeOIDComponentsList() throws ParseException {
   NodeChoice n0;
   RelativeOIDComponents n1;
   NodeSequence n2;
   RelativeOIDComponents n3;
   RelativeOIDComponentsList n4;
    if (jj_2_223(8)) {
      n1 = RelativeOIDComponents();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_224(8)) {
        n2 = new NodeSequence(2);
      n3 = RelativeOIDComponents();
        n2.addNode(n3);
      n4 = RelativeOIDComponentsList();
        n2.addNode(n4);
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new RelativeOIDComponentsList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public RelativeOIDComponents RelativeOIDComponents() throws ParseException {
   NodeChoice n0;
   NumberForm n1;
   NameAndNumberForm n2;
   DefinedValue n3;
    if (jj_2_225(8)) {
      n1 = NumberForm();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_226(8)) {
      n2 = NameAndNumberForm();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_227(8)) {
      n3 = DefinedValue();
        n0 = new NodeChoice(n3, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new RelativeOIDComponents(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLRelativeOIDValue XMLRelativeOIDValue() throws ParseException {
   XMLRelativeOIDComponentList n0;
    n0 = XMLRelativeOIDComponentList();
     {if (true) return new XMLRelativeOIDValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLRelativeOIDComponentList XMLRelativeOIDComponentList() throws ParseException {
   NodeChoice n0;
   XMLRelativeOIDComponent n1;
   NodeSequence n2;
   XMLRelativeOIDComponent n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   XMLRelativeOIDComponentList n10;
    if (jj_2_228(8)) {
      n1 = XMLRelativeOIDComponent();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_229(8)) {
        n2 = new NodeSequence(5);
      n3 = XMLRelativeOIDComponent();
        n2.addNode(n3);
      n5 = jj_consume_token(AMPERSAND_TKN);
                           n4 = JTBToolkit.makeNodeToken(n5);
        n2.addNode(n4);
      n7 = jj_consume_token(DOT_TKN);
                     n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
      n9 = jj_consume_token(AMPERSAND_TKN);
                           n8 = JTBToolkit.makeNodeToken(n9);
        n2.addNode(n8);
      n10 = XMLRelativeOIDComponentList();
        n2.addNode(n10);
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new XMLRelativeOIDComponentList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLRelativeOIDComponent XMLRelativeOIDComponent() throws ParseException {
   NodeChoice n0;
   XMLNumberForm n1;
   XMLNameAndNumberForm n2;
    if (jj_2_230(8)) {
      n1 = XMLNumberForm();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_231(8)) {
      n2 = XMLNameAndNumberForm();
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new XMLRelativeOIDComponent(n0);}
    throw new Error("Missing return statement in function");
  }

  final public CharacterStringType CharacterStringType() throws ParseException {
   NodeChoice n0;
   RestrictedCharacterStringType n1;
   UnrestrictedCharacterStringType n2;
    if (jj_2_232(8)) {
      n1 = RestrictedCharacterStringType();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_233(8)) {
      n2 = UnrestrictedCharacterStringType();
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new CharacterStringType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public RestrictedCharacterStringType RestrictedCharacterStringType() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
    if (jj_2_234(8)) {
      n2 = jj_consume_token(BMPSTRING_TKN);
                           n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_235(8)) {
      n4 = jj_consume_token(GENERALSTRING_TKN);
                               n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
    } else if (jj_2_236(8)) {
      n6 = jj_consume_token(GRAPHICSTRING_TKN);
                               n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
    } else if (jj_2_237(8)) {
      n8 = jj_consume_token(IA5STRING_TKN);
                           n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
    } else if (jj_2_238(8)) {
      n10 = jj_consume_token(ISO646STRING_TKN);
                               n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
    } else if (jj_2_239(8)) {
      n12 = jj_consume_token(NUMERICSTRING_TKN);
                                n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
    } else if (jj_2_240(8)) {
      n14 = jj_consume_token(PRINTABLESTRING_TKN);
                                  n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
    } else if (jj_2_241(8)) {
      n16 = jj_consume_token(TELETEXSTRING_TKN);
                                n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
    } else if (jj_2_242(8)) {
      n18 = jj_consume_token(T61STRING_TKN);
                            n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8);
    } else if (jj_2_243(8)) {
      n20 = jj_consume_token(UNIVERSALSTRING_TKN);
                                  n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9);
    } else if (jj_2_244(8)) {
      n22 = jj_consume_token(UTF8STRING_TKN);
                             n21 = JTBToolkit.makeNodeToken(n22);
        n0 = new NodeChoice(n21, 10);
    } else if (jj_2_245(8)) {
      n24 = jj_consume_token(VIDEOTEXSTRING_TKN);
                                 n23 = JTBToolkit.makeNodeToken(n24);
        n0 = new NodeChoice(n23, 11);
    } else if (jj_2_246(8)) {
      n26 = jj_consume_token(VISIBLESTRING_TKN);
                                n25 = JTBToolkit.makeNodeToken(n26);
        n0 = new NodeChoice(n25, 12);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new RestrictedCharacterStringType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public RestrictedCharacterStringValue RestrictedCharacterStringValue() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   CharacterStringList n3;
   Quadruple n4;
   Tuple n5;
    if (jj_2_247(8)) {
      n2 = jj_consume_token(CSTRING);
                     n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_248(8)) {
      n3 = CharacterStringList();
        n0 = new NodeChoice(n3, 1);
    } else if (jj_2_249(8)) {
      n4 = Quadruple();
        n0 = new NodeChoice(n4, 2);
    } else if (jj_2_250(8)) {
      n5 = Tuple();
        n0 = new NodeChoice(n5, 3);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new RestrictedCharacterStringValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public CharacterStringList CharacterStringList() throws ParseException {
   NodeToken n0;
   Token n1;
   CharSyms n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(LEFT_BRACE_TKN);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n2 = CharSyms();
    n4 = jj_consume_token(RIGHT_BRACE_TKN);
                          n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new CharacterStringList(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public CharSyms CharSyms() throws ParseException {
   CharsDefn n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   CharsDefn n5;
    n0 = CharsDefn();
    label_23:
    while (true) {
      if (jj_2_251(8)) {
        ;
      } else {
        break label_23;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA_TKN);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = CharsDefn();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new CharSyms(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public CharsDefn CharsDefn() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   Quadruple n3;
   Tuple n4;
   DefinedValue n5;
    if (jj_2_252(8)) {
      n2 = jj_consume_token(CSTRING);
                     n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_253(8)) {
      n3 = Quadruple();
        n0 = new NodeChoice(n3, 1);
    } else if (jj_2_254(8)) {
      n4 = Tuple();
        n0 = new NodeChoice(n4, 2);
    } else if (jj_2_255(8)) {
      n5 = DefinedValue();
        n0 = new NodeChoice(n5, 3);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new CharsDefn(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Quadruple Quadruple() throws ParseException {
   NodeToken n0;
   Token n1;
   Group n2;
   NodeToken n3;
   Token n4;
   Plane n5;
   NodeToken n6;
   Token n7;
   Row n8;
   NodeToken n9;
   Token n10;
   Cell n11;
   NodeToken n12;
   Token n13;
    n1 = jj_consume_token(LEFT_BRACE_TKN);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Group();
    n4 = jj_consume_token(COMMA_TKN);
                    n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Plane();
    n7 = jj_consume_token(COMMA_TKN);
                    n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Row();
    n10 = jj_consume_token(COMMA_TKN);
                     n9 = JTBToolkit.makeNodeToken(n10);
    n11 = Cell();
    n13 = jj_consume_token(RIGHT_BRACE_TKN);
                           n12 = JTBToolkit.makeNodeToken(n13);
     {if (true) return new Quadruple(n0,n2,n3,n5,n6,n8,n9,n11,n12);}
    throw new Error("Missing return statement in function");
  }

  final public Group Group() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NUMBER);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Group(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Plane Plane() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NUMBER);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Plane(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Row Row() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NUMBER);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Row(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Cell Cell() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NUMBER);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Cell(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Tuple Tuple() throws ParseException {
   NodeToken n0;
   Token n1;
   TableColumn n2;
   NodeToken n3;
   Token n4;
   TableRow n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(LEFT_BRACE_TKN);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n2 = TableColumn();
    n4 = jj_consume_token(COMMA_TKN);
                    n3 = JTBToolkit.makeNodeToken(n4);
    n5 = TableRow();
    n7 = jj_consume_token(RIGHT_BRACE_TKN);
                          n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new Tuple(n0,n2,n3,n5,n6);}
    throw new Error("Missing return statement in function");
  }

  final public TableColumn TableColumn() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NUMBER);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new TableColumn(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TableRow TableRow() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NUMBER);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new TableRow(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLRestrictedCharacterStringValue XMLRestrictedCharacterStringValue() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(CSTRING);
                  n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new XMLRestrictedCharacterStringValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public UnrestrictedCharacterStringType UnrestrictedCharacterStringType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(CHARACTER_TKN);
                        n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(STRING_TKN);
                     n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new UnrestrictedCharacterStringType(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public CharacterStringValue CharacterStringValue() throws ParseException {
   RestrictedCharacterStringValue n0;
    n0 = RestrictedCharacterStringValue();
     {if (true) return new CharacterStringValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLCharacterStringValue XMLCharacterStringValue() throws ParseException {
   NodeChoice n0;
   XMLRestrictedCharacterStringValue n1;
   XMLUnrestrictedCharacterStringValue n2;
    if (jj_2_256(8)) {
      n1 = XMLRestrictedCharacterStringValue();
        n0 = new NodeChoice(n1, 0);
    } else {
      n2 = XMLUnrestrictedCharacterStringValue();
        n0 = new NodeChoice(n2, 1);
    }
     {if (true) return new XMLCharacterStringValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public UnrestrictedCharacterStringValue UnrestrictedCharacterStringValue() throws ParseException {
   SequenceValue n0;
    n0 = SequenceValue();
     {if (true) return new UnrestrictedCharacterStringValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public XMLUnrestrictedCharacterStringValue XMLUnrestrictedCharacterStringValue() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   XMLSequenceValue n1;
    if (jj_2_257(8)) {
      n1 = XMLSequenceValue();
        n0.addNode(n1);
    } else {
      ;
    }
     {if (true) return new XMLUnrestrictedCharacterStringValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public UsefulType UsefulType() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    if (jj_2_258(8)) {
      n2 = jj_consume_token(GENERALIZEDTIME_TKN);
                                 n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_259(8)) {
      n4 = jj_consume_token(UTCTIME_TKN);
                         n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
    } else if (jj_2_260(8)) {
      n6 = jj_consume_token(OBJECTDESCRIPTOR_TKN);
                                  n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new UsefulType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TypeWithConstraint TypeWithConstraint() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Constraint n4;
   NodeToken n5;
   Token n6;
   TypeOrNamedType n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   SizeConstraint n11;
   NodeToken n12;
   Token n13;
   TypeOrNamedType n14;
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   Constraint n18;
   NodeToken n19;
   Token n20;
   TypeOrNamedType n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   SizeConstraint n25;
   NodeToken n26;
   Token n27;
   TypeOrNamedType n28;
    if (jj_2_261(8)) {
        n1 = new NodeSequence(4);
      n3 = jj_consume_token(SET_TKN);
                     n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = Constraint();
        n1.addNode(n4);
      n6 = jj_consume_token(OF_TKN);
                    n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
      n7 = TypeOrNamedType();
        n1.addNode(n7);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_262(8)) {
        n8 = new NodeSequence(4);
      n10 = jj_consume_token(SET_TKN);
                      n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
      n11 = SizeConstraint();
        n8.addNode(n11);
      n13 = jj_consume_token(OF_TKN);
                     n12 = JTBToolkit.makeNodeToken(n13);
        n8.addNode(n12);
      n14 = TypeOrNamedType();
        n8.addNode(n14);
        n0 = new NodeChoice(n8, 1);
    } else if (jj_2_263(8)) {
        n15 = new NodeSequence(4);
      n17 = jj_consume_token(SEQUENCE_TKN);
                           n16 = JTBToolkit.makeNodeToken(n17);
        n15.addNode(n16);
      n18 = Constraint();
        n15.addNode(n18);
      n20 = jj_consume_token(OF_TKN);
                     n19 = JTBToolkit.makeNodeToken(n20);
        n15.addNode(n19);
      n21 = TypeOrNamedType();
        n15.addNode(n21);
        n0 = new NodeChoice(n15, 2);
    } else if (jj_2_264(8)) {
        n22 = new NodeSequence(4);
      n24 = jj_consume_token(SEQUENCE_TKN);
                           n23 = JTBToolkit.makeNodeToken(n24);
        n22.addNode(n23);
      n25 = SizeConstraint();
        n22.addNode(n25);
      n27 = jj_consume_token(OF_TKN);
                     n26 = JTBToolkit.makeNodeToken(n27);
        n22.addNode(n26);
      n28 = TypeOrNamedType();
        n22.addNode(n28);
        n0 = new NodeChoice(n22, 3);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TypeWithConstraint(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TypeOrNamedType TypeOrNamedType() throws ParseException {
   NodeChoice n0;
   Type n1;
   NamedType n2;
    if (jj_2_265(8)) {
      n1 = Type();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_266(8)) {
      n2 = NamedType();
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TypeOrNamedType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Constraint Constraint() throws ParseException {
   NodeToken n0;
   Token n1;
   ConstraintSpec n2;
   NodeOptional n3 = new NodeOptional();
   ExceptionSpec n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(LEFT_PARENTHESIS_TKN);
                               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ConstraintSpec();
    if (jj_2_267(8)) {
      n4 = ExceptionSpec();
        n3.addNode(n4);
    } else {
      ;
    }
    n6 = jj_consume_token(RIGHT_PARENTHESIS_TKN);
                                n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Constraint(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  final public ConstraintSpec ConstraintSpec() throws ParseException {
   SubtypeConstraint n0;
    n0 = SubtypeConstraint();
     {if (true) return new ConstraintSpec(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExceptionSpec ExceptionSpec() throws ParseException {
   NodeToken n0;
   Token n1;
   ExceptionIdentification n2;
    n1 = jj_consume_token(EXCLAMATION_TKN);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ExceptionIdentification();
     {if (true) return new ExceptionSpec(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public ExceptionIdentification ExceptionIdentification() throws ParseException {
   NodeChoice n0;
   SignedNumber n1;
   DefinedValue n2;
   NodeSequence n3;
   Type n4;
   NodeToken n5;
   Token n6;
   Value n7;
    if (jj_2_268(8)) {
      n1 = SignedNumber();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_269(8)) {
      n2 = DefinedValue();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_270(8)) {
        n3 = new NodeSequence(3);
      n4 = Type();
        n3.addNode(n4);
      n6 = jj_consume_token(COLON_TKN);
                       n5 = JTBToolkit.makeNodeToken(n6);
        n3.addNode(n5);
      n7 = Value();
        n3.addNode(n7);
        n0 = new NodeChoice(n3, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ExceptionIdentification(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SubtypeConstraint SubtypeConstraint() throws ParseException {
   ElementSetSpecs n0;
    n0 = ElementSetSpecs();
     {if (true) return new SubtypeConstraint(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ElementSetSpecs ElementSetSpecs() throws ParseException {
   RootElementSetSpec n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   AdditionalElementSetSpec n11;
    n0 = RootElementSetSpec();
    if (jj_2_272(8)) {
        n7 = new NodeOptional();
        n2 = new NodeSequence(3);
      n4 = jj_consume_token(COMMA_TKN);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n6 = jj_consume_token(ELLIPSIS_TKN);
                          n5 = JTBToolkit.makeNodeToken(n6);
        n2.addNode(n5);
      if (jj_2_271(8)) {
           n8 = new NodeSequence(2);
        n10 = jj_consume_token(COMMA_TKN);
                           n9 = JTBToolkit.makeNodeToken(n10);
           n8.addNode(n9);
        n11 = AdditionalElementSetSpec();
           n8.addNode(n11);
           n7.addNode(n8);
      } else {
        ;
      }
        n2.addNode(n7);
        n1.addNode(n2);
    } else {
      ;
    }
     {if (true) return new ElementSetSpecs(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public RootElementSetSpec RootElementSetSpec() throws ParseException {
   ElementSetSpec n0;
    n0 = ElementSetSpec();
     {if (true) return new RootElementSetSpec(n0);}
    throw new Error("Missing return statement in function");
  }

  final public AdditionalElementSetSpec AdditionalElementSetSpec() throws ParseException {
   ElementSetSpec n0;
    n0 = ElementSetSpec();
     {if (true) return new AdditionalElementSetSpec(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ElementSetSpec ElementSetSpec() throws ParseException {
   NodeChoice n0;
   Unions n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Exclusions n5;
    if (jj_2_273(8)) {
      n1 = Unions();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_274(8)) {
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(ALL_TKN);
                     n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Exclusions();
        n2.addNode(n5);
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ElementSetSpec(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Unions Unions() throws ParseException {
   Intersections n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   UnionMark n3;
   Intersections n4;
    n0 = Intersections();
    label_24:
    while (true) {
      if (jj_2_275(8)) {
        ;
      } else {
        break label_24;
      }
        n2 = new NodeSequence(2);
      n3 = UnionMark();
        n2.addNode(n3);
      n4 = Intersections();
        n2.addNode(n4);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new Unions(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Intersections Intersections() throws ParseException {
   IntersectionElements n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   IntersectionMark n3;
   IntersectionElements n4;
    n0 = IntersectionElements();
    label_25:
    while (true) {
      if (jj_2_276(8)) {
        ;
      } else {
        break label_25;
      }
        n2 = new NodeSequence(2);
      n3 = IntersectionMark();
        n2.addNode(n3);
      n4 = IntersectionElements();
        n2.addNode(n4);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new Intersections(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public IntersectionElements IntersectionElements() throws ParseException {
   Elements n0;
   NodeOptional n1 = new NodeOptional();
   Exclusions n2;
    n0 = Elements();
    if (jj_2_277(8)) {
      n2 = Exclusions();
        n1.addNode(n2);
    } else {
      ;
    }
     {if (true) return new IntersectionElements(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Elems Elems() throws ParseException {
   Elements n0;
    n0 = Elements();
     {if (true) return new Elems(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Exclusions Exclusions() throws ParseException {
   NodeToken n0;
   Token n1;
   Elements n2;
    n1 = jj_consume_token(EXCEPT_TKN);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Elements();
     {if (true) return new Exclusions(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public UnionMark UnionMark() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    if (jj_2_278(8)) {
      n2 = jj_consume_token(BAR_TKN);
                     n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_279(8)) {
      n4 = jj_consume_token(UNION_TKN);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new UnionMark(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IntersectionMark IntersectionMark() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    if (jj_2_280(8)) {
      n2 = jj_consume_token(CIRCUMFLEX_TKN);
                            n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_281(8)) {
      n4 = jj_consume_token(INTERSECTION_TKN);
                              n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new IntersectionMark(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Elements Elements() throws ParseException {
   NodeChoice n0;
   SubtypeElements n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ElementSetSpec n5;
   NodeToken n6;
   Token n7;
    if (jj_2_282(8)) {
      n1 = SubtypeElements();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_283(8)) {
        n2 = new NodeSequence(3);
      n4 = jj_consume_token(LEFT_PARENTHESIS_TKN);
                                  n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ElementSetSpec();
        n2.addNode(n5);
      n7 = jj_consume_token(RIGHT_PARENTHESIS_TKN);
                                   n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Elements(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SubtypeElements SubtypeElements() throws ParseException {
   NodeChoice n0;
   ValueRange n1;
   ContainedSubtype n2;
   PermittedAlphabet n3;
   SizeConstraint n4;
   TypeConstraint n5;
   InnerTypeConstraints n6;
   SingleValue n7;
   PatternConstraint n8;
    if (jj_2_284(8)) {
      n1 = ValueRange();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_285(8)) {
      n2 = ContainedSubtype();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_286(8)) {
      n3 = PermittedAlphabet();
        n0 = new NodeChoice(n3, 2);
    } else if (jj_2_287(8)) {
      n4 = SizeConstraint();
        n0 = new NodeChoice(n4, 3);
    } else if (jj_2_288(8)) {
      n5 = TypeConstraint();
        n0 = new NodeChoice(n5, 4);
    } else if (jj_2_289(8)) {
      n6 = InnerTypeConstraints();
        n0 = new NodeChoice(n6, 5);
    } else if (jj_2_290(8)) {
      n7 = SingleValue();
        n0 = new NodeChoice(n7, 6);
    } else if (jj_2_291(8)) {
      n8 = PatternConstraint();
        n0 = new NodeChoice(n8, 7);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SubtypeElements(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PatternConstraint PatternConstraint() throws ParseException {
   NodeToken n0;
   Token n1;
   Value n2;
    n1 = jj_consume_token(PATTERN_TKN);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Value();
     {if (true) return new PatternConstraint(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public SingleValue SingleValue() throws ParseException {
   Value n0;
    n0 = Value();
     {if (true) return new SingleValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ContainedSubtype ContainedSubtype() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   Includes n1;
   Type n2;
    if (jj_2_292(8)) {
      n1 = Includes();
        n0.addNode(n1);
    } else {
      ;
    }
    n2 = Type();
     {if (true) return new ContainedSubtype(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public Includes Includes() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INCLUDES_TKN);
                       n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Includes(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ValueRange ValueRange() throws ParseException {
   LowerEndpoint n0;
   NodeToken n1;
   Token n2;
   UpperEndpoint n3;
    n0 = LowerEndpoint();
    n2 = jj_consume_token(DOTDOT_TKN);
                     n1 = JTBToolkit.makeNodeToken(n2);
    n3 = UpperEndpoint();
     {if (true) return new ValueRange(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public LowerEndpoint LowerEndpoint() throws ParseException {
   LowerEndValue n0;
   NodeOptional n1 = new NodeOptional();
   NodeToken n2;
   Token n3;
    n0 = LowerEndValue();
    if (jj_2_293(8)) {
      n3 = jj_consume_token(LESSER_THAN_TKN);
                             n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
    } else {
      ;
    }
     {if (true) return new LowerEndpoint(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public UpperEndpoint UpperEndpoint() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   UpperEndValue n3;
    if (jj_2_294(8)) {
      n2 = jj_consume_token(LESSER_THAN_TKN);
                             n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
    } else {
      ;
    }
    n3 = UpperEndValue();
     {if (true) return new UpperEndpoint(n0,n3);}
    throw new Error("Missing return statement in function");
  }

  final public LowerEndValue LowerEndValue() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   Value n3;
    if (jj_2_295(8)) {
      n2 = jj_consume_token(MIN_TKN);
                     n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_296(8)) {
      n3 = Value();
        n0 = new NodeChoice(n3, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new LowerEndValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public UpperEndValue UpperEndValue() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   Value n3;
    if (jj_2_297(8)) {
      n2 = jj_consume_token(MAX_TKN);
                     n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_298(8)) {
      n3 = Value();
        n0 = new NodeChoice(n3, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new UpperEndValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SizeConstraint SizeConstraint() throws ParseException {
   NodeToken n0;
   Token n1;
   Constraint n2;
    n1 = jj_consume_token(SIZE_TKN);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Constraint();
     {if (true) return new SizeConstraint(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public PermittedAlphabet PermittedAlphabet() throws ParseException {
   NodeToken n0;
   Token n1;
   Constraint n2;
    n1 = jj_consume_token(FROM_TKN);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Constraint();
     {if (true) return new PermittedAlphabet(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public TypeConstraint TypeConstraint() throws ParseException {
   Type n0;
    n0 = Type();
     {if (true) return new TypeConstraint(n0);}
    throw new Error("Missing return statement in function");
  }

  final public InnerTypeConstraints InnerTypeConstraints() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   SingleTypeConstraint n5;
   MultipleTypeConstraints n6;
    n1 = jj_consume_token(WITH_TKN);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COMPONENT_TKN);
                        n2 = JTBToolkit.makeNodeToken(n3);
    if (jj_2_299(8)) {
      n5 = SingleTypeConstraint();
           n4 = new NodeChoice(n5, 0);
    } else if (jj_2_300(8)) {
      n6 = MultipleTypeConstraints();
           n4 = new NodeChoice(n6, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new InnerTypeConstraints(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public SingleTypeConstraint SingleTypeConstraint() throws ParseException {
   Constraint n0;
    n0 = Constraint();
     {if (true) return new SingleTypeConstraint(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MultipleTypeConstraints MultipleTypeConstraints() throws ParseException {
   NodeChoice n0;
   FullSpecification n1;
   PartialSpecification n2;
    if (jj_2_301(8)) {
      n1 = FullSpecification();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_302(8)) {
      n2 = PartialSpecification();
        n0 = new NodeChoice(n2, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new MultipleTypeConstraints(n0);}
    throw new Error("Missing return statement in function");
  }

  final public FullSpecification FullSpecification() throws ParseException {
   NodeToken n0;
   Token n1;
   TypeConstraints n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(LEFT_BRACE_TKN);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n2 = TypeConstraints();
    n4 = jj_consume_token(RIGHT_BRACE_TKN);
                          n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new FullSpecification(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public PartialSpecification PartialSpecification() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   TypeConstraints n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(LEFT_BRACE_TKN);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ELLIPSIS_TKN);
                       n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(COMMA_TKN);
                    n4 = JTBToolkit.makeNodeToken(n5);
    n6 = TypeConstraints();
    n8 = jj_consume_token(RIGHT_BRACE_TKN);
                          n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new PartialSpecification(n0,n2,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  final public TypeConstraints TypeConstraints() throws ParseException {
   NamedConstraint n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NamedConstraint n5;
    n0 = NamedConstraint();
    label_26:
    while (true) {
      if (jj_2_303(8)) {
        ;
      } else {
        break label_26;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA_TKN);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = NamedConstraint();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new TypeConstraints(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public NamedConstraint NamedConstraint() throws ParseException {
   NodeToken n0;
   Token n1;
   ComponentConstraint n2;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ComponentConstraint();
     {if (true) return new NamedConstraint(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public ComponentConstraint ComponentConstraint() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   ValueConstraint n1;
   NodeOptional n2 = new NodeOptional();
   PresenceConstraint n3;
    if (jj_2_304(8)) {
      n1 = ValueConstraint();
        n0.addNode(n1);
    } else {
      ;
    }
    if (jj_2_305(8)) {
      n3 = PresenceConstraint();
        n2.addNode(n3);
    } else {
      ;
    }
     {if (true) return new ComponentConstraint(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public ValueConstraint ValueConstraint() throws ParseException {
   Constraint n0;
    n0 = Constraint();
     {if (true) return new ValueConstraint(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PresenceConstraint PresenceConstraint() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    if (jj_2_306(8)) {
      n2 = jj_consume_token(PRESENT_TKN);
                         n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_307(8)) {
      n4 = jj_consume_token(ABSENT_TKN);
                        n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
    } else if (jj_2_308(8)) {
      n6 = jj_consume_token(OPTIONAL_TKN);
                          n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new PresenceConstraint(n0);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  final private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  final private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  final private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  final private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  final private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  final private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  final private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  final private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  final private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  final private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  final private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  final private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  final private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  final private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  final private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  final private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  final private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  final private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  final private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  final private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  final private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  final private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  final private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  final private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  final private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  final private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  final private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  final private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  final private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  final private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  final private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  final private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  final private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  final private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  final private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  final private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  final private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  final private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  final private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  final private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  final private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  final private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  final private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  final private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  final private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  final private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  final private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  final private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  final private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  final private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  final private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  final private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  final private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  final private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  final private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  final private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  final private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  final private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  final private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  final private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  final private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  final private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  final private boolean jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  final private boolean jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  final private boolean jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  final private boolean jj_2_120(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  final private boolean jj_2_121(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  final private boolean jj_2_122(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  final private boolean jj_2_123(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  final private boolean jj_2_124(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  final private boolean jj_2_125(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  final private boolean jj_2_126(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  final private boolean jj_2_127(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  final private boolean jj_2_128(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  final private boolean jj_2_129(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  final private boolean jj_2_130(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(129, xla); }
  }

  final private boolean jj_2_131(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(130, xla); }
  }

  final private boolean jj_2_132(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(131, xla); }
  }

  final private boolean jj_2_133(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(132, xla); }
  }

  final private boolean jj_2_134(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(133, xla); }
  }

  final private boolean jj_2_135(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(134, xla); }
  }

  final private boolean jj_2_136(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(135, xla); }
  }

  final private boolean jj_2_137(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_137(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(136, xla); }
  }

  final private boolean jj_2_138(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_138(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(137, xla); }
  }

  final private boolean jj_2_139(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_139(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(138, xla); }
  }

  final private boolean jj_2_140(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_140(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(139, xla); }
  }

  final private boolean jj_2_141(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_141(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(140, xla); }
  }

  final private boolean jj_2_142(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_142(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(141, xla); }
  }

  final private boolean jj_2_143(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_143(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(142, xla); }
  }

  final private boolean jj_2_144(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_144(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(143, xla); }
  }

  final private boolean jj_2_145(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_145(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(144, xla); }
  }

  final private boolean jj_2_146(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_146(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(145, xla); }
  }

  final private boolean jj_2_147(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_147(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(146, xla); }
  }

  final private boolean jj_2_148(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_148(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(147, xla); }
  }

  final private boolean jj_2_149(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_149(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(148, xla); }
  }

  final private boolean jj_2_150(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_150(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(149, xla); }
  }

  final private boolean jj_2_151(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_151(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(150, xla); }
  }

  final private boolean jj_2_152(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_152(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(151, xla); }
  }

  final private boolean jj_2_153(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_153(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(152, xla); }
  }

  final private boolean jj_2_154(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_154(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(153, xla); }
  }

  final private boolean jj_2_155(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_155(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(154, xla); }
  }

  final private boolean jj_2_156(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_156(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(155, xla); }
  }

  final private boolean jj_2_157(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_157(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(156, xla); }
  }

  final private boolean jj_2_158(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_158(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(157, xla); }
  }

  final private boolean jj_2_159(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_159(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(158, xla); }
  }

  final private boolean jj_2_160(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_160(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(159, xla); }
  }

  final private boolean jj_2_161(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_161(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(160, xla); }
  }

  final private boolean jj_2_162(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_162(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(161, xla); }
  }

  final private boolean jj_2_163(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_163(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(162, xla); }
  }

  final private boolean jj_2_164(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_164(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(163, xla); }
  }

  final private boolean jj_2_165(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_165(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(164, xla); }
  }

  final private boolean jj_2_166(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_166(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(165, xla); }
  }

  final private boolean jj_2_167(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_167(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(166, xla); }
  }

  final private boolean jj_2_168(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_168(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(167, xla); }
  }

  final private boolean jj_2_169(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_169(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(168, xla); }
  }

  final private boolean jj_2_170(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_170(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(169, xla); }
  }

  final private boolean jj_2_171(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_171(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(170, xla); }
  }

  final private boolean jj_2_172(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_172(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(171, xla); }
  }

  final private boolean jj_2_173(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_173(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(172, xla); }
  }

  final private boolean jj_2_174(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_174(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(173, xla); }
  }

  final private boolean jj_2_175(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_175(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(174, xla); }
  }

  final private boolean jj_2_176(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_176(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(175, xla); }
  }

  final private boolean jj_2_177(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_177(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(176, xla); }
  }

  final private boolean jj_2_178(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_178(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(177, xla); }
  }

  final private boolean jj_2_179(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_179(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(178, xla); }
  }

  final private boolean jj_2_180(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_180(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(179, xla); }
  }

  final private boolean jj_2_181(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_181(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(180, xla); }
  }

  final private boolean jj_2_182(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_182(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(181, xla); }
  }

  final private boolean jj_2_183(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_183(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(182, xla); }
  }

  final private boolean jj_2_184(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_184(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(183, xla); }
  }

  final private boolean jj_2_185(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_185(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(184, xla); }
  }

  final private boolean jj_2_186(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_186(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(185, xla); }
  }

  final private boolean jj_2_187(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_187(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(186, xla); }
  }

  final private boolean jj_2_188(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_188(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(187, xla); }
  }

  final private boolean jj_2_189(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_189(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(188, xla); }
  }

  final private boolean jj_2_190(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_190(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(189, xla); }
  }

  final private boolean jj_2_191(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_191(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(190, xla); }
  }

  final private boolean jj_2_192(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_192(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(191, xla); }
  }

  final private boolean jj_2_193(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_193(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(192, xla); }
  }

  final private boolean jj_2_194(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_194(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(193, xla); }
  }

  final private boolean jj_2_195(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_195(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(194, xla); }
  }

  final private boolean jj_2_196(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_196(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(195, xla); }
  }

  final private boolean jj_2_197(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_197(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(196, xla); }
  }

  final private boolean jj_2_198(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_198(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(197, xla); }
  }

  final private boolean jj_2_199(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_199(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(198, xla); }
  }

  final private boolean jj_2_200(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_200(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(199, xla); }
  }

  final private boolean jj_2_201(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_201(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(200, xla); }
  }

  final private boolean jj_2_202(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_202(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(201, xla); }
  }

  final private boolean jj_2_203(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_203(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(202, xla); }
  }

  final private boolean jj_2_204(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_204(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(203, xla); }
  }

  final private boolean jj_2_205(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_205(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(204, xla); }
  }

  final private boolean jj_2_206(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_206(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(205, xla); }
  }

  final private boolean jj_2_207(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_207(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(206, xla); }
  }

  final private boolean jj_2_208(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_208(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(207, xla); }
  }

  final private boolean jj_2_209(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_209(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(208, xla); }
  }

  final private boolean jj_2_210(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_210(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(209, xla); }
  }

  final private boolean jj_2_211(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_211(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(210, xla); }
  }

  final private boolean jj_2_212(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_212(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(211, xla); }
  }

  final private boolean jj_2_213(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_213(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(212, xla); }
  }

  final private boolean jj_2_214(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_214(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(213, xla); }
  }

  final private boolean jj_2_215(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_215(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(214, xla); }
  }

  final private boolean jj_2_216(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_216(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(215, xla); }
  }

  final private boolean jj_2_217(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_217(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(216, xla); }
  }

  final private boolean jj_2_218(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_218(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(217, xla); }
  }

  final private boolean jj_2_219(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_219(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(218, xla); }
  }

  final private boolean jj_2_220(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_220(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(219, xla); }
  }

  final private boolean jj_2_221(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_221(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(220, xla); }
  }

  final private boolean jj_2_222(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_222(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(221, xla); }
  }

  final private boolean jj_2_223(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_223(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(222, xla); }
  }

  final private boolean jj_2_224(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_224(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(223, xla); }
  }

  final private boolean jj_2_225(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_225(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(224, xla); }
  }

  final private boolean jj_2_226(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_226(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(225, xla); }
  }

  final private boolean jj_2_227(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_227(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(226, xla); }
  }

  final private boolean jj_2_228(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_228(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(227, xla); }
  }

  final private boolean jj_2_229(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_229(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(228, xla); }
  }

  final private boolean jj_2_230(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_230(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(229, xla); }
  }

  final private boolean jj_2_231(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_231(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(230, xla); }
  }

  final private boolean jj_2_232(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_232(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(231, xla); }
  }

  final private boolean jj_2_233(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_233(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(232, xla); }
  }

  final private boolean jj_2_234(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_234(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(233, xla); }
  }

  final private boolean jj_2_235(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_235(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(234, xla); }
  }

  final private boolean jj_2_236(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_236(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(235, xla); }
  }

  final private boolean jj_2_237(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_237(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(236, xla); }
  }

  final private boolean jj_2_238(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_238(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(237, xla); }
  }

  final private boolean jj_2_239(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_239(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(238, xla); }
  }

  final private boolean jj_2_240(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_240(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(239, xla); }
  }

  final private boolean jj_2_241(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_241(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(240, xla); }
  }

  final private boolean jj_2_242(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_242(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(241, xla); }
  }

  final private boolean jj_2_243(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_243(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(242, xla); }
  }

  final private boolean jj_2_244(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_244(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(243, xla); }
  }

  final private boolean jj_2_245(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_245(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(244, xla); }
  }

  final private boolean jj_2_246(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_246(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(245, xla); }
  }

  final private boolean jj_2_247(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_247(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(246, xla); }
  }

  final private boolean jj_2_248(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_248(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(247, xla); }
  }

  final private boolean jj_2_249(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_249(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(248, xla); }
  }

  final private boolean jj_2_250(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_250(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(249, xla); }
  }

  final private boolean jj_2_251(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_251(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(250, xla); }
  }

  final private boolean jj_2_252(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_252(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(251, xla); }
  }

  final private boolean jj_2_253(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_253(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(252, xla); }
  }

  final private boolean jj_2_254(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_254(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(253, xla); }
  }

  final private boolean jj_2_255(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_255(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(254, xla); }
  }

  final private boolean jj_2_256(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_256(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(255, xla); }
  }

  final private boolean jj_2_257(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_257(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(256, xla); }
  }

  final private boolean jj_2_258(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_258(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(257, xla); }
  }

  final private boolean jj_2_259(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_259(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(258, xla); }
  }

  final private boolean jj_2_260(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_260(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(259, xla); }
  }

  final private boolean jj_2_261(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_261(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(260, xla); }
  }

  final private boolean jj_2_262(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_262(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(261, xla); }
  }

  final private boolean jj_2_263(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_263(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(262, xla); }
  }

  final private boolean jj_2_264(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_264(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(263, xla); }
  }

  final private boolean jj_2_265(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_265(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(264, xla); }
  }

  final private boolean jj_2_266(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_266(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(265, xla); }
  }

  final private boolean jj_2_267(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_267(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(266, xla); }
  }

  final private boolean jj_2_268(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_268(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(267, xla); }
  }

  final private boolean jj_2_269(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_269(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(268, xla); }
  }

  final private boolean jj_2_270(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_270(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(269, xla); }
  }

  final private boolean jj_2_271(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_271(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(270, xla); }
  }

  final private boolean jj_2_272(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_272(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(271, xla); }
  }

  final private boolean jj_2_273(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_273(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(272, xla); }
  }

  final private boolean jj_2_274(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_274(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(273, xla); }
  }

  final private boolean jj_2_275(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_275(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(274, xla); }
  }

  final private boolean jj_2_276(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_276(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(275, xla); }
  }

  final private boolean jj_2_277(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_277(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(276, xla); }
  }

  final private boolean jj_2_278(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_278(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(277, xla); }
  }

  final private boolean jj_2_279(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_279(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(278, xla); }
  }

  final private boolean jj_2_280(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_280(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(279, xla); }
  }

  final private boolean jj_2_281(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_281(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(280, xla); }
  }

  final private boolean jj_2_282(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_282(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(281, xla); }
  }

  final private boolean jj_2_283(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_283(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(282, xla); }
  }

  final private boolean jj_2_284(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_284(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(283, xla); }
  }

  final private boolean jj_2_285(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_285(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(284, xla); }
  }

  final private boolean jj_2_286(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_286(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(285, xla); }
  }

  final private boolean jj_2_287(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_287(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(286, xla); }
  }

  final private boolean jj_2_288(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_288(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(287, xla); }
  }

  final private boolean jj_2_289(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_289(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(288, xla); }
  }

  final private boolean jj_2_290(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_290(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(289, xla); }
  }

  final private boolean jj_2_291(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_291(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(290, xla); }
  }

  final private boolean jj_2_292(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_292(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(291, xla); }
  }

  final private boolean jj_2_293(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_293(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(292, xla); }
  }

  final private boolean jj_2_294(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_294(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(293, xla); }
  }

  final private boolean jj_2_295(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_295(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(294, xla); }
  }

  final private boolean jj_2_296(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_296(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(295, xla); }
  }

  final private boolean jj_2_297(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_297(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(296, xla); }
  }

  final private boolean jj_2_298(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_298(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(297, xla); }
  }

  final private boolean jj_2_299(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_299(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(298, xla); }
  }

  final private boolean jj_2_300(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_300(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(299, xla); }
  }

  final private boolean jj_2_301(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_301(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(300, xla); }
  }

  final private boolean jj_2_302(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_302(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(301, xla); }
  }

  final private boolean jj_2_303(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_303(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(302, xla); }
  }

  final private boolean jj_2_304(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_304(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(303, xla); }
  }

  final private boolean jj_2_305(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_305(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(304, xla); }
  }

  final private boolean jj_2_306(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_306(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(305, xla); }
  }

  final private boolean jj_2_307(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_307(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(306, xla); }
  }

  final private boolean jj_2_308(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_308(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(307, xla); }
  }

  final private boolean jj_3R_99() {
    if (jj_3R_202()) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_210()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_283() {
    if (jj_scan_token(LEFT_PARENTHESIS_TKN)) return true;
    if (jj_3R_173()) return true;
    if (jj_scan_token(RIGHT_PARENTHESIS_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3_282() {
    if (jj_3R_172()) return true;
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_scan_token(LESSER_THAN_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(GREATER_THAN_TKN)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3_123() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LEFT_PARENTHESIS_TKN)) return true;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(RIGHT_PARENTHESIS_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_282()) {
    jj_scanpos = xsp;
    if (jj_3_283()) return true;
    }
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(TYPEREFERENCE)) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_123()) {
    jj_scanpos = xsp;
    if (jj_3_124()) return true;
    }
    return false;
  }

  final private boolean jj_3R_194() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    return false;
  }

  final private boolean jj_3_166() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_90() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3_250() {
    if (jj_3R_160()) return true;
    return false;
  }

  final private boolean jj_3_249() {
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3R_239() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_90()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_166()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_89() {
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3_248() {
    if (jj_3R_158()) return true;
    return false;
  }

  final private boolean jj_3_247() {
    if (jj_scan_token(CSTRING)) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_89()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_88() {
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3_281() {
    if (jj_scan_token(INTERSECTION_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_247()) {
    jj_scanpos = xsp;
    if (jj_3_248()) {
    jj_scanpos = xsp;
    if (jj_3_249()) {
    jj_scanpos = xsp;
    if (jj_3_250()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_194()) return true;
    return false;
  }

  final private boolean jj_3_280() {
    if (jj_scan_token(CIRCUMFLEX_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_88()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_87() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_280()) {
    jj_scanpos = xsp;
    if (jj_3_281()) return true;
    }
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON_TKN)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_87()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_165() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_3R_257()) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_3R_256()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3_122() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_114()) return true;
    return false;
  }

  final private boolean jj_3_246() {
    if (jj_scan_token(VISIBLESTRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_3R_255()) return true;
    return false;
  }

  final private boolean jj_3_245() {
    if (jj_scan_token(VIDEOTEXSTRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3_164() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_131()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_3R_254()) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_114()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_122()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_279() {
    if (jj_scan_token(UNION_TKN)) return true;
    return false;
  }

  final private boolean jj_3_244() {
    if (jj_scan_token(UTF8STRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_3R_253()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_164()) {
    jj_scanpos = xsp;
    if (jj_3_165()) return true;
    }
    return false;
  }

  final private boolean jj_3_278() {
    if (jj_scan_token(BAR_TKN)) return true;
    return false;
  }

  final private boolean jj_3_243() {
    if (jj_scan_token(UNIVERSALSTRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_3R_252()) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_278()) {
    jj_scanpos = xsp;
    if (jj_3_279()) return true;
    }
    return false;
  }

  final private boolean jj_3_200() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  final private boolean jj_3_242() {
    if (jj_scan_token(T61STRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_3R_251()) return true;
    return false;
  }

  final private boolean jj_3_241() {
    if (jj_scan_token(TELETEXSTRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_3R_250()) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_3R_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_200()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_240() {
    if (jj_scan_token(PRINTABLESTRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_3R_249()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3_239() {
    if (jj_scan_token(NUMERICSTRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_3R_248()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3_238() {
    if (jj_scan_token(ISO646STRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_3R_247()) return true;
    return false;
  }

  final private boolean jj_3_121() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_113()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_237() {
    if (jj_scan_token(IA5STRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_3R_246()) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(EXCEPT_TKN)) return true;
    if (jj_3R_217()) return true;
    return false;
  }

  final private boolean jj_3_236() {
    if (jj_scan_token(GRAPHICSTRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3_86() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(BIT_TKN)) return true;
    if (jj_scan_token(STRING_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_121()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_235() {
    if (jj_scan_token(GENERALSTRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_86()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_199() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3_163() {
    if (jj_scan_token(COMPONENTS_TKN)) return true;
    if (jj_scan_token(OF_TKN)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3_234() {
    if (jj_scan_token(BMPSTRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) {
    jj_scanpos = xsp;
    if (jj_3R_239()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_234()) {
    jj_scanpos = xsp;
    if (jj_3_235()) {
    jj_scanpos = xsp;
    if (jj_3_236()) {
    jj_scanpos = xsp;
    if (jj_3_237()) {
    jj_scanpos = xsp;
    if (jj_3_238()) {
    jj_scanpos = xsp;
    if (jj_3_239()) {
    jj_scanpos = xsp;
    if (jj_3_240()) {
    jj_scanpos = xsp;
    if (jj_3_241()) {
    jj_scanpos = xsp;
    if (jj_3_242()) {
    jj_scanpos = xsp;
    if (jj_3_243()) {
    jj_scanpos = xsp;
    if (jj_3_244()) {
    jj_scanpos = xsp;
    if (jj_3_245()) {
    jj_scanpos = xsp;
    if (jj_3_246()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(VERSIONBRACKET_START_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_199()) jj_scanpos = xsp;
    if (jj_3R_208()) return true;
    if (jj_scan_token(VERSIONBRACKET_END_TKN)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3_160() {
    if (jj_scan_token(DEFAULT_TKN)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3_159() {
    if (jj_scan_token(OPTIONAL_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_3R_196()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_161() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_159()) {
    jj_scanpos = xsp;
    if (jj_3_160()) return true;
    }
    return false;
  }

  final private boolean jj_3_277() {
    if (jj_3R_167()) return true;
    return false;
  }

  final private boolean jj_3_162() {
    if (jj_3R_129()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_161()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_198() {
    if (jj_3R_129()) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_3R_217()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_277()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_162()) {
    jj_scanpos = xsp;
    if (jj_3_163()) return true;
    }
    return false;
  }

  final private boolean jj_3_197() {
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_190()) return true;
    if (jj_scan_token(FROM_TKN)) return true;
    if (jj_3R_192()) return true;
    return false;
  }

  final private boolean jj_3_120() {
    if (jj_scan_token(LESSER_THAN_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_scan_token(MINUS_INFINITY_TKN)) return true;
    if (jj_scan_token(XMLTAGTERMINATINGBRACKET_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_197()) {
    jj_scanpos = xsp;
    if (jj_3_198()) return true;
    }
    return false;
  }

  final private boolean jj_3_85() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3_119() {
    if (jj_scan_token(LESSER_THAN_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_scan_token(PLUS_INFINITY_TKN)) return true;
    if (jj_scan_token(XMLTAGTERMINATINGBRACKET_TKN)) return true;
    return false;
  }

  final private boolean jj_3_84() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_119()) {
    jj_scanpos = xsp;
    if (jj_3_120()) return true;
    }
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3_233() {
    if (jj_3R_157()) return true;
    return false;
  }

  final private boolean jj_3_276() {
    if (jj_3R_170()) return true;
    if (jj_3R_171()) return true;
    return false;
  }

  final private boolean jj_3_83() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3_232() {
    if (jj_3R_156()) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    Token xsp;
    if (jj_3_18()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_82() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_3R_171()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_276()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_196() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_232()) {
    jj_scanpos = xsp;
    if (jj_3_233()) return true;
    }
    return false;
  }

  final private boolean jj_3_81() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_3R_141()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_196()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_80() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3_79() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3_158() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3_78() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_191()) return true;
    return false;
  }

  final private boolean jj_3_77() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_3R_126()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_158()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_231() {
    if (jj_3R_151()) return true;
    return false;
  }

  final private boolean jj_3_76() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3_230() {
    if (jj_3R_150()) return true;
    return false;
  }

  final private boolean jj_3_75() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3_275() {
    if (jj_3R_168()) return true;
    if (jj_3R_169()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_230()) {
    jj_scanpos = xsp;
    if (jj_3_231()) return true;
    }
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_207()) return true;
    return false;
  }

  final private boolean jj_3_74() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_3R_169()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_275()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_73() {
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3_118() {
    if (jj_scan_token(MINUS_TKN)) return true;
    if (jj_scan_token(REALNUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(IMPORTS_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON_TKN)) return true;
    return false;
  }

  final private boolean jj_3_72() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3_117() {
    if (jj_scan_token(REALNUMBER)) return true;
    return false;
  }

  final private boolean jj_3_71() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(COLON_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_117()) {
    jj_scanpos = xsp;
    if (jj_3_118()) return true;
    }
    return false;
  }

  final private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) {
    jj_scanpos = xsp;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3_82()) {
    jj_scanpos = xsp;
    if (jj_3_83()) {
    jj_scanpos = xsp;
    if (jj_3_84()) {
    jj_scanpos = xsp;
    if (jj_3_85()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_3R_208()) return true;
    return false;
  }

  final private boolean jj_3_274() {
    if (jj_scan_token(ALL_TKN)) return true;
    if (jj_3R_167()) return true;
    return false;
  }

  final private boolean jj_3_229() {
    if (jj_3R_154()) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_scan_token(DOT_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_190()) return true;
    return false;
  }

  final private boolean jj_3_273() {
    if (jj_3R_166()) return true;
    return false;
  }

  final private boolean jj_3_194() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3_228() {
    if (jj_3R_154()) return true;
    return false;
  }

  final private boolean jj_3_157() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_273()) {
    jj_scanpos = xsp;
    if (jj_3_274()) return true;
    }
    return false;
  }

  final private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_228()) {
    jj_scanpos = xsp;
    if (jj_3_229()) return true;
    }
    return false;
  }

  final private boolean jj_3_116() {
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3_193() {
    if (jj_3R_140()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(VERSIONBRACKET_START_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_157()) jj_scanpos = xsp;
    if (jj_3R_206()) return true;
    if (jj_scan_token(VERSIONBRACKET_END_TKN)) return true;
    return false;
  }

  final private boolean jj_3_115() {
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_256() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_115()) {
    jj_scanpos = xsp;
    if (jj_3_116()) return true;
    }
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_197()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(EXPORTS_TKN)) return true;
    if (jj_scan_token(ALL_TKN)) return true;
    if (jj_scan_token(SEMICOLON_TKN)) return true;
    return false;
  }

  final private boolean jj_3_195() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_120()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_193()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_194()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_3R_173()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_3R_241()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_195()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_156() {
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3_114() {
    if (jj_scan_token(MINUS_INFINITY_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_257() {
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3_70() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3_155() {
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(EXPORTS_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON_TKN)) return true;
    return false;
  }

  final private boolean jj_3_113() {
    if (jj_scan_token(PLUS_INFINITY_TKN)) return true;
    return false;
  }

  final private boolean jj_3_69() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_155()) {
    jj_scanpos = xsp;
    if (jj_3_156()) return true;
    }
    return false;
  }

  final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_3R_173()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_113()) {
    jj_scanpos = xsp;
    if (jj_3_114()) return true;
    }
    return false;
  }

  final private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3_70()) return true;
    }
    return false;
  }

  final private boolean jj_3_227() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3_226() {
    if (jj_3R_146()) return true;
    return false;
  }

  final private boolean jj_3_225() {
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(CHOICE_TKN)) return true;
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_199()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_68() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_225()) {
    jj_scanpos = xsp;
    if (jj_3_226()) {
    jj_scanpos = xsp;
    if (jj_3_227()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_112() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3_271() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3_154() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  final private boolean jj_3_67() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3_66() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_3R_125()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_154()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_111() {
    if (jj_scan_token(MINUS_TKN)) return true;
    if (jj_scan_token(REALNUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3_110() {
    if (jj_scan_token(REALNUMBER)) return true;
    return false;
  }

  final private boolean jj_3_272() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_scan_token(ELLIPSIS_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_271()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_110()) {
    jj_scanpos = xsp;
    if (jj_3_111()) {
    jj_scanpos = xsp;
    if (jj_3_112()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_3R_245()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_272()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_192() {
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3_191() {
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3_224() {
    if (jj_3R_152()) return true;
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3_190() {
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3_223() {
    if (jj_3R_152()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_205()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_223()) {
    jj_scanpos = xsp;
    if (jj_3_224()) return true;
    }
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_190()) {
    jj_scanpos = xsp;
    if (jj_3_191()) {
    jj_scanpos = xsp;
    if (jj_3_192()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_109() {
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(EXTENSIBILITY_TKN)) return true;
    if (jj_scan_token(IMPLIED_TKN)) return true;
    return false;
  }

  final private boolean jj_3_108() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_3R_222()) return true;
    return false;
  }

  final private boolean jj_3_65() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_scan_token(ELLIPSIS_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_108()) {
    jj_scanpos = xsp;
    if (jj_3_109()) return true;
    }
    return false;
  }

  final private boolean jj_3_64() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_153()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_189() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_63() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3_62() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3_61() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3_188() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_134()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(AUTOMATIC_TKN)) return true;
    if (jj_scan_token(TAGS_TKN)) return true;
    return false;
  }

  final private boolean jj_3_60() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_206()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(REAL_TKN)) return true;
    return false;
  }

  final private boolean jj_3_270() {
    if (jj_3R_130()) return true;
    if (jj_scan_token(COLON_TKN)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3_59() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3_269() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(RELATIVE_OID_TKN)) return true;
    return false;
  }

  final private boolean jj_3_58() {
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(IMPLICIT_TKN)) return true;
    if (jj_scan_token(TAGS_TKN)) return true;
    return false;
  }

  final private boolean jj_3_187() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_133()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_268() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3_57() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_268()) {
    jj_scanpos = xsp;
    if (jj_3_269()) {
    jj_scanpos = xsp;
    if (jj_3_270()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_187()) {
    jj_scanpos = xsp;
    if (jj_3_188()) {
    jj_scanpos = xsp;
    if (jj_3_189()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_56() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(EXPLICIT_TKN)) return true;
    if (jj_scan_token(TAGS_TKN)) return true;
    return false;
  }

  final private boolean jj_3_55() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3_150() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_scan_token(LESSER_THAN_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(XMLTAGTERMINATINGBRACKET_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_54() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3_53() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3_151() {
    if (jj_3R_124()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_150()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_scan_token(LEFT_PARENTHESIS_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_3R_150()) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_scan_token(RIGHT_PARENTHESIS_TKN)) return true;
    return false;
  }

  final private boolean jj_3_51() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3_149() {
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(EXCLAMATION_TKN)) return true;
    if (jj_3R_203()) return true;
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3_48() {
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3_153() {
    if (jj_3R_120()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_149()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_151()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(SET_TKN)) return true;
    if (jj_scan_token(OF_TKN)) return true;
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3_308() {
    if (jj_scan_token(OPTIONAL_TKN)) return true;
    return false;
  }

  final private boolean jj_3_146() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_3R_240()) return true;
    return false;
  }

  final private boolean jj_3_307() {
    if (jj_scan_token(ABSENT_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LEFT_PARENTHESIS_TKN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RIGHT_PARENTHESIS_TKN)) return true;
    return false;
  }

  final private boolean jj_3_107() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3_306() {
    if (jj_scan_token(PRESENT_TKN)) return true;
    return false;
  }

  final private boolean jj_3_106() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3_147() {
    if (jj_3R_124()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_146()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_188() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_306()) {
    jj_scanpos = xsp;
    if (jj_3_307()) {
    jj_scanpos = xsp;
    if (jj_3_308()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_106()) {
    jj_scanpos = xsp;
    if (jj_3_107()) return true;
    }
    return false;
  }

  final private boolean jj_3_145() {
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3_267() {
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_202()) return true;
    return false;
  }

  final private boolean jj_3_222() {
    if (jj_3R_151()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(LEFT_PARENTHESIS_TKN)) return true;
    if (jj_3R_198()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_267()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PARENTHESIS_TKN)) return true;
    return false;
  }

  final private boolean jj_3_221() {
    if (jj_3R_150()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3_148() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_120()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_145()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_147()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_220() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_220()) {
    jj_scanpos = xsp;
    if (jj_3_221()) {
    jj_scanpos = xsp;
    if (jj_3_222()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3_105() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3_152() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_148()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_186() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_152()) {
    jj_scanpos = xsp;
    if (jj_3_153()) return true;
    }
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3_266() {
    if (jj_3R_129()) return true;
    return false;
  }

  final private boolean jj_3_305() {
    if (jj_3R_188()) return true;
    return false;
  }

  final private boolean jj_3_185() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_131()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3_265() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3_304() {
    if (jj_3R_187()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_185()) {
    jj_scanpos = xsp;
    if (jj_3_186()) return true;
    }
    return false;
  }

  final private boolean jj_3R_163() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_265()) {
    jj_scanpos = xsp;
    if (jj_3_266()) return true;
    }
    return false;
  }

  final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_221() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_304()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_305()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_219() {
    if (jj_3R_148()) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_scan_token(DOT_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_204()) return true;
    return false;
  }

  final private boolean jj_3_218() {
    if (jj_3R_148()) return true;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_218()) {
    jj_scanpos = xsp;
    if (jj_3_219()) return true;
    }
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) return true;
    }
    return false;
  }

  final private boolean jj_3R_189() {
    Token xsp;
    if (jj_3_5()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_3R_204()) return true;
    return false;
  }

  final private boolean jj_3_264() {
    if (jj_scan_token(SEQUENCE_TKN)) return true;
    if (jj_3R_164()) return true;
    if (jj_scan_token(OF_TKN)) return true;
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3_184() {
    if (jj_scan_token(SET_TKN)) return true;
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_121()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_scan_token(ELLIPSIS_TKN)) return true;
    return false;
  }

  final private boolean jj_3_263() {
    if (jj_scan_token(SEQUENCE_TKN)) return true;
    if (jj_3R_60()) return true;
    if (jj_scan_token(OF_TKN)) return true;
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_222()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_189()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_181() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3_104() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_3R_149()) return true;
    return false;
  }

  final private boolean jj_3_303() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_186()) return true;
    return false;
  }

  final private boolean jj_3_103() {
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_3R_186()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_303()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_262() {
    if (jj_scan_token(SET_TKN)) return true;
    if (jj_3R_164()) return true;
    if (jj_scan_token(OF_TKN)) return true;
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3_183() {
    if (jj_scan_token(SET_TKN)) return true;
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_120()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_181()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_144() {
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3_102() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_scan_token(ELLIPSIS_TKN)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LEFT_PARENTHESIS_TKN)) return true;
    if (jj_3R_147()) return true;
    if (jj_scan_token(RIGHT_PARENTHESIS_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(ELLIPSIS_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_144()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_3R_242()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_102()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_103()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_104()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(TYPEREFERENCE)) return true;
    if (jj_3R_130()) return true;
    if (jj_scan_token(ASSIGN_OP_TKN)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  final private boolean jj_3_182() {
    if (jj_scan_token(SET_TKN)) return true;
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_261() {
    if (jj_scan_token(SET_TKN)) return true;
    if (jj_3R_60()) return true;
    if (jj_scan_token(OF_TKN)) return true;
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_182()) {
    jj_scanpos = xsp;
    if (jj_3_183()) {
    jj_scanpos = xsp;
    if (jj_3_184()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_261()) {
    jj_scanpos = xsp;
    if (jj_3_262()) {
    jj_scanpos = xsp;
    if (jj_3_263()) {
    jj_scanpos = xsp;
    if (jj_3_264()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_scan_token(ELLIPSIS_TKN)) return true;
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_220()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_217() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3_143() {
    if (jj_scan_token(SEQUENCE_TKN)) return true;
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_216() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_216()) {
    jj_scanpos = xsp;
    if (jj_3_217()) return true;
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_scan_token(LESSER_THAN_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(XMLTAGTERMINATINGBRACKET_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(ENUMERATED_TKN)) return true;
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_200()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_142() {
    if (jj_scan_token(SEQUENCE_TKN)) return true;
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_121()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_220()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_140() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_260() {
    if (jj_scan_token(OBJECTDESCRIPTOR_TKN)) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_scan_token(LESSER_THAN_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(GREATER_THAN_TKN)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(XMLENDTAGBRACKET_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(GREATER_THAN_TKN)) return true;
    return false;
  }

  final private boolean jj_3_141() {
    if (jj_scan_token(SEQUENCE_TKN)) return true;
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_120()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_140()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_302() {
    if (jj_3R_185()) return true;
    return false;
  }

  final private boolean jj_3_259() {
    if (jj_scan_token(UTCTIME_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    return false;
  }

  final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_141()) {
    jj_scanpos = xsp;
    if (jj_3_142()) {
    jj_scanpos = xsp;
    if (jj_3_143()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_301() {
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3_215() {
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3_258() {
    if (jj_scan_token(GENERALIZEDTIME_TKN)) return true;
    return false;
  }

  final private boolean jj_3_101() {
    if (jj_scan_token(LESSER_THAN_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(XMLTAGTERMINATINGBRACKET_TKN)) return true;
    return false;
  }

  final private boolean jj_3_214() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_301()) {
    jj_scanpos = xsp;
    if (jj_3_302()) return true;
    }
    return false;
  }

  final private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_258()) {
    jj_scanpos = xsp;
    if (jj_3_259()) {
    jj_scanpos = xsp;
    if (jj_3_260()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_100() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3_213() {
    if (jj_3R_146()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_252() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_100()) {
    jj_scanpos = xsp;
    if (jj_3_101()) return true;
    }
    return false;
  }

  final private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_213()) {
    jj_scanpos = xsp;
    if (jj_3_214()) {
    jj_scanpos = xsp;
    if (jj_3_215()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_180() {
    if (jj_scan_token(LESSER_THAN_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(GREATER_THAN_TKN)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(XMLENDTAGBRACKET_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(GREATER_THAN_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3_257() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3_212() {
    if (jj_3R_145()) return true;
    return false;
  }

  final private boolean jj_3R_259() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_257()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_300() {
    if (jj_3R_183()) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_212()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(TYPEREFERENCE)) return true;
    return false;
  }

  final private boolean jj_3_299() {
    if (jj_3R_182()) return true;
    return false;
  }

  final private boolean jj_3_179() {
    if (jj_scan_token(LESSER_THAN_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(GREATER_THAN_TKN)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(XMLENDTAGBRACKET_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(GREATER_THAN_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_179()) {
    jj_scanpos = xsp;
    if (jj_3_180()) return true;
    }
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_scan_token(NULL_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(ASSIGN_OP_TKN)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(WITH_TKN)) return true;
    if (jj_scan_token(COMPONENT_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_299()) {
    jj_scanpos = xsp;
    if (jj_3_300()) return true;
    }
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_193()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_99() {
    if (jj_scan_token(MINUS_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_99()) jj_scanpos = xsp;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_3R_259()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(NULL_TKN)) return true;
    return false;
  }

  final private boolean jj_3_256() {
    if (jj_3R_162()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_scan_token(TYPEREFERENCE)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_44()) return true;
    if (jj_3R_130()) return true;
    if (jj_scan_token(ASSIGN_OP_TKN)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_256()) {
    jj_scanpos = xsp;
    if (jj_3R_258()) return true;
    }
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(OBJECT_TKN)) return true;
    if (jj_scan_token(IDENTIFIER_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(NULL_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_201()) return true;
    return false;
  }

  final private boolean jj_3_98() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LEFT_PARENTHESIS_TKN)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(RIGHT_PARENTHESIS_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(FROM_TKN)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(TYPEREFERENCE)) return true;
    if (jj_scan_token(ASSIGN_OP_TKN)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3_139() {
    if (jj_scan_token(CSTRING)) return true;
    return false;
  }

  final private boolean jj_3_211() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3_138() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_251() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_211()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_255() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_138()) {
    jj_scanpos = xsp;
    if (jj_3_139()) return true;
    }
    return false;
  }

  final private boolean jj_3_97() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LEFT_PARENTHESIS_TKN)) return true;
    if (jj_3R_105()) return true;
    if (jj_scan_token(RIGHT_PARENTHESIS_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(CHARACTER_TKN)) return true;
    if (jj_scan_token(STRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3_178() {
    if (jj_3R_139()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_97()) {
    jj_scanpos = xsp;
    if (jj_3_98()) return true;
    }
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(SIZE_TKN)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3_177() {
    if (jj_3R_139()) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_scan_token(STAR_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_177()) {
    jj_scanpos = xsp;
    if (jj_3_178()) return true;
    }
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(CSTRING)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_298() {
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3_137() {
    if (jj_scan_token(CONTAINING_TKN)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3_297() {
    if (jj_scan_token(MAX_TKN)) return true;
    return false;
  }

  final private boolean jj_3_136() {
    if (jj_scan_token(HSTRING)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(EXTERNAL_TKN)) return true;
    return false;
  }

  final private boolean jj_3_135() {
    if (jj_scan_token(BSTRING)) return true;
    return false;
  }

  final private boolean jj_3R_244() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_297()) {
    jj_scanpos = xsp;
    if (jj_3_298()) return true;
    }
    return false;
  }

  final private boolean jj_3_176() {
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_135()) {
    jj_scanpos = xsp;
    if (jj_3_136()) {
    jj_scanpos = xsp;
    if (jj_3_137()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_137() {
    Token xsp;
    if (jj_3_176()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_176()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3_210() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3_96() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_210()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_296() {
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_scan_token(DOT_TKN)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_295() {
    if (jj_scan_token(MIN_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(LESSER_THAN_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(XMLTAGTERMINATINGBRACKET_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_295()) {
    jj_scanpos = xsp;
    if (jj_3_296()) return true;
    }
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(OCTET_TKN)) return true;
    if (jj_scan_token(STRING_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_215()) return true;
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_216()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_294() {
    if (jj_scan_token(LESSER_THAN_TKN)) return true;
    return false;
  }

  final private boolean jj_3_95() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_175() {
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(EMBEDDED_TKN)) return true;
    if (jj_scan_token(PDV_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_294()) jj_scanpos = xsp;
    if (jj_3R_244()) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    Token xsp;
    if (jj_3_175()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_175()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(INTEGER_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_95()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_134() {
    if (jj_scan_token(LESSER_THAN_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(XMLTAGTERMINATINGBRACKET_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    Token xsp;
    if (jj_3_134()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_134()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_209() {
    if (jj_scan_token(PRIVATE_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3_293() {
    if (jj_scan_token(LESSER_THAN_TKN)) return true;
    return false;
  }

  final private boolean jj_3_174() {
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3_208() {
    if (jj_scan_token(APPLICATION_TKN)) return true;
    return false;
  }

  final private boolean jj_3_173() {
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_3R_243()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_293()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_196()) return true;
    if (jj_scan_token(DOT_TKN)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3_207() {
    if (jj_scan_token(UNIVERSAL_TKN)) return true;
    return false;
  }

  final private boolean jj_3_172() {
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_207()) {
    jj_scanpos = xsp;
    if (jj_3_208()) {
    jj_scanpos = xsp;
    if (jj_3_209()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_172()) {
    jj_scanpos = xsp;
    if (jj_3_173()) {
    jj_scanpos = xsp;
    if (jj_3_174()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3_94() {
    if (jj_scan_token(LESSER_THAN_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(XMLTAGTERMINATINGBRACKET_TKN)) return true;
    return false;
  }

  final private boolean jj_3_133() {
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3_132() {
    if (jj_scan_token(CSTRING)) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_3R_218()) return true;
    if (jj_scan_token(DOTDOT_TKN)) return true;
    if (jj_3R_219()) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3_131() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    return false;
  }

  final private boolean jj_3_206() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_131()) {
    jj_scanpos = xsp;
    if (jj_3_132()) {
    jj_scanpos = xsp;
    if (jj_3_133()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_93() {
    if (jj_scan_token(LESSER_THAN_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(XMLTAGTERMINATINGBRACKET_TKN)) return true;
    return false;
  }

  final private boolean jj_3_171() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3_205() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_246() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_93()) {
    jj_scanpos = xsp;
    if (jj_3_94()) return true;
    }
    return false;
  }

  final private boolean jj_3R_209() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_205()) {
    jj_scanpos = xsp;
    if (jj_3_206()) return true;
    }
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_3R_116()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_171()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(INCLUDES_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(TYPEREFERENCE)) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3_130() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_204() {
    if (jj_3R_144()) return true;
    return false;
  }

  final private boolean jj_3_292() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_175() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_292()) jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_scan_token(LEFT_BRACKET_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_204()) jj_scanpos = xsp;
    if (jj_3R_209()) return true;
    if (jj_scan_token(RIGHT_BRACKET_TKN)) return true;
    return false;
  }

  final private boolean jj_3_170() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_211()) return true;
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_212()) return true;
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_213()) return true;
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_214()) return true;
    return false;
  }

  final private boolean jj_3_92() {
    if (jj_scan_token(FALSE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_91() {
    if (jj_scan_token(TRUE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_169() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_134()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_91()) {
    jj_scanpos = xsp;
    if (jj_3_92()) return true;
    }
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_196()) return true;
    if (jj_scan_token(DOT_TKN)) return true;
    if (jj_scan_token(TYPEREFERENCE)) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3_168() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_133()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_129() {
    if (jj_scan_token(CONTAINING_TKN)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3_203() {
    if (jj_3R_143()) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_168()) {
    jj_scanpos = xsp;
    if (jj_3_169()) {
    jj_scanpos = xsp;
    if (jj_3_170()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(PATTERN_TKN)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3_128() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(TYPEREFERENCE)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(BOOLEAN_TKN)) return true;
    return false;
  }

  final private boolean jj_3_202() {
    if (jj_3R_143()) return true;
    if (jj_scan_token(EXPLICIT_TKN)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3_255() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3_254() {
    if (jj_3R_160()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    return false;
  }

  final private boolean jj_3_127() {
    if (jj_scan_token(LEFT_BRACE_TKN)) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(RIGHT_BRACE_TKN)) return true;
    return false;
  }

  final private boolean jj_3_253() {
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3_126() {
    if (jj_scan_token(HSTRING)) return true;
    return false;
  }

  final private boolean jj_3_201() {
    if (jj_3R_143()) return true;
    if (jj_scan_token(IMPLICIT_TKN)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3_252() {
    if (jj_scan_token(CSTRING)) return true;
    return false;
  }

  final private boolean jj_3_291() {
    if (jj_3R_180()) return true;
    return false;
  }

  final private boolean jj_3_125() {
    if (jj_scan_token(BSTRING)) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_252()) {
    jj_scanpos = xsp;
    if (jj_3_253()) {
    jj_scanpos = xsp;
    if (jj_3_254()) {
    jj_scanpos = xsp;
    if (jj_3_255()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_201()) {
    jj_scanpos = xsp;
    if (jj_3_202()) {
    jj_scanpos = xsp;
    if (jj_3_203()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_290() {
    if (jj_3R_179()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_125()) {
    jj_scanpos = xsp;
    if (jj_3_126()) {
    jj_scanpos = xsp;
    if (jj_3_127()) {
    jj_scanpos = xsp;
    if (jj_3_128()) {
    jj_scanpos = xsp;
    if (jj_3_129()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_289() {
    if (jj_3R_178()) return true;
    return false;
  }

  final private boolean jj_3_288() {
    if (jj_3R_177()) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(LESSER_THAN_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(GREATER_THAN_TKN)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(XMLENDTAGBRACKET_TKN)) return true;
    if (jj_scan_token(AMPERSAND_TKN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(GREATER_THAN_TKN)) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3_287() {
    if (jj_3R_164()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(SEQUENCE_TKN)) return true;
    if (jj_scan_token(OF_TKN)) return true;
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3_286() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3_285() {
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3_284() {
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_251() {
    if (jj_scan_token(COMMA_TKN)) return true;
    if (jj_3R_161()) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_284()) {
    jj_scanpos = xsp;
    if (jj_3_285()) {
    jj_scanpos = xsp;
    if (jj_3_286()) {
    jj_scanpos = xsp;
    if (jj_3_287()) {
    jj_scanpos = xsp;
    if (jj_3_288()) {
    jj_scanpos = xsp;
    if (jj_3_289()) {
    jj_scanpos = xsp;
    if (jj_3_290()) {
    jj_scanpos = xsp;
    if (jj_3_291()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_3R_161()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_251()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_167() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LESSER_THAN_TKN)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    Token xsp;
    if (jj_3_167()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_167()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3_124() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LEFT_PARENTHESIS_TKN)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(RIGHT_PARENTHESIS_TKN)) return true;
    return false;
  }

  public ASN1ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[308];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public ASN1Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  public ASN1Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ASN1ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ASN1Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ASN1ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ASN1Parser(ASN1ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ASN1ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[123];
    for (int i = 0; i < 123; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 123; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 308; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
            case 119: jj_3_120(); break;
            case 120: jj_3_121(); break;
            case 121: jj_3_122(); break;
            case 122: jj_3_123(); break;
            case 123: jj_3_124(); break;
            case 124: jj_3_125(); break;
            case 125: jj_3_126(); break;
            case 126: jj_3_127(); break;
            case 127: jj_3_128(); break;
            case 128: jj_3_129(); break;
            case 129: jj_3_130(); break;
            case 130: jj_3_131(); break;
            case 131: jj_3_132(); break;
            case 132: jj_3_133(); break;
            case 133: jj_3_134(); break;
            case 134: jj_3_135(); break;
            case 135: jj_3_136(); break;
            case 136: jj_3_137(); break;
            case 137: jj_3_138(); break;
            case 138: jj_3_139(); break;
            case 139: jj_3_140(); break;
            case 140: jj_3_141(); break;
            case 141: jj_3_142(); break;
            case 142: jj_3_143(); break;
            case 143: jj_3_144(); break;
            case 144: jj_3_145(); break;
            case 145: jj_3_146(); break;
            case 146: jj_3_147(); break;
            case 147: jj_3_148(); break;
            case 148: jj_3_149(); break;
            case 149: jj_3_150(); break;
            case 150: jj_3_151(); break;
            case 151: jj_3_152(); break;
            case 152: jj_3_153(); break;
            case 153: jj_3_154(); break;
            case 154: jj_3_155(); break;
            case 155: jj_3_156(); break;
            case 156: jj_3_157(); break;
            case 157: jj_3_158(); break;
            case 158: jj_3_159(); break;
            case 159: jj_3_160(); break;
            case 160: jj_3_161(); break;
            case 161: jj_3_162(); break;
            case 162: jj_3_163(); break;
            case 163: jj_3_164(); break;
            case 164: jj_3_165(); break;
            case 165: jj_3_166(); break;
            case 166: jj_3_167(); break;
            case 167: jj_3_168(); break;
            case 168: jj_3_169(); break;
            case 169: jj_3_170(); break;
            case 170: jj_3_171(); break;
            case 171: jj_3_172(); break;
            case 172: jj_3_173(); break;
            case 173: jj_3_174(); break;
            case 174: jj_3_175(); break;
            case 175: jj_3_176(); break;
            case 176: jj_3_177(); break;
            case 177: jj_3_178(); break;
            case 178: jj_3_179(); break;
            case 179: jj_3_180(); break;
            case 180: jj_3_181(); break;
            case 181: jj_3_182(); break;
            case 182: jj_3_183(); break;
            case 183: jj_3_184(); break;
            case 184: jj_3_185(); break;
            case 185: jj_3_186(); break;
            case 186: jj_3_187(); break;
            case 187: jj_3_188(); break;
            case 188: jj_3_189(); break;
            case 189: jj_3_190(); break;
            case 190: jj_3_191(); break;
            case 191: jj_3_192(); break;
            case 192: jj_3_193(); break;
            case 193: jj_3_194(); break;
            case 194: jj_3_195(); break;
            case 195: jj_3_196(); break;
            case 196: jj_3_197(); break;
            case 197: jj_3_198(); break;
            case 198: jj_3_199(); break;
            case 199: jj_3_200(); break;
            case 200: jj_3_201(); break;
            case 201: jj_3_202(); break;
            case 202: jj_3_203(); break;
            case 203: jj_3_204(); break;
            case 204: jj_3_205(); break;
            case 205: jj_3_206(); break;
            case 206: jj_3_207(); break;
            case 207: jj_3_208(); break;
            case 208: jj_3_209(); break;
            case 209: jj_3_210(); break;
            case 210: jj_3_211(); break;
            case 211: jj_3_212(); break;
            case 212: jj_3_213(); break;
            case 213: jj_3_214(); break;
            case 214: jj_3_215(); break;
            case 215: jj_3_216(); break;
            case 216: jj_3_217(); break;
            case 217: jj_3_218(); break;
            case 218: jj_3_219(); break;
            case 219: jj_3_220(); break;
            case 220: jj_3_221(); break;
            case 221: jj_3_222(); break;
            case 222: jj_3_223(); break;
            case 223: jj_3_224(); break;
            case 224: jj_3_225(); break;
            case 225: jj_3_226(); break;
            case 226: jj_3_227(); break;
            case 227: jj_3_228(); break;
            case 228: jj_3_229(); break;
            case 229: jj_3_230(); break;
            case 230: jj_3_231(); break;
            case 231: jj_3_232(); break;
            case 232: jj_3_233(); break;
            case 233: jj_3_234(); break;
            case 234: jj_3_235(); break;
            case 235: jj_3_236(); break;
            case 236: jj_3_237(); break;
            case 237: jj_3_238(); break;
            case 238: jj_3_239(); break;
            case 239: jj_3_240(); break;
            case 240: jj_3_241(); break;
            case 241: jj_3_242(); break;
            case 242: jj_3_243(); break;
            case 243: jj_3_244(); break;
            case 244: jj_3_245(); break;
            case 245: jj_3_246(); break;
            case 246: jj_3_247(); break;
            case 247: jj_3_248(); break;
            case 248: jj_3_249(); break;
            case 249: jj_3_250(); break;
            case 250: jj_3_251(); break;
            case 251: jj_3_252(); break;
            case 252: jj_3_253(); break;
            case 253: jj_3_254(); break;
            case 254: jj_3_255(); break;
            case 255: jj_3_256(); break;
            case 256: jj_3_257(); break;
            case 257: jj_3_258(); break;
            case 258: jj_3_259(); break;
            case 259: jj_3_260(); break;
            case 260: jj_3_261(); break;
            case 261: jj_3_262(); break;
            case 262: jj_3_263(); break;
            case 263: jj_3_264(); break;
            case 264: jj_3_265(); break;
            case 265: jj_3_266(); break;
            case 266: jj_3_267(); break;
            case 267: jj_3_268(); break;
            case 268: jj_3_269(); break;
            case 269: jj_3_270(); break;
            case 270: jj_3_271(); break;
            case 271: jj_3_272(); break;
            case 272: jj_3_273(); break;
            case 273: jj_3_274(); break;
            case 274: jj_3_275(); break;
            case 275: jj_3_276(); break;
            case 276: jj_3_277(); break;
            case 277: jj_3_278(); break;
            case 278: jj_3_279(); break;
            case 279: jj_3_280(); break;
            case 280: jj_3_281(); break;
            case 281: jj_3_282(); break;
            case 282: jj_3_283(); break;
            case 283: jj_3_284(); break;
            case 284: jj_3_285(); break;
            case 285: jj_3_286(); break;
            case 286: jj_3_287(); break;
            case 287: jj_3_288(); break;
            case 288: jj_3_289(); break;
            case 289: jj_3_290(); break;
            case 290: jj_3_291(); break;
            case 291: jj_3_292(); break;
            case 292: jj_3_293(); break;
            case 293: jj_3_294(); break;
            case 294: jj_3_295(); break;
            case 295: jj_3_296(); break;
            case 296: jj_3_297(); break;
            case 297: jj_3_298(); break;
            case 298: jj_3_299(); break;
            case 299: jj_3_300(); break;
            case 300: jj_3_301(); break;
            case 301: jj_3_302(); break;
            case 302: jj_3_303(); break;
            case 303: jj_3_304(); break;
            case 304: jj_3_305(); break;
            case 305: jj_3_306(); break;
            case 306: jj_3_307(); break;
            case 307: jj_3_308(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
class MyVisitor extends DepthFirstVisitor
{
   public void visit(NodeToken n)
   {
      System.out.println("visit " + n.tokenImage);
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
