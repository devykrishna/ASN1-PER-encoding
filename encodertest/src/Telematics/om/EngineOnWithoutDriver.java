/*  
 *   This file was generated by openASN.1 - an open source ASN.1 toolkit for java
 *
 *   openASN.1 is Copyright (C) 2007 Clayton Hoss, Marc Weyland
 *
 *   openASN.1 is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU Lesser General Public License as 
 *   published by the Free Software Foundation, either version 3 of 
 *   the License, or (at your option) any later version.
 *
 *   openASN.1 is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *   GNU Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with openASN.1. If not, see <http://www.gnu.org/licenses/>.
 * 
 */
package Telematics.om;

import java.util.List;

public class EngineOnWithoutDriver extends Object {
	public EngineOnWithoutDriver() {
	}

	private Double peakValue;

	private Double threshold;

	private TimeStamp leaveStartTime;

	private Position position;

	public Double getPeakValue() {
		
		return this.peakValue;
	}
	
	public Double getThreshold() {
		
		return this.threshold;
	}
	
	public TimeStamp getLeaveStartTime() {
		
		return this.leaveStartTime;
	}
	
	public Position getPosition() {
		
		return this.position;
	}
	
	public void setPeakValue(Double peakValue) {
		
		this.peakValue = peakValue;
	}

	public void setThreshold(Double threshold) {
		
		this.threshold = threshold;
	}

	public void setLeaveStartTime(TimeStamp leaveStartTime) {
		
		this.leaveStartTime = leaveStartTime;
	}

	public void setPosition(Position position) {
		
		this.position = position;
	}

	@Override
	public boolean equals(Object anObject) {
		if (this == anObject) return true;
		if ((anObject == null) || (anObject.getClass() != this.getClass())) return false;

		EngineOnWithoutDriver comparator = (EngineOnWithoutDriver)anObject;

		if ((this.getPeakValue() != comparator.getPeakValue()) && ((this.getPeakValue() == null) || (! this.getPeakValue().equals(comparator.getPeakValue())))) return false;
		if ((this.getThreshold() != comparator.getThreshold()) && ((this.getThreshold() == null) || (! this.getThreshold().equals(comparator.getThreshold())))) return false;
		if ((this.getLeaveStartTime() != comparator.getLeaveStartTime()) && ((this.getLeaveStartTime() == null) || (! this.getLeaveStartTime().equals(comparator.getLeaveStartTime())))) return false;
		if ((this.getPosition() != comparator.getPosition()) && ((this.getPosition() == null) || (! this.getPosition().equals(comparator.getPosition())))) return false;
		return true;
	}

	@Override
	public int hashCode() {
		int hash = 7687;

		hash = 3929 * hash + (null == this.getPeakValue() ? 0 : this.getPeakValue().hashCode());
		hash = 263 * hash + (null == this.getThreshold() ? 0 : this.getThreshold().hashCode());
		hash = 5023 * hash + (null == this.getLeaveStartTime() ? 0 : this.getLeaveStartTime().hashCode());
		hash = 4099 * hash + (null == this.getPosition() ? 0 : this.getPosition().hashCode());
		return hash;
	}

}
