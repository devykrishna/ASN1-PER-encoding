/*  
 *   This file was generated by openASN.1 - an open source ASN.1 toolkit for java
 *
 *   openASN.1 is Copyright (C) 2007 Clayton Hoss, Marc Weyland
 *
 *   openASN.1 is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU Lesser General Public License as 
 *   published by the Free Software Foundation, either version 3 of 
 *   the License, or (at your option) any later version.
 *
 *   openASN.1 is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *   GNU Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with openASN.1. If not, see <http://www.gnu.org/licenses/>.
 * 
 */
package Telematics.om;

import java.util.List;

public class Behaviours extends Object {
	public Behaviours() {
	}

	private BehaviourAdvancedKeyFactor excessSpeeding;

	private BehaviourUltimateKeyFactor accelerating;

	private BehaviourUltimateKeyFactor braking;

	private BehaviourUltimateKeyFactor cornering;

	private BehaviourAdvancedKeyFactor harshRPM;

	private BehaviourUltimateKeyFactor harshLaneChanging;

	private BehaviourBasicKeyFactor fatiguedDriving;

	private BehaviourUltimateKeyFactor laneDeparture;

	private BehaviourUltimateKeyFactor overSafeHeadway;

	private BehaviourUltimateKeyFactor pedestrianCollision;

	private BehaviourUltimateKeyFactor forwardCollision;

	private BehaviourAdvancedKeyFactor overRevving;

	private BehaviourBasicKeyFactor speedbreakerBump;

	private EngineOnWithoutDriver engineOnWithoutDriver;

	private HarshOvertaking harshOvertaking;

	public BehaviourAdvancedKeyFactor getExcessSpeeding() {
		
		return this.excessSpeeding;
	}
	
	public BehaviourUltimateKeyFactor getAccelerating() {
		
		return this.accelerating;
	}
	
	public BehaviourUltimateKeyFactor getBraking() {
		
		return this.braking;
	}
	
	public BehaviourUltimateKeyFactor getCornering() {
		
		return this.cornering;
	}
	
	public BehaviourAdvancedKeyFactor getHarshRPM() {
		
		return this.harshRPM;
	}
	
	public BehaviourUltimateKeyFactor getHarshLaneChanging() {
		
		return this.harshLaneChanging;
	}
	
	public BehaviourBasicKeyFactor getFatiguedDriving() {
		
		return this.fatiguedDriving;
	}
	
	public BehaviourUltimateKeyFactor getLaneDeparture() {
		
		return this.laneDeparture;
	}
	
	public BehaviourUltimateKeyFactor getOverSafeHeadway() {
		
		return this.overSafeHeadway;
	}
	
	public BehaviourUltimateKeyFactor getPedestrianCollision() {
		
		return this.pedestrianCollision;
	}
	
	public BehaviourUltimateKeyFactor getForwardCollision() {
		
		return this.forwardCollision;
	}
	
	public BehaviourAdvancedKeyFactor getOverRevving() {
		
		return this.overRevving;
	}
	
	public BehaviourBasicKeyFactor getSpeedbreakerBump() {
		
		return this.speedbreakerBump;
	}
	
	public EngineOnWithoutDriver getEngineOnWithoutDriver() {
		
		return this.engineOnWithoutDriver;
	}
	
	public HarshOvertaking getHarshOvertaking() {
		
		return this.harshOvertaking;
	}
	
	public void setExcessSpeeding(BehaviourAdvancedKeyFactor excessSpeeding) {
		
		this.excessSpeeding = excessSpeeding;
	}

	public void setAccelerating(BehaviourUltimateKeyFactor accelerating) {
		
		this.accelerating = accelerating;
	}

	public void setBraking(BehaviourUltimateKeyFactor braking) {
		
		this.braking = braking;
	}

	public void setCornering(BehaviourUltimateKeyFactor cornering) {
		
		this.cornering = cornering;
	}

	public void setHarshRPM(BehaviourAdvancedKeyFactor harshRPM) {
		
		this.harshRPM = harshRPM;
	}

	public void setHarshLaneChanging(BehaviourUltimateKeyFactor harshLaneChanging) {
		
		this.harshLaneChanging = harshLaneChanging;
	}

	public void setFatiguedDriving(BehaviourBasicKeyFactor fatiguedDriving) {
		
		this.fatiguedDriving = fatiguedDriving;
	}

	public void setLaneDeparture(BehaviourUltimateKeyFactor laneDeparture) {
		
		this.laneDeparture = laneDeparture;
	}

	public void setOverSafeHeadway(BehaviourUltimateKeyFactor overSafeHeadway) {
		
		this.overSafeHeadway = overSafeHeadway;
	}

	public void setPedestrianCollision(BehaviourUltimateKeyFactor pedestrianCollision) {
		
		this.pedestrianCollision = pedestrianCollision;
	}

	public void setForwardCollision(BehaviourUltimateKeyFactor forwardCollision) {
		
		this.forwardCollision = forwardCollision;
	}

	public void setOverRevving(BehaviourAdvancedKeyFactor overRevving) {
		
		this.overRevving = overRevving;
	}

	public void setSpeedbreakerBump(BehaviourBasicKeyFactor speedbreakerBump) {
		
		this.speedbreakerBump = speedbreakerBump;
	}

	public void setEngineOnWithoutDriver(EngineOnWithoutDriver engineOnWithoutDriver) {
		
		this.engineOnWithoutDriver = engineOnWithoutDriver;
	}

	public void setHarshOvertaking(HarshOvertaking harshOvertaking) {
		
		this.harshOvertaking = harshOvertaking;
	}

	@Override
	public boolean equals(Object anObject) {
		if (this == anObject) return true;
		if ((anObject == null) || (anObject.getClass() != this.getClass())) return false;

		Behaviours comparator = (Behaviours)anObject;

		if ((this.getExcessSpeeding() != comparator.getExcessSpeeding()) && ((this.getExcessSpeeding() == null) || (! this.getExcessSpeeding().equals(comparator.getExcessSpeeding())))) return false;
		if ((this.getAccelerating() != comparator.getAccelerating()) && ((this.getAccelerating() == null) || (! this.getAccelerating().equals(comparator.getAccelerating())))) return false;
		if ((this.getBraking() != comparator.getBraking()) && ((this.getBraking() == null) || (! this.getBraking().equals(comparator.getBraking())))) return false;
		if ((this.getCornering() != comparator.getCornering()) && ((this.getCornering() == null) || (! this.getCornering().equals(comparator.getCornering())))) return false;
		if ((this.getHarshRPM() != comparator.getHarshRPM()) && ((this.getHarshRPM() == null) || (! this.getHarshRPM().equals(comparator.getHarshRPM())))) return false;
		if ((this.getHarshLaneChanging() != comparator.getHarshLaneChanging()) && ((this.getHarshLaneChanging() == null) || (! this.getHarshLaneChanging().equals(comparator.getHarshLaneChanging())))) return false;
		if ((this.getFatiguedDriving() != comparator.getFatiguedDriving()) && ((this.getFatiguedDriving() == null) || (! this.getFatiguedDriving().equals(comparator.getFatiguedDriving())))) return false;
		if ((this.getLaneDeparture() != comparator.getLaneDeparture()) && ((this.getLaneDeparture() == null) || (! this.getLaneDeparture().equals(comparator.getLaneDeparture())))) return false;
		if ((this.getOverSafeHeadway() != comparator.getOverSafeHeadway()) && ((this.getOverSafeHeadway() == null) || (! this.getOverSafeHeadway().equals(comparator.getOverSafeHeadway())))) return false;
		if ((this.getPedestrianCollision() != comparator.getPedestrianCollision()) && ((this.getPedestrianCollision() == null) || (! this.getPedestrianCollision().equals(comparator.getPedestrianCollision())))) return false;
		if ((this.getForwardCollision() != comparator.getForwardCollision()) && ((this.getForwardCollision() == null) || (! this.getForwardCollision().equals(comparator.getForwardCollision())))) return false;
		if ((this.getOverRevving() != comparator.getOverRevving()) && ((this.getOverRevving() == null) || (! this.getOverRevving().equals(comparator.getOverRevving())))) return false;
		if ((this.getSpeedbreakerBump() != comparator.getSpeedbreakerBump()) && ((this.getSpeedbreakerBump() == null) || (! this.getSpeedbreakerBump().equals(comparator.getSpeedbreakerBump())))) return false;
		if ((this.getEngineOnWithoutDriver() != comparator.getEngineOnWithoutDriver()) && ((this.getEngineOnWithoutDriver() == null) || (! this.getEngineOnWithoutDriver().equals(comparator.getEngineOnWithoutDriver())))) return false;
		if ((this.getHarshOvertaking() != comparator.getHarshOvertaking()) && ((this.getHarshOvertaking() == null) || (! this.getHarshOvertaking().equals(comparator.getHarshOvertaking())))) return false;
		return true;
	}

	@Override
	public int hashCode() {
		int hash = 5309;

		hash = 4219 * hash + (null == this.getExcessSpeeding() ? 0 : this.getExcessSpeeding().hashCode());
		hash = 4391 * hash + (null == this.getAccelerating() ? 0 : this.getAccelerating().hashCode());
		hash = 151 * hash + (null == this.getBraking() ? 0 : this.getBraking().hashCode());
		hash = 6173 * hash + (null == this.getCornering() ? 0 : this.getCornering().hashCode());
		hash = 5483 * hash + (null == this.getHarshRPM() ? 0 : this.getHarshRPM().hashCode());
		hash = 3253 * hash + (null == this.getHarshLaneChanging() ? 0 : this.getHarshLaneChanging().hashCode());
		hash = 7237 * hash + (null == this.getFatiguedDriving() ? 0 : this.getFatiguedDriving().hashCode());
		hash = 3001 * hash + (null == this.getLaneDeparture() ? 0 : this.getLaneDeparture().hashCode());
		hash = 3253 * hash + (null == this.getOverSafeHeadway() ? 0 : this.getOverSafeHeadway().hashCode());
		hash = 5693 * hash + (null == this.getPedestrianCollision() ? 0 : this.getPedestrianCollision().hashCode());
		hash = 2153 * hash + (null == this.getForwardCollision() ? 0 : this.getForwardCollision().hashCode());
		hash = 6199 * hash + (null == this.getOverRevving() ? 0 : this.getOverRevving().hashCode());
		hash = 1889 * hash + (null == this.getSpeedbreakerBump() ? 0 : this.getSpeedbreakerBump().hashCode());
		hash = 5171 * hash + (null == this.getEngineOnWithoutDriver() ? 0 : this.getEngineOnWithoutDriver().hashCode());
		hash = 5197 * hash + (null == this.getHarshOvertaking() ? 0 : this.getHarshOvertaking().hashCode());
		return hash;
	}

}
