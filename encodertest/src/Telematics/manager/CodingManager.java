/*  
 *   This file was generated by openASN.1 - an open source ASN.1 toolkit for java
 *
 *   openASN.1 is Copyright (C) 2007 Clayton Hoss, Marc Weyland
 *
 *   openASN.1 is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU Lesser General Public License as 
 *   published by the Free Software Foundation, either version 3 of 
 *   the License, or (at your option) any later version.
 *
 *   openASN.1 is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *   GNU Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with openASN.1. If not, see <http://www.gnu.org/licenses/>.
 * 
 */
package Telematics.manager;

import java.io.IOException;

import org.openasn1.codec.coder.ASN1Decoder;
import org.openasn1.codec.coder.ASN1Encoder;
import org.openasn1.codec.manager.BaseCodingManager;
import Telematics.om.*;
import Telematics.coder.*;

public class CodingManager extends BaseCodingManager {
	public CodingManager() { }
	public CodingManager(ASN1Encoder encoder, ASN1Decoder decoder) {
		super(encoder, decoder);
	}
	
	public void encodeIdString(IdString idString, ASN1Encoder encoder) throws IOException {
		IdStringEncoder typeEncoder = new IdStringEncoder(idString, IdStringTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeIdString(IdString idString) throws IOException {
		encodeIdString(idString, getDefaultEncoder());
	}

	public void encodeTimeStamp(TimeStamp timeStamp, ASN1Encoder encoder) throws IOException {
		TimeStampEncoder typeEncoder = new TimeStampEncoder(timeStamp, TimeStampTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeTimeStamp(TimeStamp timeStamp) throws IOException {
		encodeTimeStamp(timeStamp, getDefaultEncoder());
	}

	
	public void encodePosition(Position position, ASN1Encoder encoder) throws IOException {
		PositionEncoder typeEncoder = new PositionEncoder(position, PositionTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodePosition(Position position) throws IOException {
		encodePosition(position, getDefaultEncoder());
	}

	
	public void encodeDriver(Driver driver, ASN1Encoder encoder) throws IOException {
		DriverEncoder typeEncoder = new DriverEncoder(driver, DriverTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeDriver(Driver driver) throws IOException {
		encodeDriver(driver, getDefaultEncoder());
	}

	
	public void encodePassengers(Passengers passengers, ASN1Encoder encoder) throws IOException {
		PassengersEncoder typeEncoder = new PassengersEncoder(passengers, PassengersTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodePassengers(Passengers passengers) throws IOException {
		encodePassengers(passengers, getDefaultEncoder());
	}

	
	public void encodeCustomer(Customer customer, ASN1Encoder encoder) throws IOException {
		CustomerEncoder typeEncoder = new CustomerEncoder(customer, CustomerTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeCustomer(Customer customer) throws IOException {
		encodeCustomer(customer, getDefaultEncoder());
	}

	
	public void encodeSalikPasses(SalikPasses salikPasses, ASN1Encoder encoder) throws IOException {
		SalikPassesEncoder typeEncoder = new SalikPassesEncoder(salikPasses, SalikPassesTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeSalikPasses(SalikPasses salikPasses) throws IOException {
		encodeSalikPasses(salikPasses, getDefaultEncoder());
	}

	
	public void encodeFare(Fare fare, ASN1Encoder encoder) throws IOException {
		FareEncoder typeEncoder = new FareEncoder(fare, FareTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeFare(Fare fare) throws IOException {
		encodeFare(fare, getDefaultEncoder());
	}

	
	public void encodeTripEnd(TripEnd tripEnd, ASN1Encoder encoder) throws IOException {
		TripEndEncoder typeEncoder = new TripEndEncoder(tripEnd, TripEndTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeTripEnd(TripEnd tripEnd) throws IOException {
		encodeTripEnd(tripEnd, getDefaultEncoder());
	}

	
	public void encodeReason(Reason reason, ASN1Encoder encoder) throws IOException {
		ReasonEncoder typeEncoder = new ReasonEncoder(reason, ReasonTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeReason(Reason reason) throws IOException {
		encodeReason(reason, getDefaultEncoder());
	}

	
	public void encodeTripStart(TripStart tripStart, ASN1Encoder encoder) throws IOException {
		TripStartEncoder typeEncoder = new TripStartEncoder(tripStart, TripStartTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeTripStart(TripStart tripStart) throws IOException {
		encodeTripStart(tripStart, getDefaultEncoder());
	}

	
	public void encodeIrregularHWAccessed(IrregularHWAccessed irregularHWAccessed, ASN1Encoder encoder) throws IOException {
		IrregularHWAccessedEncoder typeEncoder = new IrregularHWAccessedEncoder(irregularHWAccessed, IrregularHWAccessedTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeIrregularHWAccessed(IrregularHWAccessed irregularHWAccessed) throws IOException {
		encodeIrregularHWAccessed(irregularHWAccessed, getDefaultEncoder());
	}

	public void encodePassengerOff(PassengerOff passengerOff, ASN1Encoder encoder) throws IOException {
		PassengerOffEncoder typeEncoder = new PassengerOffEncoder(passengerOff, PassengerOffTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodePassengerOff(PassengerOff passengerOff) throws IOException {
		encodePassengerOff(passengerOff, getDefaultEncoder());
	}

	public void encodePassengerOn(PassengerOn passengerOn, ASN1Encoder encoder) throws IOException {
		PassengerOnEncoder typeEncoder = new PassengerOnEncoder(passengerOn, PassengerOnTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodePassengerOn(PassengerOn passengerOn) throws IOException {
		encodePassengerOn(passengerOn, getDefaultEncoder());
	}

	
	public void encodeIrregularDriving(IrregularDriving irregularDriving, ASN1Encoder encoder) throws IOException {
		IrregularDrivingEncoder typeEncoder = new IrregularDrivingEncoder(irregularDriving, IrregularDrivingTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeIrregularDriving(IrregularDriving irregularDriving) throws IOException {
		encodeIrregularDriving(irregularDriving, getDefaultEncoder());
	}

	public void encodeAlarmTrigger(AlarmTrigger alarmTrigger, ASN1Encoder encoder) throws IOException {
		AlarmTriggerEncoder typeEncoder = new AlarmTriggerEncoder(alarmTrigger, AlarmTriggerTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeAlarmTrigger(AlarmTrigger alarmTrigger) throws IOException {
		encodeAlarmTrigger(alarmTrigger, getDefaultEncoder());
	}

	public void encodeDriverStatus(DriverStatus driverStatus, ASN1Encoder encoder) throws IOException {
		DriverStatusEncoder typeEncoder = new DriverStatusEncoder(driverStatus, DriverStatusTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeDriverStatus(DriverStatus driverStatus) throws IOException {
		encodeDriverStatus(driverStatus, getDefaultEncoder());
	}

	public void encodeTheft(Theft theft, ASN1Encoder encoder) throws IOException {
		TheftEncoder typeEncoder = new TheftEncoder(theft, TheftTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeTheft(Theft theft) throws IOException {
		encodeTheft(theft, getDefaultEncoder());
	}

	public void encodeAccident(Accident accident, ASN1Encoder encoder) throws IOException {
		AccidentEncoder typeEncoder = new AccidentEncoder(accident, AccidentTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeAccident(Accident accident) throws IOException {
		encodeAccident(accident, getDefaultEncoder());
	}

	public void encodeEventPayload(EventPayload eventPayload, ASN1Encoder encoder) throws IOException {
		EventPayloadEncoder typeEncoder = new EventPayloadEncoder(eventPayload, EventPayloadTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeEventPayload(EventPayload eventPayload) throws IOException {
		encodeEventPayload(eventPayload, getDefaultEncoder());
	}

	public void encodeEvent(Event event, ASN1Encoder encoder) throws IOException {
		EventEncoder typeEncoder = new EventEncoder(event, EventTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeEvent(Event event) throws IOException {
		encodeEvent(event, getDefaultEncoder());
	}

	public void encodeDiagnosticTroubleCode(DiagnosticTroubleCode diagnosticTroubleCode, ASN1Encoder encoder) throws IOException {
		DiagnosticTroubleCodeEncoder typeEncoder = new DiagnosticTroubleCodeEncoder(diagnosticTroubleCode, DiagnosticTroubleCodeTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeDiagnosticTroubleCode(DiagnosticTroubleCode diagnosticTroubleCode) throws IOException {
		encodeDiagnosticTroubleCode(diagnosticTroubleCode, getDefaultEncoder());
	}

	public void encodeECUDiagnostic(ECUDiagnostic eCUDiagnostic, ASN1Encoder encoder) throws IOException {
		ECUDiagnosticEncoder typeEncoder = new ECUDiagnosticEncoder(eCUDiagnostic, ECUDiagnosticTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeECUDiagnostic(ECUDiagnostic eCUDiagnostic) throws IOException {
		encodeECUDiagnostic(eCUDiagnostic, getDefaultEncoder());
	}

	public void encodeDiagnostics(Diagnostics diagnostics, ASN1Encoder encoder) throws IOException {
		DiagnosticsEncoder typeEncoder = new DiagnosticsEncoder(diagnostics, DiagnosticsTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeDiagnostics(Diagnostics diagnostics) throws IOException {
		encodeDiagnostics(diagnostics, getDefaultEncoder());
	}

	public void encodePositionNSpeed(PositionNSpeed positionNSpeed, ASN1Encoder encoder) throws IOException {
		PositionNSpeedEncoder typeEncoder = new PositionNSpeedEncoder(positionNSpeed, PositionNSpeedTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodePositionNSpeed(PositionNSpeed positionNSpeed) throws IOException {
		encodePositionNSpeed(positionNSpeed, getDefaultEncoder());
	}

	public void encodeHarshOvertaking(HarshOvertaking harshOvertaking, ASN1Encoder encoder) throws IOException {
		HarshOvertakingEncoder typeEncoder = new HarshOvertakingEncoder(harshOvertaking, HarshOvertakingTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeHarshOvertaking(HarshOvertaking harshOvertaking) throws IOException {
		encodeHarshOvertaking(harshOvertaking, getDefaultEncoder());
	}

	public void encodeEngineOnWithoutDriver(EngineOnWithoutDriver engineOnWithoutDriver, ASN1Encoder encoder) throws IOException {
		EngineOnWithoutDriverEncoder typeEncoder = new EngineOnWithoutDriverEncoder(engineOnWithoutDriver, EngineOnWithoutDriverTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeEngineOnWithoutDriver(EngineOnWithoutDriver engineOnWithoutDriver) throws IOException {
		encodeEngineOnWithoutDriver(engineOnWithoutDriver, getDefaultEncoder());
	}

	public void encodeBehaviourUltimateKeyFactor(BehaviourUltimateKeyFactor behaviourUltimateKeyFactor, ASN1Encoder encoder) throws IOException {
		BehaviourUltimateKeyFactorEncoder typeEncoder = new BehaviourUltimateKeyFactorEncoder(behaviourUltimateKeyFactor, BehaviourUltimateKeyFactorTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeBehaviourUltimateKeyFactor(BehaviourUltimateKeyFactor behaviourUltimateKeyFactor) throws IOException {
		encodeBehaviourUltimateKeyFactor(behaviourUltimateKeyFactor, getDefaultEncoder());
	}

	public void encodeBehaviourAdvancedKeyFactor(BehaviourAdvancedKeyFactor behaviourAdvancedKeyFactor, ASN1Encoder encoder) throws IOException {
		BehaviourAdvancedKeyFactorEncoder typeEncoder = new BehaviourAdvancedKeyFactorEncoder(behaviourAdvancedKeyFactor, BehaviourAdvancedKeyFactorTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeBehaviourAdvancedKeyFactor(BehaviourAdvancedKeyFactor behaviourAdvancedKeyFactor) throws IOException {
		encodeBehaviourAdvancedKeyFactor(behaviourAdvancedKeyFactor, getDefaultEncoder());
	}

	public void encodeBehaviourBasicKeyFactor(BehaviourBasicKeyFactor behaviourBasicKeyFactor, ASN1Encoder encoder) throws IOException {
		BehaviourBasicKeyFactorEncoder typeEncoder = new BehaviourBasicKeyFactorEncoder(behaviourBasicKeyFactor, BehaviourBasicKeyFactorTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeBehaviourBasicKeyFactor(BehaviourBasicKeyFactor behaviourBasicKeyFactor) throws IOException {
		encodeBehaviourBasicKeyFactor(behaviourBasicKeyFactor, getDefaultEncoder());
	}

	public void encodeBehaviours(Behaviours behaviours, ASN1Encoder encoder) throws IOException {
		BehavioursEncoder typeEncoder = new BehavioursEncoder(behaviours, BehavioursTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeBehaviours(Behaviours behaviours) throws IOException {
		encodeBehaviours(behaviours, getDefaultEncoder());
	}

	public void encodeDrivingBehavior(DrivingBehavior drivingBehavior, ASN1Encoder encoder) throws IOException {
		DrivingBehaviorEncoder typeEncoder = new DrivingBehaviorEncoder(drivingBehavior, DrivingBehaviorTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeDrivingBehavior(DrivingBehavior drivingBehavior) throws IOException {
		encodeDrivingBehavior(drivingBehavior, getDefaultEncoder());
	}

	public void encodeDrivingSafety(DrivingSafety drivingSafety, ASN1Encoder encoder) throws IOException {
		DrivingSafetyEncoder typeEncoder = new DrivingSafetyEncoder(drivingSafety, DrivingSafetyTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeDrivingSafety(DrivingSafety drivingSafety) throws IOException {
		encodeDrivingSafety(drivingSafety, getDefaultEncoder());
	}

	public void encodeRunning(Running running, ASN1Encoder encoder) throws IOException {
		RunningEncoder typeEncoder = new RunningEncoder(running, RunningTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeRunning(Running running) throws IOException {
		encodeRunning(running, getDefaultEncoder());
	}

	public void encodeBatteryStatus(BatteryStatus batteryStatus, ASN1Encoder encoder) throws IOException {
		BatteryStatusEncoder typeEncoder = new BatteryStatusEncoder(batteryStatus, BatteryStatusTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeBatteryStatus(BatteryStatus batteryStatus) throws IOException {
		encodeBatteryStatus(batteryStatus, getDefaultEncoder());
	}

	public void encodeMaintenance(Maintenance maintenance, ASN1Encoder encoder) throws IOException {
		MaintenanceEncoder typeEncoder = new MaintenanceEncoder(maintenance, MaintenanceTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeMaintenance(Maintenance maintenance) throws IOException {
		encodeMaintenance(maintenance, getDefaultEncoder());
	}

	public void encodeMilElement(MilElement milElement, ASN1Encoder encoder) throws IOException {
		MilElementEncoder typeEncoder = new MilElementEncoder(milElement, MilElementTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeMilElement(MilElement milElement) throws IOException {
		encodeMilElement(milElement, getDefaultEncoder());
	}

	public void encodeBasic(Basic basic, ASN1Encoder encoder) throws IOException {
		BasicEncoder typeEncoder = new BasicEncoder(basic, BasicTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeBasic(Basic basic) throws IOException {
		encodeBasic(basic, getDefaultEncoder());
	}

	public void encodeBody(Body body, ASN1Encoder encoder) throws IOException {
		BodyEncoder typeEncoder = new BodyEncoder(body, BodyTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeBody(Body body) throws IOException {
		encodeBody(body, getDefaultEncoder());
	}

	public void encodeHeader(Header header, ASN1Encoder encoder) throws IOException {
		HeaderEncoder typeEncoder = new HeaderEncoder(header, HeaderTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeHeader(Header header) throws IOException {
		encodeHeader(header, getDefaultEncoder());
	}

	public void encodeTelematics(Telematics telematics, ASN1Encoder encoder) throws IOException {
		TelematicsEncoder typeEncoder = new TelematicsEncoder(telematics, TelematicsTypeInformation.getTypeInformation()); 
		typeEncoder.encode(encoder);
		encoder.finish();
	}

	public void encodeTelematics(Telematics telematics) throws IOException {
		encodeTelematics(telematics, getDefaultEncoder());
	}

}
