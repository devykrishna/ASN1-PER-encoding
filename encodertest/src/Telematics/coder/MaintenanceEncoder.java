/*  
 *   This file was generated by openASN.1 - an open source ASN.1 toolkit for java
 *
 *   openASN.1 is Copyright (C) 2007 Clayton Hoss, Marc Weyland
 *
 *   openASN.1 is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU Lesser General Public License as 
 *   published by the Free Software Foundation, either version 3 of 
 *   the License, or (at your option) any later version.
 *
 *   openASN.1 is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *   GNU Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with openASN.1. If not, see <http://www.gnu.org/licenses/>.
 * 
 */
package Telematics.coder;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import org.openasn1.codec.coder.ASN1Encoder;
import org.openasn1.codec.coder.typecoder.*;
import Telematics.om.*;

public class MaintenanceEncoder extends TypeEncoder<Maintenance> {
	public MaintenanceEncoder(Maintenance encodable, TypeInformation typeInformation) {
		super(encodable, typeInformation);
	}
	HashMap<WarningLevel,EnumeratedItemTypeInformation> enumTypeWarningLevelD = WarningLevelTypeInformation.getEnumTypeMap();
	HashMap<WarningLevel,EnumeratedItemTypeInformation> enumTypeWarningLevelDR = WarningLevelTypeInformation.getEnumTypeMap();
	HashMap<WarningLevel,EnumeratedItemTypeInformation> enumTypeWarningLevelP = WarningLevelTypeInformation.getEnumTypeMap();
	HashMap<WarningLevel,EnumeratedItemTypeInformation> enumTypeWarningLevelPR = WarningLevelTypeInformation.getEnumTypeMap();
	
	HashMap<WarningStatus,EnumeratedItemTypeInformation> enumTypeWarningStatus = WarningStatusTypeInformation.getEnumTypeMap();
	HashMap<ServiceWarningTrigger,EnumeratedItemTypeInformation> enumTypeServiceWarning = ServiceWarningTriggerTypeInformation.getEnumTypeMap();
	HashMap<BrakeFluidLevelStatus,EnumeratedItemTypeInformation> enumTypeBrakeFluidLevelStatus = BrakeFluidLevelStatusTypeInformation.getEnumTypeMap();
	HashMap<WasherFluidLevelStatus,EnumeratedItemTypeInformation> enumTypeWasherFluidLevelStatus = WasherFluidLevelStatusTypeInformation.getEnumTypeMap();
	
	@Override
	public void encode(ASN1Encoder encoder) throws IOException {
		ArrayList<TypeEncoder> componentEncoderList = new ArrayList<TypeEncoder>();

		componentEncoderList.add(
new BatteryStatusEncoder(getEncodable().getMainBatteryStatus(), MaintenanceTypeInformation._mainBatteryStatusTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new RealEncoder(getEncodable().getTyreStatusDriver(), MaintenanceTypeInformation._tyreStatusDriverTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new RealEncoder(getEncodable().getTyreStatusPassenger(), MaintenanceTypeInformation._tyreStatusPassengerTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new RealEncoder(getEncodable().getTyreStatusDriverRear(), MaintenanceTypeInformation._tyreStatusDriverRearTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new RealEncoder(getEncodable().getTyreStatusPassengerRear(), MaintenanceTypeInformation._tyreStatusPassengerRearTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new WarningLevelEncoder(enumTypeWarningLevelD, getEncodable().getTyrePreWarningDriver(), MaintenanceTypeInformation._tyrePreWarningDriverTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new WarningLevelEncoder(enumTypeWarningLevelP, getEncodable().getTyrePreWarningPassenger(), MaintenanceTypeInformation._tyrePreWarningPassengerTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new WarningLevelEncoder(enumTypeWarningLevelDR, getEncodable().getTyrePreWarningDriverRear(), MaintenanceTypeInformation._tyrePreWarningDriverRearTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new WarningLevelEncoder(enumTypeWarningLevelPR, getEncodable().getTyrePreWarningPassengerRear(), MaintenanceTypeInformation._tyrePreWarningPassengerRearTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new RealEncoder(getEncodable().getEngineHrsToService(), MaintenanceTypeInformation._engineHrsToServiceTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new RealEncoder(getEncodable().getDistanceToService(), MaintenanceTypeInformation._distanceToServiceTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new RealEncoder(getEncodable().getDaysToService(), MaintenanceTypeInformation._daysToServiceTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new WarningStatusEncoder(enumTypeWarningStatus, getEncodable().getServiceWarningStatus(), MaintenanceTypeInformation._serviceWarningStatusTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new ServiceWarningTriggerEncoder(enumTypeServiceWarning, getEncodable().getServiceWarningTrigger(), MaintenanceTypeInformation._serviceWarningTriggerTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new BrakeFluidLevelStatusEncoder(enumTypeBrakeFluidLevelStatus, getEncodable().getBrakeFluidLevelStatus(), MaintenanceTypeInformation._brakeFluidLevelStatusTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new WasherFluidLevelStatusEncoder(enumTypeWasherFluidLevelStatus, getEncodable().getWasherFluidLevelStatus(), MaintenanceTypeInformation._washerFluidLevelStatusTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new TimeStampEncoder(getEncodable().getTimeStamp(), MaintenanceTypeInformation._timeStampTypeInformation.getTypeInformation())
);

		encoder.encodeAsSet(componentEncoderList, getTypeInformation());
	}
}
