/*  
 *   This file was generated by openASN.1 - an open source ASN.1 toolkit for java
 *
 *   openASN.1 is Copyright (C) 2007 Clayton Hoss, Marc Weyland
 *
 *   openASN.1 is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU Lesser General Public License as 
 *   published by the Free Software Foundation, either version 3 of 
 *   the License, or (at your option) any later version.
 *
 *   openASN.1 is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *   GNU Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with openASN.1. If not, see <http://www.gnu.org/licenses/>.
 * 
 */
package Telematics.coder;

import java.io.IOException;
import java.util.ArrayList;

import org.openasn1.codec.coder.ASN1Encoder;
import org.openasn1.codec.coder.typecoder.*;
import Telematics.om.*;

public class EventPayloadEncoder extends TypeEncoder<EventPayload> {
	public EventPayloadEncoder(EventPayload encodable, TypeInformation typeInformation) {
		super(encodable, typeInformation);
	}

	@Override
	public void encode(ASN1Encoder encoder) throws IOException {
		ArrayList<TypeEncoder> componentEncoderList = new ArrayList<TypeEncoder>();

		componentEncoderList.add(
new AccidentEncoder(getEncodable().getAccident(), EventPayloadTypeInformation._accidentTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new TheftEncoder(getEncodable().getTheft(), EventPayloadTypeInformation._theftTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new DriverStatusEncoder(getEncodable().getDriverLogin(), EventPayloadTypeInformation._driverLoginTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new DriverStatusEncoder(getEncodable().getDriverLogout(), EventPayloadTypeInformation._driverLogoutTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new AlarmTriggerEncoder(getEncodable().getDriverAlarmTrigger(), EventPayloadTypeInformation._driverAlarmTriggerTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new AlarmTriggerEncoder(getEncodable().getPassengerAlarmTrigger(), EventPayloadTypeInformation._passengerAlarmTriggerTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new IrregularDrivingEncoder(getEncodable().getIrregularDriving(), EventPayloadTypeInformation._irregularDrivingTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new PassengerOnEncoder(getEncodable().getPassengerOn(), EventPayloadTypeInformation._passengerOnTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new PassengerOffEncoder(getEncodable().getPassengerOff(), EventPayloadTypeInformation._passengerOffTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new IrregularHWAccessedEncoder(getEncodable().getIrregularHWAccessed(), EventPayloadTypeInformation._irregularHWAccessedTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new TripStartEncoder(getEncodable().getTripStart(), EventPayloadTypeInformation._tripStartTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new TripEndEncoder(getEncodable().getTripEnd(), EventPayloadTypeInformation._tripEndTypeInformation.getTypeInformation())
);

		encoder.encodeAsChoice(componentEncoderList, getTypeInformation());
	}
}
