/*  
 *   This file was generated by openASN.1 - an open source ASN.1 toolkit for java
 *
 *   openASN.1 is Copyright (C) 2007 Clayton Hoss, Marc Weyland
 *
 *   openASN.1 is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU Lesser General Public License as 
 *   published by the Free Software Foundation, either version 3 of 
 *   the License, or (at your option) any later version.
 *
 *   openASN.1 is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *   GNU Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with openASN.1. If not, see <http://www.gnu.org/licenses/>.
 * 
 */
package Telematics.coder;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.openasn1.codec.coder.ASN1Encoder;
import org.openasn1.codec.coder.typecoder.*;
import Telematics.om.*;

public class ECUDiagnosticEncoder extends TypeEncoder<ECUDiagnostic> {
	public ECUDiagnosticEncoder(ECUDiagnostic encodable, TypeInformation typeInformation) {
		super(encodable, typeInformation);
	}
	HashMap<HealthStatus,EnumeratedItemTypeInformation> enumTypeHealthStatus = HealthStatusTypeInformation.getEnumTypeMap();
	@Override
	public void encode(ASN1Encoder encoder) throws IOException {
		ArrayList<TypeEncoder> componentEncoderList = new ArrayList<TypeEncoder>();

		ArrayList<DiagnosticTroubleCode> encodablesList = new ArrayList<DiagnosticTroubleCode>();
		List<DiagnosticTroubleCode> dtcs = getEncodable().getDtcs();
		encodablesList.addAll(dtcs);
		
		componentEncoderList.add(
new PrintableStringEncoder(getEncodable().getEcuID(), ECUDiagnosticTypeInformation._ecuIDTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new IntegerEncoder(getEncodable().getExceptionCode(), ECUDiagnosticTypeInformation._exceptionCodeTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new SetOfEncoder<DiagnosticTroubleCode> (
new DiagnosticTroubleCodeEncoder(null, ECUDiagnosticTypeInformation._dtcsTypeInformation.__dtcsTypeInformation.getTypeInformation())
, encodablesList, ECUDiagnosticTypeInformation._dtcsTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new HealthStatusEncoder(enumTypeHealthStatus, getEncodable().getDiagnosticResult(), ECUDiagnosticTypeInformation._diagnosticResultTypeInformation.getTypeInformation())
);

		encoder.encodeAsSequence(componentEncoderList, getTypeInformation());
	}
}
