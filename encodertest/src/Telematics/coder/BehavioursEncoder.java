/*  
 *   This file was generated by openASN.1 - an open source ASN.1 toolkit for java
 *
 *   openASN.1 is Copyright (C) 2007 Clayton Hoss, Marc Weyland
 *
 *   openASN.1 is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU Lesser General Public License as 
 *   published by the Free Software Foundation, either version 3 of 
 *   the License, or (at your option) any later version.
 *
 *   openASN.1 is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *   GNU Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with openASN.1. If not, see <http://www.gnu.org/licenses/>.
 * 
 */
package Telematics.coder;

import java.io.IOException;
import java.util.ArrayList;

import org.openasn1.codec.coder.ASN1Encoder;
import org.openasn1.codec.coder.typecoder.*;
import Telematics.om.*;

public class BehavioursEncoder extends TypeEncoder<Behaviours> {
	public BehavioursEncoder(Behaviours encodable, TypeInformation typeInformation) {
		super(encodable, typeInformation);
	}

	@Override
	public void encode(ASN1Encoder encoder) throws IOException {
		ArrayList<TypeEncoder> componentEncoderList = new ArrayList<TypeEncoder>();

		componentEncoderList.add(
new BehaviourAdvancedKeyFactorEncoder(getEncodable().getExcessSpeeding(), BehavioursTypeInformation._excessSpeedingTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new BehaviourUltimateKeyFactorEncoder(getEncodable().getAccelerating(), BehavioursTypeInformation._acceleratingTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new BehaviourUltimateKeyFactorEncoder(getEncodable().getBraking(), BehavioursTypeInformation._brakingTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new BehaviourUltimateKeyFactorEncoder(getEncodable().getCornering(), BehavioursTypeInformation._corneringTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new BehaviourAdvancedKeyFactorEncoder(getEncodable().getHarshRPM(), BehavioursTypeInformation._harshRPMTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new BehaviourUltimateKeyFactorEncoder(getEncodable().getHarshLaneChanging(), BehavioursTypeInformation._harshLaneChangingTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new BehaviourBasicKeyFactorEncoder(getEncodable().getFatiguedDriving(), BehavioursTypeInformation._fatiguedDrivingTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new BehaviourUltimateKeyFactorEncoder(getEncodable().getLaneDeparture(), BehavioursTypeInformation._laneDepartureTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new BehaviourUltimateKeyFactorEncoder(getEncodable().getOverSafeHeadway(), BehavioursTypeInformation._overSafeHeadwayTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new BehaviourUltimateKeyFactorEncoder(getEncodable().getPedestrianCollision(), BehavioursTypeInformation._pedestrianCollisionTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new BehaviourUltimateKeyFactorEncoder(getEncodable().getForwardCollision(), BehavioursTypeInformation._forwardCollisionTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new BehaviourAdvancedKeyFactorEncoder(getEncodable().getOverRevving(), BehavioursTypeInformation._overRevvingTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new BehaviourBasicKeyFactorEncoder(getEncodable().getSpeedbreakerBump(), BehavioursTypeInformation._speedbreakerBumpTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new EngineOnWithoutDriverEncoder(getEncodable().getEngineOnWithoutDriver(), BehavioursTypeInformation._engineOnWithoutDriverTypeInformation.getTypeInformation())
);
		componentEncoderList.add(
new HarshOvertakingEncoder(getEncodable().getHarshOvertaking(), BehavioursTypeInformation._harshOvertakingTypeInformation.getTypeInformation())
);

		encoder.encodeAsSet(componentEncoderList, getTypeInformation());
	}
}
